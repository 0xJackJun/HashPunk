{"id":"34d758023237a284a60ad0ef50b6bbd8","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/ERC721rUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension. This does random batch minting.\n */\ncontract ERC721rUpgradeable is ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n    \n    mapping(uint => uint) private _availableTokens;\n    uint256 private _numAvailableTokens;\n    uint256 private _maxSupply;\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721r_init(string memory name_, string memory symbol_, uint maxSupply_) internal onlyInitializing {\n        __ERC721r_init_unchained(name_, symbol_, maxSupply_);\n    }\n\n    function __ERC721r_init_unchained(string memory name_, string memory symbol_, uint maxSupply_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n        _maxSupply = maxSupply_;\n        _numAvailableTokens = maxSupply_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n    \n    function totalSupply() public view virtual returns (uint256) {\n        return _maxSupply - _numAvailableTokens;\n    }\n    \n    function maxSupply() public view virtual returns (uint256) {\n        return _maxSupply;\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        //require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721rUpgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721rUpgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    function _mintIdWithoutBalanceUpdate(address to, uint256 tokenId) private {\n        _beforeTokenTransfer(address(0), to, tokenId);\n        \n        _owners[tokenId] = to;\n        \n        emit Transfer(address(0), to, tokenId);\n        \n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    function _mintRandom(address to, uint _numToMint) internal virtual returns(uint[] memory){\n        require(_msgSender() == tx.origin, \"Contracts cannot mint\");\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(_numToMint > 0, \"ERC721r: need to mint at least one token\");\n        \n        // TODO: Probably don't need this as it will underflow and revert automatically in this case\n        require(_numAvailableTokens >= _numToMint, \"ERC721r: minting more tokens than available\");\n        \n        uint updatedNumAvailableTokens = _numAvailableTokens;\n        uint[] memory res = new uint[](_numToMint);\n        for (uint256 i; i < _numToMint; ++i) { // Do this ++ unchecked?\n            uint256 tokenId = getRandomAvailableTokenId(to, updatedNumAvailableTokens);\n            res[i] = tokenId;\n            _mintIdWithoutBalanceUpdate(to, tokenId);\n            \n            --updatedNumAvailableTokens;\n        }\n        \n        _numAvailableTokens = updatedNumAvailableTokens;\n        _balances[to] += _numToMint;\n        return res;\n    }\n        \n    function getRandomAvailableTokenId(address to, uint updatedNumAvailableTokens)\n        internal\n        returns (uint256)\n    {\n        uint256 randomNum = uint256(\n            keccak256(\n                abi.encode(\n                    to,\n                    tx.gasprice,\n                    block.number,\n                    block.timestamp,\n                    block.difficulty,\n                    blockhash(block.number - 1),\n                    address(this),\n                    updatedNumAvailableTokens\n                )\n            )\n        );\n        uint256 randomIndex = randomNum % updatedNumAvailableTokens;\n        return getAvailableTokenAtIndex(randomIndex, updatedNumAvailableTokens);\n    }\n\n    // Implements https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle. Code taken from CryptoPhunksV2\n    function getAvailableTokenAtIndex(uint256 indexToUse, uint updatedNumAvailableTokens)\n        internal\n        returns (uint256)\n    {\n        uint256 valAtIndex = _availableTokens[indexToUse];\n        uint256 result;\n        if (valAtIndex == 0) {\n            // This means the index itself is still an available token\n            result = indexToUse;\n        } else {\n            // This means the index itself is not an available token, but the val at that index is.\n            result = valAtIndex;\n        }\n\n        uint256 lastIndex = updatedNumAvailableTokens - 1;\n        uint256 lastValInArray = _availableTokens[lastIndex];\n        if (indexToUse != lastIndex) {\n            // Replace the value at indexToUse, now that it's been used.\n            // Replace it with the data from the last index in the array, since we are going to decrease the array size afterwards.\n            if (lastValInArray == 0) {\n                // This means the index itself is still an available token\n                _availableTokens[indexToUse] = lastIndex;\n            } else {\n                // This means the index itself is not an available token, but the val at that index is.\n                _availableTokens[indexToUse] = lastValInArray;\n            }\n        }\n        if (lastValInArray != 0) {\n            // Gas refund courtsey of @dievardump\n            delete _availableTokens[lastIndex];\n        }\n        \n        return result;\n    }\n    \n    // Not as good as minting a specific tokenId, but will behave the same at the start\n    // allowing you to explicitly mint some tokens at launch.\n    function _mintAtIndex(address to, uint index) internal virtual {\n        require(_msgSender() == tx.origin, \"Contracts cannot mint\");\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(_numAvailableTokens >= 1, \"ERC721r: minting more tokens than available\");\n        \n        uint tokenId = getAvailableTokenAtIndex(index, _numAvailableTokens);\n        --_numAvailableTokens;\n        \n        _mintIdWithoutBalanceUpdate(to, tokenId);\n        \n        _balances[to] += 1;\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721rUpgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721rUpgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}"},"contracts/HashPunk.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ERC721rUpgradeable.sol\";\nimport \"./HashPunkStorage.sol\";\n\ncontract HashPunk is ERC721rUpgradeable, HashPunkStorage {\n\n    function initialize(\n        string memory _uri,\n        address _hValue,\n        uint256 _base,\n        uint256 _passIdBase\n    ) public initializer {\n        __ERC721r_init(\"HashPunk\", \"HP\", 3000);\n        passIdBase = _passIdBase;\n        base = _base;\n        hValue = IHValue(_hValue);\n        baseMetadataURI = _uri;\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"HashPunk: caller is not the owner\"\n        );\n        _;\n    }\n\n    function mint(uint256 id, uint256 amount) public {\n        require(tx.origin == msg.sender, \"\");\n        require(id == passId || id == Hpoint, \"invalid id\");\n        if (id == passId) {\n            require(hValue.balanceOf(msg.sender, passId) >= passIdBase * amount, \"insufficient Pass Card balance\");\n            hValue.burn(msg.sender, passId, passIdBase * amount);\n            _mintRandom(msg.sender, amount);\n            hValue.mint(msg.sender, voucher, 1, \"\");\n            return;\n        }\n        require(hValue.balanceOf(msg.sender, Hpoint) - hValue.negtiveValue(msg.sender) >= base * amount, \"insufficient HValue balance\");\n        hValue.burn(msg.sender, Hpoint, base * amount);\n        uint[] memory tokenIds = _mintRandom(msg.sender, amount);\n        for(uint i = 0; i < tokenIds.length; i++) {\n            if(tokenIds[i]>=luckyStart && tokenIds[i]<=luckyEnd) {\n               userToRareIds[msg.sender].push(tokenIds[i]);\n            }\n        }\n        hValue.mint(msg.sender, voucher, 1, \"\");\n    }\n\n    /**\n     * Sets a new baseURI for NFT.\n     */\n    function setBaseUri(string memory baseUri) external onlyOwner {\n        baseMetadataURI = baseUri;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        return string(abi.encodePacked(baseMetadataURI, _uint2str(tokenId)));\n    }\n\n    function setPassIdBase(uint256 _passIdBase) public onlyOwner {\n        passIdBase = _passIdBase;\n    }\n\n    function setBase(uint256 _base) public onlyOwner {\n        base = _base;\n    }\n\n    function setHValue(IHValue _hValue) public onlyOwner {\n        hValue = _hValue;\n    }\n\n    function _uint2str(uint256 _i) internal pure returns (string memory) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bStr = new bytes(len);\n        uint256 k = len;\n        while (_i != 0) {\n            k = k - 1;\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n            bytes1 b1 = bytes1(temp);\n            bStr[k] = b1;\n            _i /= 10;\n        }\n        return string(bStr);\n    }\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view override returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        if(msg.sender == address(hValue)) {\n            return true;\n        }\n        address owner = ERC721rUpgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    function getUserToRareIds(address user) public view returns (uint[] memory) {\n        return userToRareIds[user];\n    }\n}\n"},"contracts/HashPunkStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IHValue {\n\n    function balanceOf(address account, uint256 id)\n        external\n        view\n        returns (uint256);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    function burn(\n        address from,\n        uint256 tokenId,\n        uint256 amount\n    ) external;\n\n    function mint(\n        address to,\n        uint256 tokenId,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    function negtiveValue(address _address) external view returns (uint256);\n}\n\ncontract HashPunkStorage {\n    uint256 public constant passId  = 1;\n    uint256 public constant Hpoint  = 2;\n    uint256 public constant voucher = 3;\n    uint256 public          passIdBase;\n    uint256 public          base;\n    IHValue public          hValue;\n    address public          owner;\n    string  public          baseMetadataURI;\n    uint256 public          luckyStart       = 1;\n    uint256 public          luckyEnd         = 500;\n    mapping(address => uint[]) public userToRareIds;\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[613],"Initializable":[168]},"id":169,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":169,"sourceUnit":614,"src":"138:44:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"184:2198:0","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":168,"linearizedBaseContracts":[168],"name":"Initializable","nameLocation":"2401:13:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"2421:109:0","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":6,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:0","nodeType":"VariableDeclaration","scope":168,"src":"2535:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"2568:91:0","text":" @dev Indicates that the contract is in the process of being initialized."},"id":9,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:0","nodeType":"VariableDeclaration","scope":168,"src":"2664:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":10,"nodeType":"StructuredDocumentation","src":"2697:90:0","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":14,"name":"Initialized","nameLocation":"2798:11:0","nodeType":"EventDefinition","parameters":{"id":13,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:0","nodeType":"VariableDeclaration","scope":14,"src":"2810:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":11,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:0"},"src":"2792:33:0"},{"body":{"id":69,"nodeType":"Block","src":"3258:483:0","statements":[{"assignments":[18],"declarations":[{"constant":false,"id":18,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3273:14:0","nodeType":"VariableDeclaration","scope":69,"src":"3268:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":17,"name":"bool","nodeType":"ElementaryTypeName","src":"3268:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":21,"initialValue":{"id":20,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3290:14:0","subExpression":{"id":19,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"3291:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3268:36:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":42,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":23,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"3336:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":26,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":24,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"3354:12:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":25,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3354:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3336:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":28,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3335:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":40,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":36,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3376:45:0","subExpression":{"arguments":[{"arguments":[{"id":33,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3415:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$168","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$168","typeString":"contract Initializable"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3407:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"3407:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":29,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"3377:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$613_$","typeString":"type(library AddressUpgradeable)"}},"id":30,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3396:10:0","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":347,"src":"3377:29:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3377:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":37,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"3425:12:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":38,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3376:66:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":41,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3375:68:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:108:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":43,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3457:48:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":22,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3314:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3314:201:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":45,"nodeType":"ExpressionStatement","src":"3314:201:0"},{"expression":{"id":48,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":46,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"3525:12:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":47,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3540:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3525:16:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":49,"nodeType":"ExpressionStatement","src":"3525:16:0"},{"condition":{"id":50,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"3555:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":56,"nodeType":"IfStatement","src":"3551:65:0","trueBody":{"id":55,"nodeType":"Block","src":"3571:45:0","statements":[{"expression":{"id":53,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":51,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"3585:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":52,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3601:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3585:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":54,"nodeType":"ExpressionStatement","src":"3585:20:0"}]}},{"id":57,"nodeType":"PlaceholderStatement","src":"3625:1:0"},{"condition":{"id":58,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"3640:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":68,"nodeType":"IfStatement","src":"3636:99:0","trueBody":{"id":67,"nodeType":"Block","src":"3656:79:0","statements":[{"expression":{"id":61,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":59,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"3670:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":60,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3686:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3670:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":62,"nodeType":"ExpressionStatement","src":"3670:21:0"},{"eventCall":{"arguments":[{"hexValue":"31","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3722:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":63,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"3710:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3710:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"EmitStatement","src":"3705:19:0"}]}}]},"documentation":{"id":15,"nodeType":"StructuredDocumentation","src":"2831:399:0","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":70,"name":"initializer","nameLocation":"3244:11:0","nodeType":"ModifierDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"3255:2:0"},"src":"3235:506:0","virtual":false,"visibility":"internal"},{"body":{"id":102,"nodeType":"Block","src":"4852:255:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4870:14:0","subExpression":{"id":76,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"4871:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":80,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":78,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"4888:12:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":79,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"4903:7:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4888:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4870:40:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":82,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:48:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":75,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4862:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":83,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4862:99:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":84,"nodeType":"ExpressionStatement","src":"4862:99:0"},{"expression":{"id":87,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":85,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"4971:12:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":86,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"4986:7:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4971:22:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":88,"nodeType":"ExpressionStatement","src":"4971:22:0"},{"expression":{"id":91,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":89,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"5003:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":90,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5019:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5003:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":92,"nodeType":"ExpressionStatement","src":"5003:20:0"},{"id":93,"nodeType":"PlaceholderStatement","src":"5033:1:0"},{"expression":{"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":94,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"5044:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5060:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5044:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":97,"nodeType":"ExpressionStatement","src":"5044:21:0"},{"eventCall":{"arguments":[{"id":99,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"5092:7:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":98,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"5080:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5080:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":101,"nodeType":"EmitStatement","src":"5075:25:0"}]},"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"3747:1062:0","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":103,"name":"reinitializer","nameLocation":"4823:13:0","nodeType":"ModifierDefinition","parameters":{"id":74,"nodeType":"ParameterList","parameters":[{"constant":false,"id":73,"mutability":"mutable","name":"version","nameLocation":"4843:7:0","nodeType":"VariableDeclaration","scope":103,"src":"4837:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":72,"name":"uint8","nodeType":"ElementaryTypeName","src":"4837:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4836:15:0"},"src":"4814:293:0","virtual":false,"visibility":"internal"},{"body":{"id":112,"nodeType":"Block","src":"5345:97:0","statements":[{"expression":{"arguments":[{"id":107,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"5363:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5378:45:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":106,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5355:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5355:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":110,"nodeType":"ExpressionStatement","src":"5355:69:0"},{"id":111,"nodeType":"PlaceholderStatement","src":"5434:1:0"}]},"documentation":{"id":104,"nodeType":"StructuredDocumentation","src":"5113:199:0","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":113,"name":"onlyInitializing","nameLocation":"5326:16:0","nodeType":"ModifierDefinition","parameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"5342:2:0"},"src":"5317:125:0","virtual":false,"visibility":"internal"},{"body":{"id":148,"nodeType":"Block","src":"5977:230:0","statements":[{"expression":{"arguments":[{"id":119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5995:14:0","subExpression":{"id":118,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"5996:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6011:41:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":117,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5987:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5987:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":122,"nodeType":"ExpressionStatement","src":"5987:66:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":123,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"6067:12:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6087:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":125,"name":"uint8","nodeType":"ElementaryTypeName","src":"6087:5:0","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":124,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6082:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6082:11:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6094:3:0","memberName":"max","nodeType":"MemberAccess","src":"6082:15:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6067:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":147,"nodeType":"IfStatement","src":"6063:138:0","trueBody":{"id":146,"nodeType":"Block","src":"6099:102:0","statements":[{"expression":{"id":136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":130,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"6113:12:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":132,"name":"uint8","nodeType":"ElementaryTypeName","src":"6133:5:0","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":131,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6128:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:11:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6140:3:0","memberName":"max","nodeType":"MemberAccess","src":"6128:15:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6113:30:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":137,"nodeType":"ExpressionStatement","src":"6113:30:0"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6179:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":140,"name":"uint8","nodeType":"ElementaryTypeName","src":"6179:5:0","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":139,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6174:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:11:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6186:3:0","memberName":"max","nodeType":"MemberAccess","src":"6174:15:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":138,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"6162:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6162:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":145,"nodeType":"EmitStatement","src":"6157:33:0"}]}}]},"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"5448:475:0","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":149,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5937:20:0","nodeType":"FunctionDefinition","parameters":{"id":115,"nodeType":"ParameterList","parameters":[],"src":"5957:2:0"},"returnParameters":{"id":116,"nodeType":"ParameterList","parameters":[],"src":"5977:0:0"},"scope":168,"src":"5928:279:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":157,"nodeType":"Block","src":"6381:36:0","statements":[{"expression":{"id":155,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"6398:12:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":154,"id":156,"nodeType":"Return","src":"6391:19:0"}]},"documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"6213:99:0","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":158,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6326:22:0","nodeType":"FunctionDefinition","parameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"6348:2:0"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":158,"src":"6374:5:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":152,"name":"uint8","nodeType":"ElementaryTypeName","src":"6374:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6373:7:0"},"scope":168,"src":"6317:100:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":166,"nodeType":"Block","src":"6589:37:0","statements":[{"expression":{"id":164,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"6606:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":163,"id":165,"nodeType":"Return","src":"6599:20:0"}]},"documentation":{"id":159,"nodeType":"StructuredDocumentation","src":"6423:105:0","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":167,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6542:15:0","nodeType":"FunctionDefinition","parameters":{"id":160,"nodeType":"ParameterList","parameters":[],"src":"6557:2:0"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":167,"src":"6583:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":161,"name":"bool","nodeType":"ElementaryTypeName","src":"6583:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6582:6:0"},"scope":168,"src":"6533:93:0","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":169,"src":"2383:4245:0","usedErrors":[]}],"src":"113:6516:0"},"id":0},"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol","exportedSymbols":{"IERC721ReceiverUpgradeable":[186]},"id":187,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":170,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721ReceiverUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":171,"nodeType":"StructuredDocumentation","src":"141:152:1","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":186,"linearizedBaseContracts":[186],"name":"IERC721ReceiverUpgradeable","nameLocation":"304:26:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":172,"nodeType":"StructuredDocumentation","src":"337:493:1","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":185,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"844:16:1","nodeType":"FunctionDefinition","parameters":{"id":181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":174,"mutability":"mutable","name":"operator","nameLocation":"878:8:1","nodeType":"VariableDeclaration","scope":185,"src":"870:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"870:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":176,"mutability":"mutable","name":"from","nameLocation":"904:4:1","nodeType":"VariableDeclaration","scope":185,"src":"896:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":175,"name":"address","nodeType":"ElementaryTypeName","src":"896:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":178,"mutability":"mutable","name":"tokenId","nameLocation":"926:7:1","nodeType":"VariableDeclaration","scope":185,"src":"918:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":177,"name":"uint256","nodeType":"ElementaryTypeName","src":"918:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":180,"mutability":"mutable","name":"data","nameLocation":"958:4:1","nodeType":"VariableDeclaration","scope":185,"src":"943:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":179,"name":"bytes","nodeType":"ElementaryTypeName","src":"943:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"860:108:1"},"returnParameters":{"id":184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":185,"src":"987:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":182,"name":"bytes4","nodeType":"ElementaryTypeName","src":"987:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"986:8:1"},"scope":186,"src":"835:160:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":187,"src":"294:703:1","usedErrors":[]}],"src":"116:882:1"},"id":1},"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[711],"IERC721Upgradeable":[302]},"id":303,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":188,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"../../utils/introspection/IERC165Upgradeable.sol","id":189,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":303,"sourceUnit":712,"src":"133:58:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":191,"name":"IERC165Upgradeable","nameLocations":["293:18:2"],"nodeType":"IdentifierPath","referencedDeclaration":711,"src":"293:18:2"},"id":192,"nodeType":"InheritanceSpecifier","src":"293:18:2"}],"canonicalName":"IERC721Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":190,"nodeType":"StructuredDocumentation","src":"193:67:2","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":302,"linearizedBaseContracts":[302,711],"name":"IERC721Upgradeable","nameLocation":"271:18:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":193,"nodeType":"StructuredDocumentation","src":"318:88:2","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":201,"name":"Transfer","nameLocation":"417:8:2","nodeType":"EventDefinition","parameters":{"id":200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":195,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"442:4:2","nodeType":"VariableDeclaration","scope":201,"src":"426:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":194,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":197,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"464:2:2","nodeType":"VariableDeclaration","scope":201,"src":"448:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":196,"name":"address","nodeType":"ElementaryTypeName","src":"448:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":199,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"484:7:2","nodeType":"VariableDeclaration","scope":201,"src":"468:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":198,"name":"uint256","nodeType":"ElementaryTypeName","src":"468:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:67:2"},"src":"411:82:2"},{"anonymous":false,"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"499:94:2","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":210,"name":"Approval","nameLocation":"604:8:2","nodeType":"EventDefinition","parameters":{"id":209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"629:5:2","nodeType":"VariableDeclaration","scope":210,"src":"613:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"613:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":206,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"652:8:2","nodeType":"VariableDeclaration","scope":210,"src":"636:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":208,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"678:7:2","nodeType":"VariableDeclaration","scope":210,"src":"662:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":207,"name":"uint256","nodeType":"ElementaryTypeName","src":"662:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"612:74:2"},"src":"598:89:2"},{"anonymous":false,"documentation":{"id":211,"nodeType":"StructuredDocumentation","src":"693:117:2","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":219,"name":"ApprovalForAll","nameLocation":"821:14:2","nodeType":"EventDefinition","parameters":{"id":218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"852:5:2","nodeType":"VariableDeclaration","scope":219,"src":"836:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":212,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":215,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"875:8:2","nodeType":"VariableDeclaration","scope":219,"src":"859:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":214,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":217,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"890:8:2","nodeType":"VariableDeclaration","scope":219,"src":"885:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":216,"name":"bool","nodeType":"ElementaryTypeName","src":"885:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"835:64:2"},"src":"815:85:2"},{"documentation":{"id":220,"nodeType":"StructuredDocumentation","src":"906:76:2","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":227,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"996:9:2","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"owner","nameLocation":"1014:5:2","nodeType":"VariableDeclaration","scope":227,"src":"1006:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"1006:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1005:15:2"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"balance","nameLocation":"1052:7:2","nodeType":"VariableDeclaration","scope":227,"src":"1044:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":224,"name":"uint256","nodeType":"ElementaryTypeName","src":"1044:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1043:17:2"},"scope":302,"src":"987:74:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"1067:131:2","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":235,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1212:7:2","nodeType":"FunctionDefinition","parameters":{"id":231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"tokenId","nameLocation":"1228:7:2","nodeType":"VariableDeclaration","scope":235,"src":"1220:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":229,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1219:17:2"},"returnParameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"owner","nameLocation":"1268:5:2","nodeType":"VariableDeclaration","scope":235,"src":"1260:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"1260:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1259:15:2"},"scope":302,"src":"1203:72:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"1281:556:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":247,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1851:16:2","nodeType":"FunctionDefinition","parameters":{"id":245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"mutability":"mutable","name":"from","nameLocation":"1885:4:2","nodeType":"VariableDeclaration","scope":247,"src":"1877:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":237,"name":"address","nodeType":"ElementaryTypeName","src":"1877:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"to","nameLocation":"1907:2:2","nodeType":"VariableDeclaration","scope":247,"src":"1899:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"1899:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":242,"mutability":"mutable","name":"tokenId","nameLocation":"1927:7:2","nodeType":"VariableDeclaration","scope":247,"src":"1919:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":241,"name":"uint256","nodeType":"ElementaryTypeName","src":"1919:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":244,"mutability":"mutable","name":"data","nameLocation":"1959:4:2","nodeType":"VariableDeclaration","scope":247,"src":"1944:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":243,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1867:102:2"},"returnParameters":{"id":246,"nodeType":"ParameterList","parameters":[],"src":"1978:0:2"},"scope":302,"src":"1842:137:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"1985:687:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":257,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2686:16:2","nodeType":"FunctionDefinition","parameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"from","nameLocation":"2720:4:2","nodeType":"VariableDeclaration","scope":257,"src":"2712:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":249,"name":"address","nodeType":"ElementaryTypeName","src":"2712:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":252,"mutability":"mutable","name":"to","nameLocation":"2742:2:2","nodeType":"VariableDeclaration","scope":257,"src":"2734:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":251,"name":"address","nodeType":"ElementaryTypeName","src":"2734:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":254,"mutability":"mutable","name":"tokenId","nameLocation":"2762:7:2","nodeType":"VariableDeclaration","scope":257,"src":"2754:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":253,"name":"uint256","nodeType":"ElementaryTypeName","src":"2754:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2702:73:2"},"returnParameters":{"id":256,"nodeType":"ParameterList","parameters":[],"src":"2784:0:2"},"scope":302,"src":"2677:108:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":258,"nodeType":"StructuredDocumentation","src":"2791:732:2","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":267,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3537:12:2","nodeType":"FunctionDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":260,"mutability":"mutable","name":"from","nameLocation":"3567:4:2","nodeType":"VariableDeclaration","scope":267,"src":"3559:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":259,"name":"address","nodeType":"ElementaryTypeName","src":"3559:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":262,"mutability":"mutable","name":"to","nameLocation":"3589:2:2","nodeType":"VariableDeclaration","scope":267,"src":"3581:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"3581:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":264,"mutability":"mutable","name":"tokenId","nameLocation":"3609:7:2","nodeType":"VariableDeclaration","scope":267,"src":"3601:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":263,"name":"uint256","nodeType":"ElementaryTypeName","src":"3601:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3549:73:2"},"returnParameters":{"id":266,"nodeType":"ParameterList","parameters":[],"src":"3631:0:2"},"scope":302,"src":"3528:104:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":268,"nodeType":"StructuredDocumentation","src":"3638:452:2","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":275,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4104:7:2","nodeType":"FunctionDefinition","parameters":{"id":273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":270,"mutability":"mutable","name":"to","nameLocation":"4120:2:2","nodeType":"VariableDeclaration","scope":275,"src":"4112:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":269,"name":"address","nodeType":"ElementaryTypeName","src":"4112:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":272,"mutability":"mutable","name":"tokenId","nameLocation":"4132:7:2","nodeType":"VariableDeclaration","scope":275,"src":"4124:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":271,"name":"uint256","nodeType":"ElementaryTypeName","src":"4124:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4111:29:2"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[],"src":"4149:0:2"},"scope":302,"src":"4095:55:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":276,"nodeType":"StructuredDocumentation","src":"4156:309:2","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":283,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4479:17:2","nodeType":"FunctionDefinition","parameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":278,"mutability":"mutable","name":"operator","nameLocation":"4505:8:2","nodeType":"VariableDeclaration","scope":283,"src":"4497:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":277,"name":"address","nodeType":"ElementaryTypeName","src":"4497:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":280,"mutability":"mutable","name":"_approved","nameLocation":"4520:9:2","nodeType":"VariableDeclaration","scope":283,"src":"4515:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":279,"name":"bool","nodeType":"ElementaryTypeName","src":"4515:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4496:34:2"},"returnParameters":{"id":282,"nodeType":"ParameterList","parameters":[],"src":"4539:0:2"},"scope":302,"src":"4470:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"4546:139:2","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":291,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4699:11:2","nodeType":"FunctionDefinition","parameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"tokenId","nameLocation":"4719:7:2","nodeType":"VariableDeclaration","scope":291,"src":"4711:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":285,"name":"uint256","nodeType":"ElementaryTypeName","src":"4711:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4710:17:2"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":289,"mutability":"mutable","name":"operator","nameLocation":"4759:8:2","nodeType":"VariableDeclaration","scope":291,"src":"4751:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":288,"name":"address","nodeType":"ElementaryTypeName","src":"4751:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4750:18:2"},"scope":302,"src":"4690:79:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"4775:138:2","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":301,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4927:16:2","nodeType":"FunctionDefinition","parameters":{"id":297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"owner","nameLocation":"4952:5:2","nodeType":"VariableDeclaration","scope":301,"src":"4944:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":293,"name":"address","nodeType":"ElementaryTypeName","src":"4944:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":296,"mutability":"mutable","name":"operator","nameLocation":"4967:8:2","nodeType":"VariableDeclaration","scope":301,"src":"4959:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":295,"name":"address","nodeType":"ElementaryTypeName","src":"4959:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4943:33:2"},"returnParameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":301,"src":"5000:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":298,"name":"bool","nodeType":"ElementaryTypeName","src":"5000:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4999:6:2"},"scope":302,"src":"4918:88:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":303,"src":"261:4747:2","usedErrors":[]}],"src":"108:4901:2"},"id":2},"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[711],"IERC721MetadataUpgradeable":[329],"IERC721Upgradeable":[302]},"id":330,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":304,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol","file":"../IERC721Upgradeable.sol","id":305,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":330,"sourceUnit":303,"src":"137:35:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":307,"name":"IERC721Upgradeable","nameLocations":["348:18:3"],"nodeType":"IdentifierPath","referencedDeclaration":302,"src":"348:18:3"},"id":308,"nodeType":"InheritanceSpecifier","src":"348:18:3"}],"canonicalName":"IERC721MetadataUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":306,"nodeType":"StructuredDocumentation","src":"174:133:3","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":329,"linearizedBaseContracts":[329,302,711],"name":"IERC721MetadataUpgradeable","nameLocation":"318:26:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"373:58:3","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":314,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"445:4:3","nodeType":"FunctionDefinition","parameters":{"id":310,"nodeType":"ParameterList","parameters":[],"src":"449:2:3"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":314,"src":"475:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":311,"name":"string","nodeType":"ElementaryTypeName","src":"475:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"474:15:3"},"scope":329,"src":"436:54:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":315,"nodeType":"StructuredDocumentation","src":"496:60:3","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":320,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"570:6:3","nodeType":"FunctionDefinition","parameters":{"id":316,"nodeType":"ParameterList","parameters":[],"src":"576:2:3"},"returnParameters":{"id":319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":320,"src":"602:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":317,"name":"string","nodeType":"ElementaryTypeName","src":"602:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"601:15:3"},"scope":329,"src":"561:56:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":321,"nodeType":"StructuredDocumentation","src":"623:90:3","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":328,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"727:8:3","nodeType":"FunctionDefinition","parameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"tokenId","nameLocation":"744:7:3","nodeType":"VariableDeclaration","scope":328,"src":"736:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":322,"name":"uint256","nodeType":"ElementaryTypeName","src":"736:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"735:17:3"},"returnParameters":{"id":327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":328,"src":"776:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":325,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"775:15:3"},"scope":329,"src":"718:73:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":330,"src":"308:485:3","usedErrors":[]}],"src":"112:682:3"},"id":3},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[613]},"id":614,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":331,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":332,"nodeType":"StructuredDocumentation","src":"126:67:4","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":613,"linearizedBaseContracts":[613],"name":"AddressUpgradeable","nameLocation":"202:18:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":346,"nodeType":"Block","src":"1252:254:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":340,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"1476:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1484:4:4","memberName":"code","nodeType":"MemberAccess","src":"1476:12:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1489:6:4","memberName":"length","nodeType":"MemberAccess","src":"1476:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":339,"id":345,"nodeType":"Return","src":"1469:30:4"}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"227:954:4","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":347,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:4","nodeType":"FunctionDefinition","parameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"account","nameLocation":"1214:7:4","nodeType":"VariableDeclaration","scope":347,"src":"1206:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":334,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:4"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":347,"src":"1246:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":337,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:4"},"scope":613,"src":"1186:320:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":380,"nodeType":"Block","src":"2494:241:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":358,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$613","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$613","typeString":"library AddressUpgradeable"}],"id":357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":356,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:4","typeDescriptions":{}}},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2512:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2526:7:4","memberName":"balance","nodeType":"MemberAccess","src":"2512:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":361,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"2537:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":355,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2504:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2504:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":365,"nodeType":"ExpressionStatement","src":"2504:73:4"},{"assignments":[367,null],"declarations":[{"constant":false,"id":367,"mutability":"mutable","name":"success","nameLocation":"2594:7:4","nodeType":"VariableDeclaration","scope":380,"src":"2589:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":366,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":374,"initialValue":{"arguments":[{"hexValue":"","id":372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":368,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"2607:9:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2617:4:4","memberName":"call","nodeType":"MemberAccess","src":"2607:14:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":370,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"2629:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2607:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:4"},{"expression":{"arguments":[{"id":376,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"2658:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":375,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2650:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":379,"nodeType":"ExpressionStatement","src":"2650:78:4"}]},"documentation":{"id":348,"nodeType":"StructuredDocumentation","src":"1512:906:4","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":381,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:4","nodeType":"FunctionDefinition","parameters":{"id":353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:4","nodeType":"VariableDeclaration","scope":381,"src":"2442:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:4","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":352,"mutability":"mutable","name":"amount","nameLocation":"2477:6:4","nodeType":"VariableDeclaration","scope":381,"src":"2469:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":351,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:4"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[],"src":"2494:0:4"},"scope":613,"src":"2423:312:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":398,"nodeType":"Block","src":"3566:96:4","statements":[{"expression":{"arguments":[{"id":392,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"3605:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":393,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"3613:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3619:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3622:32:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":391,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[439,483],"referencedDeclaration":483,"src":"3583:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:72:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":390,"id":397,"nodeType":"Return","src":"3576:79:4"}]},"documentation":{"id":382,"nodeType":"StructuredDocumentation","src":"2741:731:4","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":399,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:4","nodeType":"FunctionDefinition","parameters":{"id":387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"target","nameLocation":"3507:6:4","nodeType":"VariableDeclaration","scope":399,"src":"3499:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":383,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":386,"mutability":"mutable","name":"data","nameLocation":"3528:4:4","nodeType":"VariableDeclaration","scope":399,"src":"3515:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":385,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:4"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":399,"src":"3552:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":388,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:4"},"scope":613,"src":"3477:185:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":418,"nodeType":"Block","src":"4031:76:4","statements":[{"expression":{"arguments":[{"id":412,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"4070:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":413,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"4078:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4084:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":415,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"4087:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":411,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[439,483],"referencedDeclaration":483,"src":"4048:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4048:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":410,"id":417,"nodeType":"Return","src":"4041:59:4"}]},"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"3668:211:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":419,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3893:12:4","nodeType":"FunctionDefinition","parameters":{"id":407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"target","nameLocation":"3923:6:4","nodeType":"VariableDeclaration","scope":419,"src":"3915:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"3915:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"data","nameLocation":"3952:4:4","nodeType":"VariableDeclaration","scope":419,"src":"3939:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":403,"name":"bytes","nodeType":"ElementaryTypeName","src":"3939:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":406,"mutability":"mutable","name":"errorMessage","nameLocation":"3980:12:4","nodeType":"VariableDeclaration","scope":419,"src":"3966:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":405,"name":"string","nodeType":"ElementaryTypeName","src":"3966:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3905:93:4"},"returnParameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":419,"src":"4017:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":408,"name":"bytes","nodeType":"ElementaryTypeName","src":"4017:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4016:14:4"},"scope":613,"src":"3884:223:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":438,"nodeType":"Block","src":"4612:111:4","statements":[{"expression":{"arguments":[{"id":432,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"4651:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":433,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"4659:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"4665:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4672:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":431,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[439,483],"referencedDeclaration":483,"src":"4629:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4629:87:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":430,"id":437,"nodeType":"Return","src":"4622:94:4"}]},"documentation":{"id":420,"nodeType":"StructuredDocumentation","src":"4113:351:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":439,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4478:21:4","nodeType":"FunctionDefinition","parameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"mutability":"mutable","name":"target","nameLocation":"4517:6:4","nodeType":"VariableDeclaration","scope":439,"src":"4509:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"4509:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":424,"mutability":"mutable","name":"data","nameLocation":"4546:4:4","nodeType":"VariableDeclaration","scope":439,"src":"4533:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":423,"name":"bytes","nodeType":"ElementaryTypeName","src":"4533:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":426,"mutability":"mutable","name":"value","nameLocation":"4568:5:4","nodeType":"VariableDeclaration","scope":439,"src":"4560:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":425,"name":"uint256","nodeType":"ElementaryTypeName","src":"4560:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:80:4"},"returnParameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":439,"src":"4598:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":428,"name":"bytes","nodeType":"ElementaryTypeName","src":"4598:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4597:14:4"},"scope":613,"src":"4469:254:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":482,"nodeType":"Block","src":"5150:267:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":456,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5176:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$613","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$613","typeString":"library AddressUpgradeable"}],"id":455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5168:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":454,"name":"address","nodeType":"ElementaryTypeName","src":"5168:7:4","typeDescriptions":{}}},"id":457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5168:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5182:7:4","memberName":"balance","nodeType":"MemberAccess","src":"5168:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":459,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"5193:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:30:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5200:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":453,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5160:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:81:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":463,"nodeType":"ExpressionStatement","src":"5160:81:4"},{"assignments":[465,467],"declarations":[{"constant":false,"id":465,"mutability":"mutable","name":"success","nameLocation":"5257:7:4","nodeType":"VariableDeclaration","scope":482,"src":"5252:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":464,"name":"bool","nodeType":"ElementaryTypeName","src":"5252:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":467,"mutability":"mutable","name":"returndata","nameLocation":"5279:10:4","nodeType":"VariableDeclaration","scope":482,"src":"5266:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":466,"name":"bytes","nodeType":"ElementaryTypeName","src":"5266:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":474,"initialValue":{"arguments":[{"id":472,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"5319:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":468,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"5293:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5300:4:4","memberName":"call","nodeType":"MemberAccess","src":"5293:11:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":470,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"5312:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5293:25:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5293:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5251:73:4"},{"expression":{"arguments":[{"id":476,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"5368:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":477,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"5376:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":478,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"5385:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":479,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"5397:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":475,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"5341:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5341:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":452,"id":481,"nodeType":"Return","src":"5334:76:4"}]},"documentation":{"id":440,"nodeType":"StructuredDocumentation","src":"4729:237:4","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":483,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4980:21:4","nodeType":"FunctionDefinition","parameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"target","nameLocation":"5019:6:4","nodeType":"VariableDeclaration","scope":483,"src":"5011:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":441,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":444,"mutability":"mutable","name":"data","nameLocation":"5048:4:4","nodeType":"VariableDeclaration","scope":483,"src":"5035:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":443,"name":"bytes","nodeType":"ElementaryTypeName","src":"5035:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":446,"mutability":"mutable","name":"value","nameLocation":"5070:5:4","nodeType":"VariableDeclaration","scope":483,"src":"5062:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"5062:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":448,"mutability":"mutable","name":"errorMessage","nameLocation":"5099:12:4","nodeType":"VariableDeclaration","scope":483,"src":"5085:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":447,"name":"string","nodeType":"ElementaryTypeName","src":"5085:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5001:116:4"},"returnParameters":{"id":452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":483,"src":"5136:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":450,"name":"bytes","nodeType":"ElementaryTypeName","src":"5136:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5135:14:4"},"scope":613,"src":"4971:446:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":499,"nodeType":"Block","src":"5694:97:4","statements":[{"expression":{"arguments":[{"id":494,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"5730:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":495,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"5738:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5744:39:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":493,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[500,529],"referencedDeclaration":529,"src":"5711:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5711:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":492,"id":498,"nodeType":"Return","src":"5704:80:4"}]},"documentation":{"id":484,"nodeType":"StructuredDocumentation","src":"5423:166:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":500,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5603:18:4","nodeType":"FunctionDefinition","parameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"target","nameLocation":"5630:6:4","nodeType":"VariableDeclaration","scope":500,"src":"5622:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":485,"name":"address","nodeType":"ElementaryTypeName","src":"5622:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":488,"mutability":"mutable","name":"data","nameLocation":"5651:4:4","nodeType":"VariableDeclaration","scope":500,"src":"5638:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":487,"name":"bytes","nodeType":"ElementaryTypeName","src":"5638:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5621:35:4"},"returnParameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":491,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":500,"src":"5680:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":490,"name":"bytes","nodeType":"ElementaryTypeName","src":"5680:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5679:14:4"},"scope":613,"src":"5594:197:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":528,"nodeType":"Block","src":"6133:168:4","statements":[{"assignments":[513,515],"declarations":[{"constant":false,"id":513,"mutability":"mutable","name":"success","nameLocation":"6149:7:4","nodeType":"VariableDeclaration","scope":528,"src":"6144:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":512,"name":"bool","nodeType":"ElementaryTypeName","src":"6144:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":515,"mutability":"mutable","name":"returndata","nameLocation":"6171:10:4","nodeType":"VariableDeclaration","scope":528,"src":"6158:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":514,"name":"bytes","nodeType":"ElementaryTypeName","src":"6158:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":520,"initialValue":{"arguments":[{"id":518,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"6203:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":516,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6185:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6192:10:4","memberName":"staticcall","nodeType":"MemberAccess","src":"6185:17:4","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6185:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6143:65:4"},{"expression":{"arguments":[{"id":522,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6252:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":523,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":513,"src":"6260:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":524,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"6269:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":525,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"6281:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":521,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"6225:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":511,"id":527,"nodeType":"Return","src":"6218:76:4"}]},"documentation":{"id":501,"nodeType":"StructuredDocumentation","src":"5797:173:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":529,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5984:18:4","nodeType":"FunctionDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":503,"mutability":"mutable","name":"target","nameLocation":"6020:6:4","nodeType":"VariableDeclaration","scope":529,"src":"6012:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":502,"name":"address","nodeType":"ElementaryTypeName","src":"6012:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"data","nameLocation":"6049:4:4","nodeType":"VariableDeclaration","scope":529,"src":"6036:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":504,"name":"bytes","nodeType":"ElementaryTypeName","src":"6036:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"errorMessage","nameLocation":"6077:12:4","nodeType":"VariableDeclaration","scope":529,"src":"6063:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":506,"name":"string","nodeType":"ElementaryTypeName","src":"6063:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6002:93:4"},"returnParameters":{"id":511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":510,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":529,"src":"6119:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":509,"name":"bytes","nodeType":"ElementaryTypeName","src":"6119:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6118:14:4"},"scope":613,"src":"5975:326:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":567,"nodeType":"Block","src":"6783:434:4","statements":[{"condition":{"id":543,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"6797:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":565,"nodeType":"Block","src":"7153:58:4","statements":[{"expression":{"arguments":[{"id":561,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"7175:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":562,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":538,"src":"7187:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":560,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"7167:7:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7167:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":564,"nodeType":"ExpressionStatement","src":"7167:33:4"}]},"id":566,"nodeType":"IfStatement","src":"6793:418:4","trueBody":{"id":559,"nodeType":"Block","src":"6806:341:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":544,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"6824:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6835:6:4","memberName":"length","nodeType":"MemberAccess","src":"6824:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6845:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6824:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":556,"nodeType":"IfStatement","src":"6820:286:4","trueBody":{"id":555,"nodeType":"Block","src":"6848:258:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":550,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"7050:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":549,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"7039:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7039:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7059:31:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":548,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7031:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7031:60:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":554,"nodeType":"ExpressionStatement","src":"7031:60:4"}]}},{"expression":{"id":557,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"7126:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":542,"id":558,"nodeType":"Return","src":"7119:17:4"}]}}]},"documentation":{"id":530,"nodeType":"StructuredDocumentation","src":"6307:277:4","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":568,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6598:26:4","nodeType":"FunctionDefinition","parameters":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":532,"mutability":"mutable","name":"target","nameLocation":"6642:6:4","nodeType":"VariableDeclaration","scope":568,"src":"6634:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":531,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":534,"mutability":"mutable","name":"success","nameLocation":"6663:7:4","nodeType":"VariableDeclaration","scope":568,"src":"6658:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":533,"name":"bool","nodeType":"ElementaryTypeName","src":"6658:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":536,"mutability":"mutable","name":"returndata","nameLocation":"6693:10:4","nodeType":"VariableDeclaration","scope":568,"src":"6680:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":535,"name":"bytes","nodeType":"ElementaryTypeName","src":"6680:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":538,"mutability":"mutable","name":"errorMessage","nameLocation":"6727:12:4","nodeType":"VariableDeclaration","scope":568,"src":"6713:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":537,"name":"string","nodeType":"ElementaryTypeName","src":"6713:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6624:121:4"},"returnParameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":568,"src":"6769:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":540,"name":"bytes","nodeType":"ElementaryTypeName","src":"6769:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6768:14:4"},"scope":613,"src":"6589:628:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":591,"nodeType":"Block","src":"7598:135:4","statements":[{"condition":{"id":580,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"7612:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":589,"nodeType":"Block","src":"7669:58:4","statements":[{"expression":{"arguments":[{"id":585,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"7691:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":586,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"7703:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":584,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"7683:7:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7683:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":588,"nodeType":"ExpressionStatement","src":"7683:33:4"}]},"id":590,"nodeType":"IfStatement","src":"7608:119:4","trueBody":{"id":583,"nodeType":"Block","src":"7621:42:4","statements":[{"expression":{"id":581,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"7642:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":579,"id":582,"nodeType":"Return","src":"7635:17:4"}]}}]},"documentation":{"id":569,"nodeType":"StructuredDocumentation","src":"7223:210:4","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":592,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7447:16:4","nodeType":"FunctionDefinition","parameters":{"id":576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":571,"mutability":"mutable","name":"success","nameLocation":"7478:7:4","nodeType":"VariableDeclaration","scope":592,"src":"7473:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":570,"name":"bool","nodeType":"ElementaryTypeName","src":"7473:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":573,"mutability":"mutable","name":"returndata","nameLocation":"7508:10:4","nodeType":"VariableDeclaration","scope":592,"src":"7495:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":572,"name":"bytes","nodeType":"ElementaryTypeName","src":"7495:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":575,"mutability":"mutable","name":"errorMessage","nameLocation":"7542:12:4","nodeType":"VariableDeclaration","scope":592,"src":"7528:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":574,"name":"string","nodeType":"ElementaryTypeName","src":"7528:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7463:97:4"},"returnParameters":{"id":579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":578,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":592,"src":"7584:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":577,"name":"bytes","nodeType":"ElementaryTypeName","src":"7584:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7583:14:4"},"scope":613,"src":"7438:295:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":611,"nodeType":"Block","src":"7822:457:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":599,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"7898:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7909:6:4","memberName":"length","nodeType":"MemberAccess","src":"7898:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7918:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7898:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":609,"nodeType":"Block","src":"8228:45:4","statements":[{"expression":{"arguments":[{"id":606,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"8249:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":605,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8242:6:4","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8242:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":608,"nodeType":"ExpressionStatement","src":"8242:20:4"}]},"id":610,"nodeType":"IfStatement","src":"7894:379:4","trueBody":{"id":604,"nodeType":"Block","src":"7921:301:4","statements":[{"AST":{"nodeType":"YulBlock","src":"8079:133:4","statements":[{"nodeType":"YulVariableDeclaration","src":"8097:40:4","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8126:10:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8120:5:4"},"nodeType":"YulFunctionCall","src":"8120:17:4"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8101:15:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8165:2:4","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8169:10:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:4"},"nodeType":"YulFunctionCall","src":"8161:19:4"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8182:15:4"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8154:6:4"},"nodeType":"YulFunctionCall","src":"8154:44:4"},"nodeType":"YulExpressionStatement","src":"8154:44:4"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":594,"isOffset":false,"isSlot":false,"src":"8126:10:4","valueSize":1},{"declaration":594,"isOffset":false,"isSlot":false,"src":"8169:10:4","valueSize":1}],"id":603,"nodeType":"InlineAssembly","src":"8070:142:4"}]}}]},"id":612,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7748:7:4","nodeType":"FunctionDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"returndata","nameLocation":"7769:10:4","nodeType":"VariableDeclaration","scope":612,"src":"7756:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":593,"name":"bytes","nodeType":"ElementaryTypeName","src":"7756:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":596,"mutability":"mutable","name":"errorMessage","nameLocation":"7795:12:4","nodeType":"VariableDeclaration","scope":612,"src":"7781:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":595,"name":"string","nodeType":"ElementaryTypeName","src":"7781:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7755:53:4"},"returnParameters":{"id":598,"nodeType":"ParameterList","parameters":[],"src":"7822:0:4"},"scope":613,"src":"7739:540:4","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":614,"src":"194:8087:4","usedErrors":[]}],"src":"101:8181:4"},"id":4},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[613],"ContextUpgradeable":[655],"Initializable":[168]},"id":656,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":615,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":616,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":656,"sourceUnit":169,"src":"110:42:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":618,"name":"Initializable","nameLocations":["691:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"691:13:5"},"id":619,"nodeType":"InheritanceSpecifier","src":"691:13:5"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"154:496:5","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":655,"linearizedBaseContracts":[655,168],"name":"ContextUpgradeable","nameLocation":"669:18:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":624,"nodeType":"Block","src":"763:7:5","statements":[]},"id":625,"implemented":true,"kind":"function","modifiers":[{"id":622,"kind":"modifierInvocation","modifierName":{"id":621,"name":"onlyInitializing","nameLocations":["746:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":113,"src":"746:16:5"},"nodeType":"ModifierInvocation","src":"746:16:5"}],"name":"__Context_init","nameLocation":"720:14:5","nodeType":"FunctionDefinition","parameters":{"id":620,"nodeType":"ParameterList","parameters":[],"src":"734:2:5"},"returnParameters":{"id":623,"nodeType":"ParameterList","parameters":[],"src":"763:0:5"},"scope":655,"src":"711:59:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":630,"nodeType":"Block","src":"838:7:5","statements":[]},"id":631,"implemented":true,"kind":"function","modifiers":[{"id":628,"kind":"modifierInvocation","modifierName":{"id":627,"name":"onlyInitializing","nameLocations":["821:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":113,"src":"821:16:5"},"nodeType":"ModifierInvocation","src":"821:16:5"}],"name":"__Context_init_unchained","nameLocation":"785:24:5","nodeType":"FunctionDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[],"src":"809:2:5"},"returnParameters":{"id":629,"nodeType":"ParameterList","parameters":[],"src":"838:0:5"},"scope":655,"src":"776:69:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":639,"nodeType":"Block","src":"912:34:5","statements":[{"expression":{"expression":{"id":636,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:5","memberName":"sender","nodeType":"MemberAccess","src":"929:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":635,"id":638,"nodeType":"Return","src":"922:17:5"}]},"id":640,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:5","nodeType":"FunctionDefinition","parameters":{"id":632,"nodeType":"ParameterList","parameters":[],"src":"869:2:5"},"returnParameters":{"id":635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":640,"src":"903:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":633,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:5"},"scope":655,"src":"850:96:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":648,"nodeType":"Block","src":"1019:32:5","statements":[{"expression":{"expression":{"id":645,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:5","memberName":"data","nodeType":"MemberAccess","src":"1036:8:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":644,"id":647,"nodeType":"Return","src":"1029:15:5"}]},"id":649,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:5","nodeType":"FunctionDefinition","parameters":{"id":641,"nodeType":"ParameterList","parameters":[],"src":"969:2:5"},"returnParameters":{"id":644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":649,"src":"1003:14:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":642,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:5"},"scope":655,"src":"952:99:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":650,"nodeType":"StructuredDocumentation","src":"1057:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":654,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:5","nodeType":"VariableDeclaration","scope":655,"src":"1316:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":651,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":653,"length":{"hexValue":"3530","id":652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:5","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":656,"src":"651:693:5","usedErrors":[]}],"src":"86:1259:5"},"id":5},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[613],"ERC165Upgradeable":[699],"IERC165Upgradeable":[711],"Initializable":[168]},"id":700,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":657,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":658,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":700,"sourceUnit":712,"src":"124:34:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":659,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":700,"sourceUnit":169,"src":"159:45:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":661,"name":"Initializable","nameLocations":["822:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"822:13:6"},"id":662,"nodeType":"InheritanceSpecifier","src":"822:13:6"},{"baseName":{"id":663,"name":"IERC165Upgradeable","nameLocations":["837:18:6"],"nodeType":"IdentifierPath","referencedDeclaration":711,"src":"837:18:6"},"id":664,"nodeType":"InheritanceSpecifier","src":"837:18:6"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":660,"nodeType":"StructuredDocumentation","src":"206:576:6","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":699,"linearizedBaseContracts":[699,711,168],"name":"ERC165Upgradeable","nameLocation":"801:17:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":669,"nodeType":"Block","src":"913:7:6","statements":[]},"id":670,"implemented":true,"kind":"function","modifiers":[{"id":667,"kind":"modifierInvocation","modifierName":{"id":666,"name":"onlyInitializing","nameLocations":["896:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":113,"src":"896:16:6"},"nodeType":"ModifierInvocation","src":"896:16:6"}],"name":"__ERC165_init","nameLocation":"871:13:6","nodeType":"FunctionDefinition","parameters":{"id":665,"nodeType":"ParameterList","parameters":[],"src":"884:2:6"},"returnParameters":{"id":668,"nodeType":"ParameterList","parameters":[],"src":"913:0:6"},"scope":699,"src":"862:58:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":675,"nodeType":"Block","src":"987:7:6","statements":[]},"id":676,"implemented":true,"kind":"function","modifiers":[{"id":673,"kind":"modifierInvocation","modifierName":{"id":672,"name":"onlyInitializing","nameLocations":["970:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":113,"src":"970:16:6"},"nodeType":"ModifierInvocation","src":"970:16:6"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:6","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"958:2:6"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[],"src":"987:0:6"},"scope":699,"src":"926:68:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[710],"body":{"id":692,"nodeType":"Block","src":"1151:75:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":685,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"1168:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":687,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"1188:18:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$711_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$711_$","typeString":"type(contract IERC165Upgradeable)"}],"id":686,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$711","typeString":"type(contract IERC165Upgradeable)"}},"id":689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1208:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":684,"id":691,"nodeType":"Return","src":"1161:58:6"}]},"documentation":{"id":677,"nodeType":"StructuredDocumentation","src":"999:56:6","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":693,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:6","nodeType":"FunctionDefinition","overrides":{"id":681,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:6"},"parameters":{"id":680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:6","nodeType":"VariableDeclaration","scope":693,"src":"1087:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":678,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:6"},"returnParameters":{"id":684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":683,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":693,"src":"1145:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":682,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:6"},"scope":699,"src":"1060:166:6","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":694,"nodeType":"StructuredDocumentation","src":"1232:254:6","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":698,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:6","nodeType":"VariableDeclaration","scope":699,"src":"1491:25:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":695,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":697,"length":{"hexValue":"3530","id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:6","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":700,"src":"783:736:6","usedErrors":[]}],"src":"99:1421:6"},"id":6},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[711]},"id":712,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":701,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":702,"nodeType":"StructuredDocumentation","src":"125:279:7","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":711,"linearizedBaseContracts":[711],"name":"IERC165Upgradeable","nameLocation":"415:18:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":703,"nodeType":"StructuredDocumentation","src":"440:340:7","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":710,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:7","nodeType":"FunctionDefinition","parameters":{"id":706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":705,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:7","nodeType":"VariableDeclaration","scope":710,"src":"812:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":704,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:7"},"returnParameters":{"id":709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":710,"src":"855:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":707,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:7"},"scope":711,"src":"785:76:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":712,"src":"405:458:7","usedErrors":[]}],"src":"100:764:7"},"id":7},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1041]},"id":1042,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":713,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":714,"nodeType":"StructuredDocumentation","src":"126:67:8","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1041,"linearizedBaseContracts":[1041],"name":"Address","nameLocation":"202:7:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":728,"nodeType":"Block","src":"1241:254:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":722,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"1465:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:8","memberName":"code","nodeType":"MemberAccess","src":"1465:12:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:8","memberName":"length","nodeType":"MemberAccess","src":"1465:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":721,"id":727,"nodeType":"Return","src":"1458:30:8"}]},"documentation":{"id":715,"nodeType":"StructuredDocumentation","src":"216:954:8","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":729,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:8","nodeType":"FunctionDefinition","parameters":{"id":718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":717,"mutability":"mutable","name":"account","nameLocation":"1203:7:8","nodeType":"VariableDeclaration","scope":729,"src":"1195:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":716,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:8"},"returnParameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":729,"src":"1235:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":719,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:8"},"scope":1041,"src":"1175:320:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":762,"nodeType":"Block","src":"2483:241:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":740,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1041","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1041","typeString":"library Address"}],"id":739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":738,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:8","typeDescriptions":{}}},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:8","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":743,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"2526:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":737,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":747,"nodeType":"ExpressionStatement","src":"2493:73:8"},{"assignments":[749,null],"declarations":[{"constant":false,"id":749,"mutability":"mutable","name":"success","nameLocation":"2583:7:8","nodeType":"VariableDeclaration","scope":762,"src":"2578:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":748,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":756,"initialValue":{"arguments":[{"hexValue":"","id":754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":750,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"2596:9:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:8","memberName":"call","nodeType":"MemberAccess","src":"2596:14:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":752,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"2618:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:8"},{"expression":{"arguments":[{"id":758,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"2647:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":757,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":761,"nodeType":"ExpressionStatement","src":"2639:78:8"}]},"documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"1501:906:8","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":763,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:8","nodeType":"FunctionDefinition","parameters":{"id":735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:8","nodeType":"VariableDeclaration","scope":763,"src":"2431:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":731,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":734,"mutability":"mutable","name":"amount","nameLocation":"2466:6:8","nodeType":"VariableDeclaration","scope":763,"src":"2458:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":733,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:8"},"returnParameters":{"id":736,"nodeType":"ParameterList","parameters":[],"src":"2483:0:8"},"scope":1041,"src":"2412:312:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":780,"nodeType":"Block","src":"3555:96:8","statements":[{"expression":{"arguments":[{"id":774,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"3594:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":775,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"3602:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":773,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[821,865],"referencedDeclaration":865,"src":"3572:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":772,"id":779,"nodeType":"Return","src":"3565:79:8"}]},"documentation":{"id":764,"nodeType":"StructuredDocumentation","src":"2730:731:8","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":781,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:8","nodeType":"FunctionDefinition","parameters":{"id":769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":766,"mutability":"mutable","name":"target","nameLocation":"3496:6:8","nodeType":"VariableDeclaration","scope":781,"src":"3488:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":765,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":768,"mutability":"mutable","name":"data","nameLocation":"3517:4:8","nodeType":"VariableDeclaration","scope":781,"src":"3504:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":767,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:8"},"returnParameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":781,"src":"3541:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":770,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:8"},"scope":1041,"src":"3466:185:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":800,"nodeType":"Block","src":"4020:76:8","statements":[{"expression":{"arguments":[{"id":794,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"4059:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":795,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"4067:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":797,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"4076:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":793,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[821,865],"referencedDeclaration":865,"src":"4037:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":792,"id":799,"nodeType":"Return","src":"4030:59:8"}]},"documentation":{"id":782,"nodeType":"StructuredDocumentation","src":"3657:211:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":801,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:8","nodeType":"FunctionDefinition","parameters":{"id":789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":784,"mutability":"mutable","name":"target","nameLocation":"3912:6:8","nodeType":"VariableDeclaration","scope":801,"src":"3904:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":783,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":786,"mutability":"mutable","name":"data","nameLocation":"3941:4:8","nodeType":"VariableDeclaration","scope":801,"src":"3928:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":785,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":788,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:8","nodeType":"VariableDeclaration","scope":801,"src":"3955:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":787,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:8"},"returnParameters":{"id":792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":801,"src":"4006:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":790,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:8"},"scope":1041,"src":"3873:223:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":820,"nodeType":"Block","src":"4601:111:8","statements":[{"expression":{"arguments":[{"id":814,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"4640:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":815,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"4648:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":816,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"4654:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":813,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[821,865],"referencedDeclaration":865,"src":"4618:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":812,"id":819,"nodeType":"Return","src":"4611:94:8"}]},"documentation":{"id":802,"nodeType":"StructuredDocumentation","src":"4102:351:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":821,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:8","nodeType":"FunctionDefinition","parameters":{"id":809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":804,"mutability":"mutable","name":"target","nameLocation":"4506:6:8","nodeType":"VariableDeclaration","scope":821,"src":"4498:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":803,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":806,"mutability":"mutable","name":"data","nameLocation":"4535:4:8","nodeType":"VariableDeclaration","scope":821,"src":"4522:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":805,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":808,"mutability":"mutable","name":"value","nameLocation":"4557:5:8","nodeType":"VariableDeclaration","scope":821,"src":"4549:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":807,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:8"},"returnParameters":{"id":812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":821,"src":"4587:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":810,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:8"},"scope":1041,"src":"4458:254:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":864,"nodeType":"Block","src":"5139:267:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":838,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1041","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1041","typeString":"library Address"}],"id":837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":836,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:8","typeDescriptions":{}}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:8","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":841,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"5182:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":835,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":845,"nodeType":"ExpressionStatement","src":"5149:81:8"},{"assignments":[847,849],"declarations":[{"constant":false,"id":847,"mutability":"mutable","name":"success","nameLocation":"5246:7:8","nodeType":"VariableDeclaration","scope":864,"src":"5241:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":846,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":849,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:8","nodeType":"VariableDeclaration","scope":864,"src":"5255:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":848,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":856,"initialValue":{"arguments":[{"id":854,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"5308:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":850,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"5282:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:8","memberName":"call","nodeType":"MemberAccess","src":"5282:11:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":852,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"5301:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:8"},{"expression":{"arguments":[{"id":858,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"5357:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":859,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"5365:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":860,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"5374:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":861,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"5386:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":857,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"5330:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":834,"id":863,"nodeType":"Return","src":"5323:76:8"}]},"documentation":{"id":822,"nodeType":"StructuredDocumentation","src":"4718:237:8","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":865,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:8","nodeType":"FunctionDefinition","parameters":{"id":831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":824,"mutability":"mutable","name":"target","nameLocation":"5008:6:8","nodeType":"VariableDeclaration","scope":865,"src":"5000:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":823,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":826,"mutability":"mutable","name":"data","nameLocation":"5037:4:8","nodeType":"VariableDeclaration","scope":865,"src":"5024:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":825,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":828,"mutability":"mutable","name":"value","nameLocation":"5059:5:8","nodeType":"VariableDeclaration","scope":865,"src":"5051:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":827,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:8","nodeType":"VariableDeclaration","scope":865,"src":"5074:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":829,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:8"},"returnParameters":{"id":834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":865,"src":"5125:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":832,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:8"},"scope":1041,"src":"4960:446:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":881,"nodeType":"Block","src":"5683:97:8","statements":[{"expression":{"arguments":[{"id":876,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"5719:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":877,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"5727:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":875,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[882,911],"referencedDeclaration":911,"src":"5700:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":874,"id":880,"nodeType":"Return","src":"5693:80:8"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"5412:166:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":882,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:8","nodeType":"FunctionDefinition","parameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"target","nameLocation":"5619:6:8","nodeType":"VariableDeclaration","scope":882,"src":"5611:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"data","nameLocation":"5640:4:8","nodeType":"VariableDeclaration","scope":882,"src":"5627:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":869,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:8"},"returnParameters":{"id":874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":882,"src":"5669:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":872,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:8"},"scope":1041,"src":"5583:197:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":910,"nodeType":"Block","src":"6122:168:8","statements":[{"assignments":[895,897],"declarations":[{"constant":false,"id":895,"mutability":"mutable","name":"success","nameLocation":"6138:7:8","nodeType":"VariableDeclaration","scope":910,"src":"6133:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":894,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":897,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:8","nodeType":"VariableDeclaration","scope":910,"src":"6147:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":896,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":902,"initialValue":{"arguments":[{"id":900,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"6192:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":898,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"6174:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:8","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:8","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:8"},{"expression":{"arguments":[{"id":904,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"6241:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":905,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"6249:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":906,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"6258:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":907,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"6270:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":903,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"6214:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":893,"id":909,"nodeType":"Return","src":"6207:76:8"}]},"documentation":{"id":883,"nodeType":"StructuredDocumentation","src":"5786:173:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":911,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:8","nodeType":"FunctionDefinition","parameters":{"id":890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":885,"mutability":"mutable","name":"target","nameLocation":"6009:6:8","nodeType":"VariableDeclaration","scope":911,"src":"6001:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":884,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":887,"mutability":"mutable","name":"data","nameLocation":"6038:4:8","nodeType":"VariableDeclaration","scope":911,"src":"6025:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":886,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":889,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:8","nodeType":"VariableDeclaration","scope":911,"src":"6052:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":888,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:8"},"returnParameters":{"id":893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":911,"src":"6108:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":891,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:8"},"scope":1041,"src":"5964:326:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":927,"nodeType":"Block","src":"6566:101:8","statements":[{"expression":{"arguments":[{"id":922,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"6604:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":923,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"6612:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":921,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[928,957],"referencedDeclaration":957,"src":"6583:20:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":920,"id":926,"nodeType":"Return","src":"6576:84:8"}]},"documentation":{"id":912,"nodeType":"StructuredDocumentation","src":"6296:168:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":928,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:8","nodeType":"FunctionDefinition","parameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":914,"mutability":"mutable","name":"target","nameLocation":"6507:6:8","nodeType":"VariableDeclaration","scope":928,"src":"6499:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":913,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":916,"mutability":"mutable","name":"data","nameLocation":"6528:4:8","nodeType":"VariableDeclaration","scope":928,"src":"6515:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":915,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:8"},"returnParameters":{"id":920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":928,"src":"6552:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":918,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:8"},"scope":1041,"src":"6469:198:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":956,"nodeType":"Block","src":"7008:170:8","statements":[{"assignments":[941,943],"declarations":[{"constant":false,"id":941,"mutability":"mutable","name":"success","nameLocation":"7024:7:8","nodeType":"VariableDeclaration","scope":956,"src":"7019:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":940,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":943,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:8","nodeType":"VariableDeclaration","scope":956,"src":"7033:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":942,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":948,"initialValue":{"arguments":[{"id":946,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"7080:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":944,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"7060:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:8","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:8","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:8"},{"expression":{"arguments":[{"id":950,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"7129:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":951,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"7137:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":952,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"7146:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":953,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"7158:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":949,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"7102:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":939,"id":955,"nodeType":"Return","src":"7095:76:8"}]},"documentation":{"id":929,"nodeType":"StructuredDocumentation","src":"6673:175:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":957,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:8","nodeType":"FunctionDefinition","parameters":{"id":936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":931,"mutability":"mutable","name":"target","nameLocation":"6900:6:8","nodeType":"VariableDeclaration","scope":957,"src":"6892:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":930,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":933,"mutability":"mutable","name":"data","nameLocation":"6929:4:8","nodeType":"VariableDeclaration","scope":957,"src":"6916:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":932,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":935,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:8","nodeType":"VariableDeclaration","scope":957,"src":"6943:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":934,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:8"},"returnParameters":{"id":939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":957,"src":"6994:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":937,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:8"},"scope":1041,"src":"6853:325:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":995,"nodeType":"Block","src":"7660:434:8","statements":[{"condition":{"id":971,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"7674:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":993,"nodeType":"Block","src":"8030:58:8","statements":[{"expression":{"arguments":[{"id":989,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"8052:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":990,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":966,"src":"8064:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":988,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"8044:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":992,"nodeType":"ExpressionStatement","src":"8044:33:8"}]},"id":994,"nodeType":"IfStatement","src":"7670:418:8","trueBody":{"id":987,"nodeType":"Block","src":"7683:341:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":972,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"7701:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:8","memberName":"length","nodeType":"MemberAccess","src":"7701:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":984,"nodeType":"IfStatement","src":"7697:286:8","trueBody":{"id":983,"nodeType":"Block","src":"7725:258:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":978,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"7927:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":977,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":729,"src":"7916:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":976,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":982,"nodeType":"ExpressionStatement","src":"7908:60:8"}]}},{"expression":{"id":985,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"8003:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":970,"id":986,"nodeType":"Return","src":"7996:17:8"}]}}]},"documentation":{"id":958,"nodeType":"StructuredDocumentation","src":"7184:277:8","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":996,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:8","nodeType":"FunctionDefinition","parameters":{"id":967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":960,"mutability":"mutable","name":"target","nameLocation":"7519:6:8","nodeType":"VariableDeclaration","scope":996,"src":"7511:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":959,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":962,"mutability":"mutable","name":"success","nameLocation":"7540:7:8","nodeType":"VariableDeclaration","scope":996,"src":"7535:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":961,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":964,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:8","nodeType":"VariableDeclaration","scope":996,"src":"7557:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":963,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":966,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:8","nodeType":"VariableDeclaration","scope":996,"src":"7590:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":965,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:8"},"returnParameters":{"id":970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":969,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":996,"src":"7646:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":968,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:8"},"scope":1041,"src":"7466:628:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1019,"nodeType":"Block","src":"8475:135:8","statements":[{"condition":{"id":1008,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"8489:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1017,"nodeType":"Block","src":"8546:58:8","statements":[{"expression":{"arguments":[{"id":1013,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"8568:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1014,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"8580:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1012,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"8560:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1016,"nodeType":"ExpressionStatement","src":"8560:33:8"}]},"id":1018,"nodeType":"IfStatement","src":"8485:119:8","trueBody":{"id":1011,"nodeType":"Block","src":"8498:42:8","statements":[{"expression":{"id":1009,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"8519:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1007,"id":1010,"nodeType":"Return","src":"8512:17:8"}]}}]},"documentation":{"id":997,"nodeType":"StructuredDocumentation","src":"8100:210:8","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1020,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:8","nodeType":"FunctionDefinition","parameters":{"id":1004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"success","nameLocation":"8355:7:8","nodeType":"VariableDeclaration","scope":1020,"src":"8350:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":998,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1001,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:8","nodeType":"VariableDeclaration","scope":1020,"src":"8372:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1000,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1003,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:8","nodeType":"VariableDeclaration","scope":1020,"src":"8405:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1002,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:8"},"returnParameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1020,"src":"8461:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1005,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:8"},"scope":1041,"src":"8315:295:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1039,"nodeType":"Block","src":"8699:457:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1027,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"8775:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:8","memberName":"length","nodeType":"MemberAccess","src":"8775:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1037,"nodeType":"Block","src":"9105:45:8","statements":[{"expression":{"arguments":[{"id":1034,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"9126:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1033,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1036,"nodeType":"ExpressionStatement","src":"9119:20:8"}]},"id":1038,"nodeType":"IfStatement","src":"8771:379:8","trueBody":{"id":1032,"nodeType":"Block","src":"8798:301:8","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:8","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:8","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:8"},"nodeType":"YulFunctionCall","src":"8997:17:8"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:8","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:8"},"nodeType":"YulFunctionCall","src":"9038:19:8"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:8"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:8"},"nodeType":"YulFunctionCall","src":"9031:44:8"},"nodeType":"YulExpressionStatement","src":"9031:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1022,"isOffset":false,"isSlot":false,"src":"9003:10:8","valueSize":1},{"declaration":1022,"isOffset":false,"isSlot":false,"src":"9046:10:8","valueSize":1}],"id":1031,"nodeType":"InlineAssembly","src":"8947:142:8"}]}}]},"id":1040,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:8","nodeType":"FunctionDefinition","parameters":{"id":1025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:8","nodeType":"VariableDeclaration","scope":1040,"src":"8633:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1021,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1024,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:8","nodeType":"VariableDeclaration","scope":1040,"src":"8658:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1023,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:8"},"returnParameters":{"id":1026,"nodeType":"ParameterList","parameters":[],"src":"8699:0:8"},"scope":1041,"src":"8616:540:8","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1042,"src":"194:8964:8","usedErrors":[]}],"src":"101:9058:8"},"id":8},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2081],"Strings":[1216]},"id":1217,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1043,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:9"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1044,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1217,"sourceUnit":2082,"src":"126:25:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1045,"nodeType":"StructuredDocumentation","src":"153:34:9","text":" @dev String operations."},"fullyImplemented":true,"id":1216,"linearizedBaseContracts":[1216],"name":"Strings","nameLocation":"196:7:9","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1048,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:9","nodeType":"VariableDeclaration","scope":1216,"src":"210:54:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1046,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:9","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1051,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:9","nodeType":"VariableDeclaration","scope":1216,"src":"270:43:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1049,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:9","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1098,"nodeType":"Block","src":"486:625:9","statements":[{"id":1097,"nodeType":"UncheckedBlock","src":"496:609:9","statements":[{"assignments":[1060],"declarations":[{"constant":false,"id":1060,"mutability":"mutable","name":"length","nameLocation":"528:6:9","nodeType":"VariableDeclaration","scope":1097,"src":"520:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1059,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1067,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1063,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"548:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1061,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"537:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2081_$","typeString":"type(library Math)"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:9","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1918,"src":"537:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:9"},{"assignments":[1069],"declarations":[{"constant":false,"id":1069,"mutability":"mutable","name":"buffer","nameLocation":"586:6:9","nodeType":"VariableDeclaration","scope":1097,"src":"572:20:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1068,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1074,"initialValue":{"arguments":[{"id":1072,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"606:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1071,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1070,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:9"},{"assignments":[1076],"declarations":[{"constant":false,"id":1076,"mutability":"mutable","name":"ptr","nameLocation":"635:3:9","nodeType":"VariableDeclaration","scope":1097,"src":"627:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1075,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1077,"nodeType":"VariableDeclarationStatement","src":"627:11:9"},{"AST":{"nodeType":"YulBlock","src":"708:67:9","statements":[{"nodeType":"YulAssignment","src":"726:35:9","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:9","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:9"},"nodeType":"YulFunctionCall","src":"745:15:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:9"},"nodeType":"YulFunctionCall","src":"733:28:9"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1069,"isOffset":false,"isSlot":false,"src":"737:6:9","valueSize":1},{"declaration":1060,"isOffset":false,"isSlot":false,"src":"753:6:9","valueSize":1},{"declaration":1076,"isOffset":false,"isSlot":false,"src":"726:3:9","valueSize":1}],"id":1078,"nodeType":"InlineAssembly","src":"699:76:9"},{"body":{"id":1093,"nodeType":"Block","src":"801:267:9","statements":[{"expression":{"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:9","subExpression":{"id":1080,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"819:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1082,"nodeType":"ExpressionStatement","src":"819:5:9"},{"AST":{"nodeType":"YulBlock","src":"902:84:9","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:9"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:9","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:9"},"nodeType":"YulFunctionCall","src":"942:14:9"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:9"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:9"},"nodeType":"YulFunctionCall","src":"937:30:9"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:9"},"nodeType":"YulFunctionCall","src":"924:44:9"},"nodeType":"YulExpressionStatement","src":"924:44:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1048,"isOffset":false,"isSlot":false,"src":"958:8:9","valueSize":1},{"declaration":1076,"isOffset":false,"isSlot":false,"src":"932:3:9","valueSize":1},{"declaration":1054,"isOffset":false,"isSlot":false,"src":"946:5:9","valueSize":1}],"id":1083,"nodeType":"InlineAssembly","src":"893:93:9"},{"expression":{"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1084,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"1003:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1087,"nodeType":"ExpressionStatement","src":"1003:11:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1088,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"1036:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1092,"nodeType":"IfStatement","src":"1032:21:9","trueBody":{"id":1091,"nodeType":"Break","src":"1048:5:9"}}]},"condition":{"hexValue":"74727565","id":1079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1094,"nodeType":"WhileStatement","src":"788:280:9"},{"expression":{"id":1095,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"1088:6:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1058,"id":1096,"nodeType":"Return","src":"1081:13:9"}]}]},"documentation":{"id":1052,"nodeType":"StructuredDocumentation","src":"320:90:9","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1099,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:9","nodeType":"FunctionDefinition","parameters":{"id":1055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1054,"mutability":"mutable","name":"value","nameLocation":"441:5:9","nodeType":"VariableDeclaration","scope":1099,"src":"433:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1053,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:9"},"returnParameters":{"id":1058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1057,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1099,"src":"471:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1056,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:9"},"scope":1216,"src":"415:696:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1118,"nodeType":"Block","src":"1290:100:9","statements":[{"id":1117,"nodeType":"UncheckedBlock","src":"1300:84:9","statements":[{"expression":{"arguments":[{"id":1108,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"1343:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1111,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"1362:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1109,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"1350:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2081_$","typeString":"type(library Math)"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:9","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2041,"src":"1350:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1107,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1119,1195,1215],"referencedDeclaration":1195,"src":"1331:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1106,"id":1116,"nodeType":"Return","src":"1324:49:9"}]}]},"documentation":{"id":1100,"nodeType":"StructuredDocumentation","src":"1117:94:9","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1119,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:9","nodeType":"FunctionDefinition","parameters":{"id":1103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1102,"mutability":"mutable","name":"value","nameLocation":"1245:5:9","nodeType":"VariableDeclaration","scope":1119,"src":"1237:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1101,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:9"},"returnParameters":{"id":1106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1119,"src":"1275:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1104,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:9"},"scope":1216,"src":"1216:174:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1194,"nodeType":"Block","src":"1603:347:9","statements":[{"assignments":[1130],"declarations":[{"constant":false,"id":1130,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:9","nodeType":"VariableDeclaration","scope":1194,"src":"1613:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1129,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1139,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1134,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"1649:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1131,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:9"},{"expression":{"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1140,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"1670:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1142,"indexExpression":{"hexValue":"30","id":1141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1145,"nodeType":"ExpressionStatement","src":"1670:15:9"},{"expression":{"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1146,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"1695:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1148,"indexExpression":{"hexValue":"31","id":1147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1151,"nodeType":"ExpressionStatement","src":"1695:15:9"},{"body":{"id":1180,"nodeType":"Block","src":"1765:83:9","statements":[{"expression":{"id":1174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1166,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"1779:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1168,"indexExpression":{"id":1167,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"1786:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1169,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"1791:8:9","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1173,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1170,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"1800:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:9","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1175,"nodeType":"ExpressionStatement","src":"1779:33:9"},{"expression":{"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"1826:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1179,"nodeType":"ExpressionStatement","src":"1826:11:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1160,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"1753:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1181,"initializationExpression":{"assignments":[1153],"declarations":[{"constant":false,"id":1153,"mutability":"mutable","name":"i","nameLocation":"1733:1:9","nodeType":"VariableDeclaration","scope":1181,"src":"1725:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1152,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1159,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1155,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"1741:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:9"},"loopExpression":{"expression":{"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:9","subExpression":{"id":1163,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"1762:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1165,"nodeType":"ExpressionStatement","src":"1760:3:9"},"nodeType":"ForStatement","src":"1720:128:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1183,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"1865:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1182,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1188,"nodeType":"ExpressionStatement","src":"1857:55:9"},{"expression":{"arguments":[{"id":1191,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"1936:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1189,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:9","typeDescriptions":{}}},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1128,"id":1193,"nodeType":"Return","src":"1922:21:9"}]},"documentation":{"id":1120,"nodeType":"StructuredDocumentation","src":"1396:112:9","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1195,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:9","nodeType":"FunctionDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1122,"mutability":"mutable","name":"value","nameLocation":"1542:5:9","nodeType":"VariableDeclaration","scope":1195,"src":"1534:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1121,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"length","nameLocation":"1557:6:9","nodeType":"VariableDeclaration","scope":1195,"src":"1549:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1123,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:9"},"returnParameters":{"id":1128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1195,"src":"1588:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1126,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:9"},"scope":1216,"src":"1513:437:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1214,"nodeType":"Block","src":"2175:76:9","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1208,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"2220:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1207,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1206,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:9","typeDescriptions":{}}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1204,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:9","typeDescriptions":{}}},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1211,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"2228:15:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1203,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1119,1195,1215],"referencedDeclaration":1195,"src":"2192:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1202,"id":1213,"nodeType":"Return","src":"2185:59:9"}]},"documentation":{"id":1196,"nodeType":"StructuredDocumentation","src":"1956:141:9","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1215,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:9","nodeType":"FunctionDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1198,"mutability":"mutable","name":"addr","nameLocation":"2131:4:9","nodeType":"VariableDeclaration","scope":1215,"src":"2123:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1197,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:9"},"returnParameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1215,"src":"2160:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1200,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:9"},"scope":1216,"src":"2102:149:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1217,"src":"188:2065:9","usedErrors":[]}],"src":"101:2153:9"},"id":9},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2081]},"id":2082,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1218,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1219,"nodeType":"StructuredDocumentation","src":"128:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2081,"linearizedBaseContracts":[2081],"name":"Math","nameLocation":"210:4:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":1223,"members":[{"id":1220,"name":"Down","nameLocation":"245:4:10","nodeType":"EnumValue","src":"245:4:10"},{"id":1221,"name":"Up","nameLocation":"287:2:10","nodeType":"EnumValue","src":"287:2:10"},{"id":1222,"name":"Zero","nameLocation":"318:4:10","nodeType":"EnumValue","src":"318:4:10"}],"name":"Rounding","nameLocation":"226:8:10","nodeType":"EnumDefinition","src":"221:122:10"},{"body":{"id":1240,"nodeType":"Block","src":"480:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1233,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"497:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1234,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"501:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1237,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"509:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:10","trueExpression":{"id":1236,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"505:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1232,"id":1239,"nodeType":"Return","src":"490:20:10"}]},"documentation":{"id":1224,"nodeType":"StructuredDocumentation","src":"349:59:10","text":" @dev Returns the largest of two numbers."},"id":1241,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:10","nodeType":"FunctionDefinition","parameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1226,"mutability":"mutable","name":"a","nameLocation":"434:1:10","nodeType":"VariableDeclaration","scope":1241,"src":"426:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1225,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1228,"mutability":"mutable","name":"b","nameLocation":"445:1:10","nodeType":"VariableDeclaration","scope":1241,"src":"437:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1227,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:10"},"returnParameters":{"id":1232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1241,"src":"471:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1230,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:10"},"scope":2081,"src":"413:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1258,"nodeType":"Block","src":"655:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1251,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"672:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1252,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"676:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1255,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"684:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:10","trueExpression":{"id":1254,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"680:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1250,"id":1257,"nodeType":"Return","src":"665:20:10"}]},"documentation":{"id":1242,"nodeType":"StructuredDocumentation","src":"523:60:10","text":" @dev Returns the smallest of two numbers."},"id":1259,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:10","nodeType":"FunctionDefinition","parameters":{"id":1247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"a","nameLocation":"609:1:10","nodeType":"VariableDeclaration","scope":1259,"src":"601:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1243,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1246,"mutability":"mutable","name":"b","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":1259,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1245,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:10"},"returnParameters":{"id":1250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1259,"src":"646:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1248,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:10"},"scope":2081,"src":"588:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1281,"nodeType":"Block","src":"876:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1269,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"931:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1270,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"935:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1272,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1273,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"941:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1274,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"945:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1276,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1268,"id":1280,"nodeType":"Return","src":"923:28:10"}]},"documentation":{"id":1260,"nodeType":"StructuredDocumentation","src":"698:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1282,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:10","nodeType":"FunctionDefinition","parameters":{"id":1265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1262,"mutability":"mutable","name":"a","nameLocation":"830:1:10","nodeType":"VariableDeclaration","scope":1282,"src":"822:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1261,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1264,"mutability":"mutable","name":"b","nameLocation":"841:1:10","nodeType":"VariableDeclaration","scope":1282,"src":"833:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1263,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:10"},"returnParameters":{"id":1268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1282,"src":"867:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1266,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:10"},"scope":2081,"src":"805:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1306,"nodeType":"Block","src":"1228:123:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1292,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"1316:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1296,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"1330:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1299,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1300,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"1339:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:10","trueExpression":{"hexValue":"30","id":1295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1291,"id":1305,"nodeType":"Return","src":"1309:35:10"}]},"documentation":{"id":1283,"nodeType":"StructuredDocumentation","src":"964:188:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1307,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:10","nodeType":"FunctionDefinition","parameters":{"id":1288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"a","nameLocation":"1182:1:10","nodeType":"VariableDeclaration","scope":1307,"src":"1174:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1284,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1287,"mutability":"mutable","name":"b","nameLocation":"1193:1:10","nodeType":"VariableDeclaration","scope":1307,"src":"1185:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1286,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:10"},"returnParameters":{"id":1291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1307,"src":"1219:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1289,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:10"},"scope":2081,"src":"1157:194:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1428,"nodeType":"Block","src":"1795:3797:10","statements":[{"id":1427,"nodeType":"UncheckedBlock","src":"1805:3781:10","statements":[{"assignments":[1320],"declarations":[{"constant":false,"id":1320,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:10","nodeType":"VariableDeclaration","scope":1427,"src":"2126:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1319,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1321,"nodeType":"VariableDeclarationStatement","src":"2126:13:10"},{"assignments":[1323],"declarations":[{"constant":false,"id":1323,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:10","nodeType":"VariableDeclaration","scope":1427,"src":"2198:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1322,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1324,"nodeType":"VariableDeclarationStatement","src":"2198:13:10"},{"AST":{"nodeType":"YulBlock","src":"2278:157:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:10","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:10"},"nodeType":"YulFunctionCall","src":"2319:6:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:10"},"nodeType":"YulFunctionCall","src":"2306:20:10"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:10","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:10"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:10"},"nodeType":"YulFunctionCall","src":"2352:9:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:10"}]},{"nodeType":"YulAssignment","src":"2378:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:10"},"nodeType":"YulFunctionCall","src":"2391:14:10"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:10"},"nodeType":"YulFunctionCall","src":"2407:13:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:10"},"nodeType":"YulFunctionCall","src":"2387:34:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:10"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1320,"isOffset":false,"isSlot":false,"src":"2343:5:10","valueSize":1},{"declaration":1320,"isOffset":false,"isSlot":false,"src":"2399:5:10","valueSize":1},{"declaration":1320,"isOffset":false,"isSlot":false,"src":"2414:5:10","valueSize":1},{"declaration":1323,"isOffset":false,"isSlot":false,"src":"2378:5:10","valueSize":1},{"declaration":1310,"isOffset":false,"isSlot":false,"src":"2313:1:10","valueSize":1},{"declaration":1310,"isOffset":false,"isSlot":false,"src":"2356:1:10","valueSize":1},{"declaration":1312,"isOffset":false,"isSlot":false,"src":"2316:1:10","valueSize":1},{"declaration":1312,"isOffset":false,"isSlot":false,"src":"2359:1:10","valueSize":1}],"id":1325,"nodeType":"InlineAssembly","src":"2269:166:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1326,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"2516:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1334,"nodeType":"IfStatement","src":"2512:75:10","trueBody":{"id":1333,"nodeType":"Block","src":"2528:59:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1329,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"2553:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1330,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"2561:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1318,"id":1332,"nodeType":"Return","src":"2546:26:10"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1336,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"2697:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1337,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"2711:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1335,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1340,"nodeType":"ExpressionStatement","src":"2689:28:10"},{"assignments":[1342],"declarations":[{"constant":false,"id":1342,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:10","nodeType":"VariableDeclaration","scope":1427,"src":"2973:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1341,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1343,"nodeType":"VariableDeclarationStatement","src":"2973:17:10"},{"AST":{"nodeType":"YulBlock","src":"3013:291:10","statements":[{"nodeType":"YulAssignment","src":"3082:38:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:10"},"nodeType":"YulFunctionCall","src":"3095:25:10"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:10"}]},{"nodeType":"YulAssignment","src":"3202:41:10","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:10"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:10"},"nodeType":"YulFunctionCall","src":"3222:20:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:10"},"nodeType":"YulFunctionCall","src":"3211:32:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:10"}]},{"nodeType":"YulAssignment","src":"3260:30:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:10"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:10"},"nodeType":"YulFunctionCall","src":"3269:21:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:10"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1314,"isOffset":false,"isSlot":false,"src":"3108:11:10","valueSize":1},{"declaration":1320,"isOffset":false,"isSlot":false,"src":"3236:5:10","valueSize":1},{"declaration":1320,"isOffset":false,"isSlot":false,"src":"3260:5:10","valueSize":1},{"declaration":1320,"isOffset":false,"isSlot":false,"src":"3273:5:10","valueSize":1},{"declaration":1323,"isOffset":false,"isSlot":false,"src":"3202:5:10","valueSize":1},{"declaration":1323,"isOffset":false,"isSlot":false,"src":"3215:5:10","valueSize":1},{"declaration":1342,"isOffset":false,"isSlot":false,"src":"3082:9:10","valueSize":1},{"declaration":1342,"isOffset":false,"isSlot":false,"src":"3225:9:10","valueSize":1},{"declaration":1342,"isOffset":false,"isSlot":false,"src":"3280:9:10","valueSize":1},{"declaration":1310,"isOffset":false,"isSlot":false,"src":"3102:1:10","valueSize":1},{"declaration":1312,"isOffset":false,"isSlot":false,"src":"3105:1:10","valueSize":1}],"id":1344,"nodeType":"InlineAssembly","src":"3004:300:10"},{"assignments":[1346],"declarations":[{"constant":false,"id":1346,"mutability":"mutable","name":"twos","nameLocation":"3619:4:10","nodeType":"VariableDeclaration","scope":1427,"src":"3611:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1345,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1354,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1347,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"3626:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:10","subExpression":{"id":1348,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"3642:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1352,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:10"},{"AST":{"nodeType":"YulBlock","src":"3681:362:10","statements":[{"nodeType":"YulAssignment","src":"3746:37:10","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:10"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:10"},"nodeType":"YulFunctionCall","src":"3761:22:10"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:10"}]},{"nodeType":"YulAssignment","src":"3850:25:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:10"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:10"},"nodeType":"YulFunctionCall","src":"3859:16:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:10"}]},{"nodeType":"YulAssignment","src":"3990:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:10","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:10"},"nodeType":"YulFunctionCall","src":"4006:12:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:10"},"nodeType":"YulFunctionCall","src":"4002:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:10"},"nodeType":"YulFunctionCall","src":"3998:31:10"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:10"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1314,"isOffset":false,"isSlot":false,"src":"3746:11:10","valueSize":1},{"declaration":1314,"isOffset":false,"isSlot":false,"src":"3765:11:10","valueSize":1},{"declaration":1320,"isOffset":false,"isSlot":false,"src":"3850:5:10","valueSize":1},{"declaration":1320,"isOffset":false,"isSlot":false,"src":"3863:5:10","valueSize":1},{"declaration":1346,"isOffset":false,"isSlot":false,"src":"3778:4:10","valueSize":1},{"declaration":1346,"isOffset":false,"isSlot":false,"src":"3870:4:10","valueSize":1},{"declaration":1346,"isOffset":false,"isSlot":false,"src":"3990:4:10","valueSize":1},{"declaration":1346,"isOffset":false,"isSlot":false,"src":"4013:4:10","valueSize":1},{"declaration":1346,"isOffset":false,"isSlot":false,"src":"4020:4:10","valueSize":1}],"id":1355,"nodeType":"InlineAssembly","src":"3672:371:10"},{"expression":{"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1356,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"4109:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1357,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"4118:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1358,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"4126:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1361,"nodeType":"ExpressionStatement","src":"4109:21:10"},{"assignments":[1363],"declarations":[{"constant":false,"id":1363,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:10","nodeType":"VariableDeclaration","scope":1427,"src":"4448:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1362,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1370,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1365,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"4471:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1367,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:10"},{"expression":{"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1371,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4704:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1373,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"4719:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1374,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4733:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1378,"nodeType":"ExpressionStatement","src":"4704:36:10"},{"expression":{"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1379,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4773:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1381,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"4788:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1382,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4802:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1386,"nodeType":"ExpressionStatement","src":"4773:36:10"},{"expression":{"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1387,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4843:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1389,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"4858:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1390,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4872:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1394,"nodeType":"ExpressionStatement","src":"4843:36:10"},{"expression":{"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1395,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4913:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1397,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"4928:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1398,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4942:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1402,"nodeType":"ExpressionStatement","src":"4913:36:10"},{"expression":{"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1403,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4983:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1405,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"4998:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1406,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"5012:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1410,"nodeType":"ExpressionStatement","src":"4983:36:10"},{"expression":{"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1411,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"5054:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1413,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"5069:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1414,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"5083:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1418,"nodeType":"ExpressionStatement","src":"5054:36:10"},{"expression":{"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1419,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"5524:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1420,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"5533:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1421,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"5541:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1424,"nodeType":"ExpressionStatement","src":"5524:24:10"},{"expression":{"id":1425,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"5569:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1318,"id":1426,"nodeType":"Return","src":"5562:13:10"}]}]},"documentation":{"id":1308,"nodeType":"StructuredDocumentation","src":"1357:305:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1429,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:10","nodeType":"FunctionDefinition","parameters":{"id":1315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1310,"mutability":"mutable","name":"x","nameLocation":"1700:1:10","nodeType":"VariableDeclaration","scope":1429,"src":"1692:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1309,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1312,"mutability":"mutable","name":"y","nameLocation":"1719:1:10","nodeType":"VariableDeclaration","scope":1429,"src":"1711:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1311,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1314,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:10","nodeType":"VariableDeclaration","scope":1429,"src":"1730:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1313,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:10"},"returnParameters":{"id":1318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1317,"mutability":"mutable","name":"result","nameLocation":"1787:6:10","nodeType":"VariableDeclaration","scope":1429,"src":"1779:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1316,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:10"},"scope":2081,"src":"1667:3925:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1472,"nodeType":"Block","src":"5872:189:10","statements":[{"assignments":[1445],"declarations":[{"constant":false,"id":1445,"mutability":"mutable","name":"result","nameLocation":"5890:6:10","nodeType":"VariableDeclaration","scope":1472,"src":"5882:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1444,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1451,"initialValue":{"arguments":[{"id":1447,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"5906:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1448,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"5909:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1449,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"5912:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1446,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1429,1473],"referencedDeclaration":1429,"src":"5899:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1452,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"5938:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1453,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"5950:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1223_$","typeString":"type(enum Math.Rounding)"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1221,"src":"5950:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"src":"5938:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1457,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"5972:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1458,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"5975:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1459,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"5978:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1456,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1469,"nodeType":"IfStatement","src":"5934:98:10","trueBody":{"id":1468,"nodeType":"Block","src":"5996:36:10","statements":[{"expression":{"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1464,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"6010:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1467,"nodeType":"ExpressionStatement","src":"6010:11:10"}]}},{"expression":{"id":1470,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"6048:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1443,"id":1471,"nodeType":"Return","src":"6041:13:10"}]},"documentation":{"id":1430,"nodeType":"StructuredDocumentation","src":"5598:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1473,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:10","nodeType":"FunctionDefinition","parameters":{"id":1440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"mutability":"mutable","name":"x","nameLocation":"5757:1:10","nodeType":"VariableDeclaration","scope":1473,"src":"5749:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1431,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1434,"mutability":"mutable","name":"y","nameLocation":"5776:1:10","nodeType":"VariableDeclaration","scope":1473,"src":"5768:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1433,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1436,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:10","nodeType":"VariableDeclaration","scope":1473,"src":"5787:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1435,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1439,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:10","nodeType":"VariableDeclaration","scope":1473,"src":"5816:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"},"typeName":{"id":1438,"nodeType":"UserDefinedTypeName","pathNode":{"id":1437,"name":"Rounding","nameLocations":["5816:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1223,"src":"5816:8:10"},"referencedDeclaration":1223,"src":"5816:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:10"},"returnParameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1473,"src":"5863:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1441,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:10"},"scope":2081,"src":"5724:337:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1584,"nodeType":"Block","src":"6337:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1481,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"6351:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1487,"nodeType":"IfStatement","src":"6347:45:10","trueBody":{"id":1486,"nodeType":"Block","src":"6359:33:10","statements":[{"expression":{"hexValue":"30","id":1484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1480,"id":1485,"nodeType":"Return","src":"6373:8:10"}]}},{"assignments":[1489],"declarations":[{"constant":false,"id":1489,"mutability":"mutable","name":"result","nameLocation":"7079:6:10","nodeType":"VariableDeclaration","scope":1584,"src":"7071:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1488,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1498,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1492,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"7099:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1491,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1753,1789],"referencedDeclaration":1753,"src":"7094:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1496,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:10"},{"id":1583,"nodeType":"UncheckedBlock","src":"7508:408:10","statements":[{"expression":{"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1499,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7532:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1500,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7542:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1501,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"7551:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1502,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7555:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1505,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1509,"nodeType":"ExpressionStatement","src":"7532:35:10"},{"expression":{"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1510,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7581:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1511,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7591:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1512,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"7600:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1513,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7604:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1516,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1520,"nodeType":"ExpressionStatement","src":"7581:35:10"},{"expression":{"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1521,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7630:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1522,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7640:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1523,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"7649:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1524,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7653:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1527,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1531,"nodeType":"ExpressionStatement","src":"7630:35:10"},{"expression":{"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1532,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7679:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1533,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7689:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1534,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"7698:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1535,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7702:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1538,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1542,"nodeType":"ExpressionStatement","src":"7679:35:10"},{"expression":{"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1543,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7728:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1544,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7738:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1545,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"7747:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1546,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7751:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1549,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1553,"nodeType":"ExpressionStatement","src":"7728:35:10"},{"expression":{"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1554,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7777:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1555,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7787:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1556,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"7796:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1557,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7800:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1560,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1564,"nodeType":"ExpressionStatement","src":"7777:35:10"},{"expression":{"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1565,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7826:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1566,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7836:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1567,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"7845:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1568,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7849:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1571,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1575,"nodeType":"ExpressionStatement","src":"7826:35:10"},{"expression":{"arguments":[{"id":1577,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7886:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1578,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"7894:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1579,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7898:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1576,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"7882:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1480,"id":1582,"nodeType":"Return","src":"7875:30:10"}]}]},"documentation":{"id":1474,"nodeType":"StructuredDocumentation","src":"6067:208:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":1585,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:10","nodeType":"FunctionDefinition","parameters":{"id":1477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1476,"mutability":"mutable","name":"a","nameLocation":"6302:1:10","nodeType":"VariableDeclaration","scope":1585,"src":"6294:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1475,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:10"},"returnParameters":{"id":1480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1479,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1585,"src":"6328:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1478,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:10"},"scope":2081,"src":"6280:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1620,"nodeType":"Block","src":"8098:161:10","statements":[{"id":1619,"nodeType":"UncheckedBlock","src":"8108:145:10","statements":[{"assignments":[1597],"declarations":[{"constant":false,"id":1597,"mutability":"mutable","name":"result","nameLocation":"8140:6:10","nodeType":"VariableDeclaration","scope":1619,"src":"8132:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1596,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1601,"initialValue":{"arguments":[{"id":1599,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"8154:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1598,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[1585,1621],"referencedDeclaration":1585,"src":"8149:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1602,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"8177:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1603,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"8187:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1604,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"8199:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1223_$","typeString":"type(enum Math.Rounding)"}},"id":1605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1221,"src":"8199:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"src":"8187:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1607,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"8214:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1608,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"8223:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1610,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"8232:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:10","trueExpression":{"hexValue":"31","id":1613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1616,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1595,"id":1618,"nodeType":"Return","src":"8170:72:10"}]}]},"documentation":{"id":1586,"nodeType":"StructuredDocumentation","src":"7928:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":1621,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:10","nodeType":"FunctionDefinition","parameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1588,"mutability":"mutable","name":"a","nameLocation":"8044:1:10","nodeType":"VariableDeclaration","scope":1621,"src":"8036:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1587,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1591,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:10","nodeType":"VariableDeclaration","scope":1621,"src":"8047:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"},"typeName":{"id":1590,"nodeType":"UserDefinedTypeName","pathNode":{"id":1589,"name":"Rounding","nameLocations":["8047:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1223,"src":"8047:8:10"},"referencedDeclaration":1223,"src":"8047:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:10"},"returnParameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1621,"src":"8089:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1593,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:10"},"scope":2081,"src":"8022:237:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1752,"nodeType":"Block","src":"8444:922:10","statements":[{"assignments":[1630],"declarations":[{"constant":false,"id":1630,"mutability":"mutable","name":"result","nameLocation":"8462:6:10","nodeType":"VariableDeclaration","scope":1752,"src":"8454:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1629,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1632,"initialValue":{"hexValue":"30","id":1631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:10"},{"id":1749,"nodeType":"UncheckedBlock","src":"8482:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1633,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"8510:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1647,"nodeType":"IfStatement","src":"8506:99:10","trueBody":{"id":1646,"nodeType":"Block","src":"8528:77:10","statements":[{"expression":{"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1638,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"8546:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1641,"nodeType":"ExpressionStatement","src":"8546:13:10"},{"expression":{"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1642,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"8577:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1645,"nodeType":"ExpressionStatement","src":"8577:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1648,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"8622:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1662,"nodeType":"IfStatement","src":"8618:96:10","trueBody":{"id":1661,"nodeType":"Block","src":"8639:75:10","statements":[{"expression":{"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1653,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"8657:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1656,"nodeType":"ExpressionStatement","src":"8657:12:10"},{"expression":{"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1657,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"8687:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1660,"nodeType":"ExpressionStatement","src":"8687:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1663,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"8731:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1677,"nodeType":"IfStatement","src":"8727:96:10","trueBody":{"id":1676,"nodeType":"Block","src":"8748:75:10","statements":[{"expression":{"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1668,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"8766:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1671,"nodeType":"ExpressionStatement","src":"8766:12:10"},{"expression":{"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1672,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"8796:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1675,"nodeType":"ExpressionStatement","src":"8796:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1678,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"8840:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1692,"nodeType":"IfStatement","src":"8836:96:10","trueBody":{"id":1691,"nodeType":"Block","src":"8857:75:10","statements":[{"expression":{"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1683,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"8875:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1686,"nodeType":"ExpressionStatement","src":"8875:12:10"},{"expression":{"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1687,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"8905:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1690,"nodeType":"ExpressionStatement","src":"8905:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"8949:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1707,"nodeType":"IfStatement","src":"8945:93:10","trueBody":{"id":1706,"nodeType":"Block","src":"8965:73:10","statements":[{"expression":{"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1698,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"8983:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1701,"nodeType":"ExpressionStatement","src":"8983:11:10"},{"expression":{"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1702,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"9012:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1705,"nodeType":"ExpressionStatement","src":"9012:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1708,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"9055:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1722,"nodeType":"IfStatement","src":"9051:93:10","trueBody":{"id":1721,"nodeType":"Block","src":"9071:73:10","statements":[{"expression":{"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"9089:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1716,"nodeType":"ExpressionStatement","src":"9089:11:10"},{"expression":{"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1717,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"9118:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1720,"nodeType":"ExpressionStatement","src":"9118:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"9161:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1737,"nodeType":"IfStatement","src":"9157:93:10","trueBody":{"id":1736,"nodeType":"Block","src":"9177:73:10","statements":[{"expression":{"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"9195:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1731,"nodeType":"ExpressionStatement","src":"9195:11:10"},{"expression":{"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1732,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"9224:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1735,"nodeType":"ExpressionStatement","src":"9224:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1738,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"9267:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1748,"nodeType":"IfStatement","src":"9263:64:10","trueBody":{"id":1747,"nodeType":"Block","src":"9283:44:10","statements":[{"expression":{"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1743,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"9301:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1746,"nodeType":"ExpressionStatement","src":"9301:11:10"}]}}]},{"expression":{"id":1750,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"9353:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1628,"id":1751,"nodeType":"Return","src":"9346:13:10"}]},"documentation":{"id":1622,"nodeType":"StructuredDocumentation","src":"8265:113:10","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1753,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:10","nodeType":"FunctionDefinition","parameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1624,"mutability":"mutable","name":"value","nameLocation":"8405:5:10","nodeType":"VariableDeclaration","scope":1753,"src":"8397:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:10"},"returnParameters":{"id":1628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1753,"src":"8435:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1626,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:10"},"scope":2081,"src":"8383:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1788,"nodeType":"Block","src":"9599:165:10","statements":[{"id":1787,"nodeType":"UncheckedBlock","src":"9609:149:10","statements":[{"assignments":[1765],"declarations":[{"constant":false,"id":1765,"mutability":"mutable","name":"result","nameLocation":"9641:6:10","nodeType":"VariableDeclaration","scope":1787,"src":"9633:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1764,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1769,"initialValue":{"arguments":[{"id":1767,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"9655:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1766,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1753,1789],"referencedDeclaration":1753,"src":"9650:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1770,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"9682:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1771,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"9692:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1772,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"9704:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1223_$","typeString":"type(enum Math.Rounding)"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1221,"src":"9704:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"src":"9692:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1776,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"9724:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1778,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"9733:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:10","trueExpression":{"hexValue":"31","id":1781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1784,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1763,"id":1786,"nodeType":"Return","src":"9675:72:10"}]}]},"documentation":{"id":1754,"nodeType":"StructuredDocumentation","src":"9372:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1789,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:10","nodeType":"FunctionDefinition","parameters":{"id":1760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1756,"mutability":"mutable","name":"value","nameLocation":"9541:5:10","nodeType":"VariableDeclaration","scope":1789,"src":"9533:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1755,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1759,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:10","nodeType":"VariableDeclaration","scope":1789,"src":"9548:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"},"typeName":{"id":1758,"nodeType":"UserDefinedTypeName","pathNode":{"id":1757,"name":"Rounding","nameLocations":["9548:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1223,"src":"9548:8:10"},"referencedDeclaration":1223,"src":"9548:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:10"},"returnParameters":{"id":1763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1789,"src":"9590:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1761,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:10"},"scope":2081,"src":"9519:245:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1917,"nodeType":"Block","src":"9951:828:10","statements":[{"assignments":[1798],"declarations":[{"constant":false,"id":1798,"mutability":"mutable","name":"result","nameLocation":"9969:6:10","nodeType":"VariableDeclaration","scope":1917,"src":"9961:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1797,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1800,"initialValue":{"hexValue":"30","id":1799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:10"},{"id":1914,"nodeType":"UncheckedBlock","src":"9989:761:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1801,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10017:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1804,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1817,"nodeType":"IfStatement","src":"10013:99:10","trueBody":{"id":1816,"nodeType":"Block","src":"10034:78:10","statements":[{"expression":{"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1806,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10052:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1811,"nodeType":"ExpressionStatement","src":"10052:15:10"},{"expression":{"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1812,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"10085:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1815,"nodeType":"ExpressionStatement","src":"10085:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1818,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10129:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1821,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1834,"nodeType":"IfStatement","src":"10125:99:10","trueBody":{"id":1833,"nodeType":"Block","src":"10146:78:10","statements":[{"expression":{"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1823,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10164:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1828,"nodeType":"ExpressionStatement","src":"10164:15:10"},{"expression":{"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1829,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"10197:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1832,"nodeType":"ExpressionStatement","src":"10197:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1835,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10241:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1851,"nodeType":"IfStatement","src":"10237:99:10","trueBody":{"id":1850,"nodeType":"Block","src":"10258:78:10","statements":[{"expression":{"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1840,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10276:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1845,"nodeType":"ExpressionStatement","src":"10276:15:10"},{"expression":{"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1846,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"10309:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1849,"nodeType":"ExpressionStatement","src":"10309:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1852,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10353:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1868,"nodeType":"IfStatement","src":"10349:96:10","trueBody":{"id":1867,"nodeType":"Block","src":"10369:76:10","statements":[{"expression":{"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1857,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10387:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1862,"nodeType":"ExpressionStatement","src":"10387:14:10"},{"expression":{"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1863,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"10419:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1866,"nodeType":"ExpressionStatement","src":"10419:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10462:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1885,"nodeType":"IfStatement","src":"10458:96:10","trueBody":{"id":1884,"nodeType":"Block","src":"10478:76:10","statements":[{"expression":{"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1874,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10496:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1877,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1879,"nodeType":"ExpressionStatement","src":"10496:14:10"},{"expression":{"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1880,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"10528:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1883,"nodeType":"ExpressionStatement","src":"10528:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1886,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10571:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1902,"nodeType":"IfStatement","src":"10567:96:10","trueBody":{"id":1901,"nodeType":"Block","src":"10587:76:10","statements":[{"expression":{"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1891,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10605:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1896,"nodeType":"ExpressionStatement","src":"10605:14:10"},{"expression":{"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1897,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"10637:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1900,"nodeType":"ExpressionStatement","src":"10637:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1903,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"10680:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1906,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1913,"nodeType":"IfStatement","src":"10676:64:10","trueBody":{"id":1912,"nodeType":"Block","src":"10696:44:10","statements":[{"expression":{"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1908,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"10714:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1911,"nodeType":"ExpressionStatement","src":"10714:11:10"}]}}]},{"expression":{"id":1915,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"10766:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1796,"id":1916,"nodeType":"Return","src":"10759:13:10"}]},"documentation":{"id":1790,"nodeType":"StructuredDocumentation","src":"9770:114:10","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1918,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:10","nodeType":"FunctionDefinition","parameters":{"id":1793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1792,"mutability":"mutable","name":"value","nameLocation":"9912:5:10","nodeType":"VariableDeclaration","scope":1918,"src":"9904:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1791,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:10"},"returnParameters":{"id":1796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1918,"src":"9942:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1794,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:10"},"scope":2081,"src":"9889:890:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1953,"nodeType":"Block","src":"11014:165:10","statements":[{"id":1952,"nodeType":"UncheckedBlock","src":"11024:149:10","statements":[{"assignments":[1930],"declarations":[{"constant":false,"id":1930,"mutability":"mutable","name":"result","nameLocation":"11056:6:10","nodeType":"VariableDeclaration","scope":1952,"src":"11048:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1929,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1934,"initialValue":{"arguments":[{"id":1932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"11071:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1931,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1918,1954],"referencedDeclaration":1918,"src":"11065:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1935,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"11098:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"},"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1936,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"11108:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1937,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"11120:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1223_$","typeString":"type(enum Math.Rounding)"}},"id":1938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1221,"src":"11120:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"src":"11108:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1941,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"11139:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1943,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"11148:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:10","trueExpression":{"hexValue":"31","id":1946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1949,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1928,"id":1951,"nodeType":"Return","src":"11091:71:10"}]}]},"documentation":{"id":1919,"nodeType":"StructuredDocumentation","src":"10785:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1954,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:10","nodeType":"FunctionDefinition","parameters":{"id":1925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1921,"mutability":"mutable","name":"value","nameLocation":"10956:5:10","nodeType":"VariableDeclaration","scope":1954,"src":"10948:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1920,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1924,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:10","nodeType":"VariableDeclaration","scope":1954,"src":"10963:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"},"typeName":{"id":1923,"nodeType":"UserDefinedTypeName","pathNode":{"id":1922,"name":"Rounding","nameLocations":["10963:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1223,"src":"10963:8:10"},"referencedDeclaration":1223,"src":"10963:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:10"},"returnParameters":{"id":1928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1927,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1954,"src":"11005:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1926,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:10"},"scope":2081,"src":"10933:246:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2040,"nodeType":"Block","src":"11493:600:10","statements":[{"assignments":[1963],"declarations":[{"constant":false,"id":1963,"mutability":"mutable","name":"result","nameLocation":"11511:6:10","nodeType":"VariableDeclaration","scope":2040,"src":"11503:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1962,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1965,"initialValue":{"hexValue":"30","id":1964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:10"},{"id":2037,"nodeType":"UncheckedBlock","src":"11531:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1966,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"11559:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1980,"nodeType":"IfStatement","src":"11555:98:10","trueBody":{"id":1979,"nodeType":"Block","src":"11577:76:10","statements":[{"expression":{"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1971,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"11595:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1974,"nodeType":"ExpressionStatement","src":"11595:13:10"},{"expression":{"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1975,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"11626:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1978,"nodeType":"ExpressionStatement","src":"11626:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1981,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"11670:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1995,"nodeType":"IfStatement","src":"11666:95:10","trueBody":{"id":1994,"nodeType":"Block","src":"11687:74:10","statements":[{"expression":{"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1986,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"11705:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1989,"nodeType":"ExpressionStatement","src":"11705:12:10"},{"expression":{"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1990,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"11735:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1993,"nodeType":"ExpressionStatement","src":"11735:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1996,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"11778:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2010,"nodeType":"IfStatement","src":"11774:95:10","trueBody":{"id":2009,"nodeType":"Block","src":"11795:74:10","statements":[{"expression":{"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2001,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"11813:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2004,"nodeType":"ExpressionStatement","src":"11813:12:10"},{"expression":{"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2005,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"11843:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2008,"nodeType":"ExpressionStatement","src":"11843:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"11886:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2025,"nodeType":"IfStatement","src":"11882:95:10","trueBody":{"id":2024,"nodeType":"Block","src":"11903:74:10","statements":[{"expression":{"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2016,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"11921:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2019,"nodeType":"ExpressionStatement","src":"11921:12:10"},{"expression":{"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2020,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"11951:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2023,"nodeType":"ExpressionStatement","src":"11951:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2026,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"11994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2036,"nodeType":"IfStatement","src":"11990:64:10","trueBody":{"id":2035,"nodeType":"Block","src":"12010:44:10","statements":[{"expression":{"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2031,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"12028:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2034,"nodeType":"ExpressionStatement","src":"12028:11:10"}]}}]},{"expression":{"id":2038,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"12080:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1961,"id":2039,"nodeType":"Return","src":"12073:13:10"}]},"documentation":{"id":1955,"nodeType":"StructuredDocumentation","src":"11185:240:10","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2041,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:10","nodeType":"FunctionDefinition","parameters":{"id":1958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1957,"mutability":"mutable","name":"value","nameLocation":"11454:5:10","nodeType":"VariableDeclaration","scope":2041,"src":"11446:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1956,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:10"},"returnParameters":{"id":1961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2041,"src":"11484:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1959,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:10"},"scope":2081,"src":"11430:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2079,"nodeType":"Block","src":"12329:173:10","statements":[{"id":2078,"nodeType":"UncheckedBlock","src":"12339:157:10","statements":[{"assignments":[2053],"declarations":[{"constant":false,"id":2053,"mutability":"mutable","name":"result","nameLocation":"12371:6:10","nodeType":"VariableDeclaration","scope":2078,"src":"12363:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2052,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2057,"initialValue":{"arguments":[{"id":2055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"12387:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2054,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2041,2080],"referencedDeclaration":2041,"src":"12380:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2058,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"12414:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2059,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"12424:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2060,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"12436:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1223_$","typeString":"type(enum Math.Rounding)"}},"id":2061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1221,"src":"12436:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"src":"12424:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2064,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"12457:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2067,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2069,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"12471:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:10","trueExpression":{"hexValue":"31","id":2072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2075,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2051,"id":2077,"nodeType":"Return","src":"12407:78:10"}]}]},"documentation":{"id":2042,"nodeType":"StructuredDocumentation","src":"12099:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2080,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:10","nodeType":"FunctionDefinition","parameters":{"id":2048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2044,"mutability":"mutable","name":"value","nameLocation":"12271:5:10","nodeType":"VariableDeclaration","scope":2080,"src":"12263:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2043,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2047,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:10","nodeType":"VariableDeclaration","scope":2080,"src":"12278:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"},"typeName":{"id":2046,"nodeType":"UserDefinedTypeName","pathNode":{"id":2045,"name":"Rounding","nameLocations":["12278:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1223,"src":"12278:8:10"},"referencedDeclaration":1223,"src":"12278:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1223","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:10"},"returnParameters":{"id":2051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2050,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2080,"src":"12320:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2049,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:10"},"scope":2081,"src":"12247:255:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2082,"src":"202:12302:10","usedErrors":[]}],"src":"103:12402:10"},"id":10},"contracts/ERC721rUpgradeable.sol":{"ast":{"absolutePath":"contracts/ERC721rUpgradeable.sol","exportedSymbols":{"Address":[1041],"AddressUpgradeable":[613],"ContextUpgradeable":[655],"ERC165Upgradeable":[699],"ERC721rUpgradeable":[3154],"IERC165Upgradeable":[711],"IERC721MetadataUpgradeable":[329],"IERC721ReceiverUpgradeable":[186],"IERC721Upgradeable":[302],"Initializable":[168],"Math":[2081],"Strings":[1216]},"id":3155,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2083,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol","id":2084,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3155,"sourceUnit":303,"src":"58:81:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol","id":2085,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3155,"sourceUnit":187,"src":"140:89:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol","id":2086,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3155,"sourceUnit":330,"src":"230:100:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":2087,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3155,"sourceUnit":1042,"src":"331:51:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","id":2088,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3155,"sourceUnit":656,"src":"383:74:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":2089,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3155,"sourceUnit":1217,"src":"458:51:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","id":2090,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3155,"sourceUnit":700,"src":"510:87:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2092,"name":"ContextUpgradeable","nameLocations":["853:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":655,"src":"853:18:11"},"id":2093,"nodeType":"InheritanceSpecifier","src":"853:18:11"},{"baseName":{"id":2094,"name":"ERC165Upgradeable","nameLocations":["873:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":699,"src":"873:17:11"},"id":2095,"nodeType":"InheritanceSpecifier","src":"873:17:11"},{"baseName":{"id":2096,"name":"IERC721Upgradeable","nameLocations":["892:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":302,"src":"892:18:11"},"id":2097,"nodeType":"InheritanceSpecifier","src":"892:18:11"},{"baseName":{"id":2098,"name":"IERC721MetadataUpgradeable","nameLocations":["912:26:11"],"nodeType":"IdentifierPath","referencedDeclaration":329,"src":"912:26:11"},"id":2099,"nodeType":"InheritanceSpecifier","src":"912:26:11"}],"canonicalName":"ERC721rUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2091,"nodeType":"StructuredDocumentation","src":"599:222:11","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension. This does random batch minting."},"fullyImplemented":true,"id":3154,"linearizedBaseContracts":[3154,329,302,699,711,655,168],"name":"ERC721rUpgradeable","nameLocation":"831:18:11","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2102,"libraryName":{"id":2100,"name":"Address","nameLocations":["951:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":1041,"src":"951:7:11"},"nodeType":"UsingForDirective","src":"945:26:11","typeName":{"id":2101,"name":"address","nodeType":"ElementaryTypeName","src":"963:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":2105,"libraryName":{"id":2103,"name":"Strings","nameLocations":["982:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":1216,"src":"982:7:11"},"nodeType":"UsingForDirective","src":"976:26:11","typeName":{"id":2104,"name":"uint256","nodeType":"ElementaryTypeName","src":"994:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":2107,"mutability":"mutable","name":"_name","nameLocation":"1041:5:11","nodeType":"VariableDeclaration","scope":3154,"src":"1026:20:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2106,"name":"string","nodeType":"ElementaryTypeName","src":"1026:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2109,"mutability":"mutable","name":"_symbol","nameLocation":"1088:7:11","nodeType":"VariableDeclaration","scope":3154,"src":"1073:22:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2108,"name":"string","nodeType":"ElementaryTypeName","src":"1073:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2113,"mutability":"mutable","name":"_availableTokens","nameLocation":"1136:16:11","nodeType":"VariableDeclaration","scope":3154,"src":"1106:46:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2112,"keyType":{"id":2110,"name":"uint","nodeType":"ElementaryTypeName","src":"1114:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1106:21:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2111,"name":"uint","nodeType":"ElementaryTypeName","src":"1122:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":2115,"mutability":"mutable","name":"_numAvailableTokens","nameLocation":"1174:19:11","nodeType":"VariableDeclaration","scope":3154,"src":"1158:35:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"1158:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2117,"mutability":"mutable","name":"_maxSupply","nameLocation":"1215:10:11","nodeType":"VariableDeclaration","scope":3154,"src":"1199:26:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2116,"name":"uint256","nodeType":"ElementaryTypeName","src":"1199:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2121,"mutability":"mutable","name":"_owners","nameLocation":"1313:7:11","nodeType":"VariableDeclaration","scope":3154,"src":"1277:43:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2120,"keyType":{"id":2118,"name":"uint256","nodeType":"ElementaryTypeName","src":"1285:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1277:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":2119,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":2125,"mutability":"mutable","name":"_balances","nameLocation":"1407:9:11","nodeType":"VariableDeclaration","scope":3154,"src":"1371:45:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2124,"keyType":{"id":2122,"name":"address","nodeType":"ElementaryTypeName","src":"1379:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1371:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2123,"name":"uint256","nodeType":"ElementaryTypeName","src":"1390:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":2129,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1508:15:11","nodeType":"VariableDeclaration","scope":3154,"src":"1472:51:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2128,"keyType":{"id":2126,"name":"uint256","nodeType":"ElementaryTypeName","src":"1480:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1472:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":2127,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":2135,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1631:18:11","nodeType":"VariableDeclaration","scope":3154,"src":"1578:71:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":2134,"keyType":{"id":2130,"name":"address","nodeType":"ElementaryTypeName","src":"1586:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1578:44:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":2133,"keyType":{"id":2131,"name":"address","nodeType":"ElementaryTypeName","src":"1605:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1597:24:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":2132,"name":"bool","nodeType":"ElementaryTypeName","src":"1616:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":2153,"nodeType":"Block","src":"1880:69:11","statements":[{"expression":{"arguments":[{"id":2148,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"1915:5:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2149,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"1922:7:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2150,"name":"maxSupply_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"1931:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2147,"name":"__ERC721r_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"1890:24:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,string memory,uint256)"}},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1890:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2152,"nodeType":"ExpressionStatement","src":"1890:52:11"}]},"documentation":{"id":2136,"nodeType":"StructuredDocumentation","src":"1656:108:11","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":2154,"implemented":true,"kind":"function","modifiers":[{"id":2145,"kind":"modifierInvocation","modifierName":{"id":2144,"name":"onlyInitializing","nameLocations":["1863:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":113,"src":"1863:16:11"},"nodeType":"ModifierInvocation","src":"1863:16:11"}],"name":"__ERC721r_init","nameLocation":"1778:14:11","nodeType":"FunctionDefinition","parameters":{"id":2143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2138,"mutability":"mutable","name":"name_","nameLocation":"1807:5:11","nodeType":"VariableDeclaration","scope":2154,"src":"1793:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2137,"name":"string","nodeType":"ElementaryTypeName","src":"1793:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2140,"mutability":"mutable","name":"symbol_","nameLocation":"1828:7:11","nodeType":"VariableDeclaration","scope":2154,"src":"1814:21:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2139,"name":"string","nodeType":"ElementaryTypeName","src":"1814:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2142,"mutability":"mutable","name":"maxSupply_","nameLocation":"1842:10:11","nodeType":"VariableDeclaration","scope":2154,"src":"1837:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2141,"name":"uint","nodeType":"ElementaryTypeName","src":"1837:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1792:61:11"},"returnParameters":{"id":2146,"nodeType":"ParameterList","parameters":[],"src":"1880:0:11"},"scope":3154,"src":"1769:180:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2181,"nodeType":"Block","src":"2076:132:11","statements":[{"expression":{"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2165,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"2086:5:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2166,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"2094:5:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2086:13:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2168,"nodeType":"ExpressionStatement","src":"2086:13:11"},{"expression":{"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2169,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"2109:7:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2170,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2119:7:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2109:17:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2172,"nodeType":"ExpressionStatement","src":"2109:17:11"},{"expression":{"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2173,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"2136:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2174,"name":"maxSupply_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"2149:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2136:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2176,"nodeType":"ExpressionStatement","src":"2136:23:11"},{"expression":{"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2177,"name":"_numAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"2169:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2178,"name":"maxSupply_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"2191:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2169:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2180,"nodeType":"ExpressionStatement","src":"2169:32:11"}]},"id":2182,"implemented":true,"kind":"function","modifiers":[{"id":2163,"kind":"modifierInvocation","modifierName":{"id":2162,"name":"onlyInitializing","nameLocations":["2059:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":113,"src":"2059:16:11"},"nodeType":"ModifierInvocation","src":"2059:16:11"}],"name":"__ERC721r_init_unchained","nameLocation":"1964:24:11","nodeType":"FunctionDefinition","parameters":{"id":2161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2156,"mutability":"mutable","name":"name_","nameLocation":"2003:5:11","nodeType":"VariableDeclaration","scope":2182,"src":"1989:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2155,"name":"string","nodeType":"ElementaryTypeName","src":"1989:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2158,"mutability":"mutable","name":"symbol_","nameLocation":"2024:7:11","nodeType":"VariableDeclaration","scope":2182,"src":"2010:21:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2157,"name":"string","nodeType":"ElementaryTypeName","src":"2010:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2160,"mutability":"mutable","name":"maxSupply_","nameLocation":"2038:10:11","nodeType":"VariableDeclaration","scope":2182,"src":"2033:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2159,"name":"uint","nodeType":"ElementaryTypeName","src":"2033:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1988:61:11"},"returnParameters":{"id":2164,"nodeType":"ParameterList","parameters":[],"src":"2076:0:11"},"scope":3154,"src":"1955:253:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[693,710],"body":{"id":2212,"nodeType":"Block","src":"2405:214:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2193,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"2434:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2195,"name":"IERC721Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"2454:18:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Upgradeable_$302_$","typeString":"type(contract IERC721Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Upgradeable_$302_$","typeString":"type(contract IERC721Upgradeable)"}],"id":2194,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2449:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2449:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Upgradeable_$302","typeString":"type(contract IERC721Upgradeable)"}},"id":2197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2474:11:11","memberName":"interfaceId","nodeType":"MemberAccess","src":"2449:36:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2434:51:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2199,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"2501:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2201,"name":"IERC721MetadataUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"2521:26:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721MetadataUpgradeable_$329_$","typeString":"type(contract IERC721MetadataUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721MetadataUpgradeable_$329_$","typeString":"type(contract IERC721MetadataUpgradeable)"}],"id":2200,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2516:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2516:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721MetadataUpgradeable_$329","typeString":"type(contract IERC721MetadataUpgradeable)"}},"id":2203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2549:11:11","memberName":"interfaceId","nodeType":"MemberAccess","src":"2516:44:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2501:59:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2434:126:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2208,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"2600:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2206,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2576:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721rUpgradeable_$3154_$","typeString":"type(contract super ERC721rUpgradeable)"}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2582:17:11","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":693,"src":"2576:23:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2576:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2434:178:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2192,"id":2211,"nodeType":"Return","src":"2415:197:11"}]},"documentation":{"id":2183,"nodeType":"StructuredDocumentation","src":"2214:56:11","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2213,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2284:17:11","nodeType":"FunctionDefinition","overrides":{"id":2189,"nodeType":"OverrideSpecifier","overrides":[{"id":2187,"name":"ERC165Upgradeable","nameLocations":["2351:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":699,"src":"2351:17:11"},{"id":2188,"name":"IERC165Upgradeable","nameLocations":["2370:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":711,"src":"2370:18:11"}],"src":"2342:47:11"},"parameters":{"id":2186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2185,"mutability":"mutable","name":"interfaceId","nameLocation":"2309:11:11","nodeType":"VariableDeclaration","scope":2213,"src":"2302:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2184,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2302:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2301:20:11"},"returnParameters":{"id":2192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2191,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2213,"src":"2399:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2190,"name":"bool","nodeType":"ElementaryTypeName","src":"2399:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2398:6:11"},"scope":3154,"src":"2275:344:11","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2222,"nodeType":"Block","src":"2690:56:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2218,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"2707:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2219,"name":"_numAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"2720:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2707:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2217,"id":2221,"nodeType":"Return","src":"2700:39:11"}]},"functionSelector":"18160ddd","id":2223,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2638:11:11","nodeType":"FunctionDefinition","parameters":{"id":2214,"nodeType":"ParameterList","parameters":[],"src":"2649:2:11"},"returnParameters":{"id":2217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2223,"src":"2681:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2215,"name":"uint256","nodeType":"ElementaryTypeName","src":"2681:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2680:9:11"},"scope":3154,"src":"2629:117:11","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2230,"nodeType":"Block","src":"2815:34:11","statements":[{"expression":{"id":2228,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"2832:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2227,"id":2229,"nodeType":"Return","src":"2825:17:11"}]},"functionSelector":"d5abeb01","id":2231,"implemented":true,"kind":"function","modifiers":[],"name":"maxSupply","nameLocation":"2765:9:11","nodeType":"FunctionDefinition","parameters":{"id":2224,"nodeType":"ParameterList","parameters":[],"src":"2774:2:11"},"returnParameters":{"id":2227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2226,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2231,"src":"2806:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2225,"name":"uint256","nodeType":"ElementaryTypeName","src":"2806:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2805:9:11"},"scope":3154,"src":"2756:93:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[227],"body":{"id":2254,"nodeType":"Block","src":"2989:124:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2241,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"3007:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3024:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3016:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2242,"name":"address","nodeType":"ElementaryTypeName","src":"3016:7:11","typeDescriptions":{}}},"id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3016:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3007:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373","id":2247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3028:44:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba","typeString":"literal_string \"ERC721: balance query for the zero address\""},"value":"ERC721: balance query for the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba","typeString":"literal_string \"ERC721: balance query for the zero address\""}],"id":2240,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2999:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2999:74:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2249,"nodeType":"ExpressionStatement","src":"2999:74:11"},{"expression":{"baseExpression":{"id":2250,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"3090:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2252,"indexExpression":{"id":2251,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"3100:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3090:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2239,"id":2253,"nodeType":"Return","src":"3083:23:11"}]},"documentation":{"id":2232,"nodeType":"StructuredDocumentation","src":"2855:48:11","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":2255,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2917:9:11","nodeType":"FunctionDefinition","overrides":{"id":2236,"nodeType":"OverrideSpecifier","overrides":[],"src":"2962:8:11"},"parameters":{"id":2235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2234,"mutability":"mutable","name":"owner","nameLocation":"2935:5:11","nodeType":"VariableDeclaration","scope":2255,"src":"2927:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2233,"name":"address","nodeType":"ElementaryTypeName","src":"2927:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2926:15:11"},"returnParameters":{"id":2239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2238,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2255,"src":"2980:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2237,"name":"uint256","nodeType":"ElementaryTypeName","src":"2980:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2979:9:11"},"scope":3154,"src":"2908:205:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[235],"body":{"id":2272,"nodeType":"Block","src":"3251:156:11","statements":[{"assignments":[2265],"declarations":[{"constant":false,"id":2265,"mutability":"mutable","name":"owner","nameLocation":"3269:5:11","nodeType":"VariableDeclaration","scope":2272,"src":"3261:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2264,"name":"address","nodeType":"ElementaryTypeName","src":"3261:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2269,"initialValue":{"baseExpression":{"id":2266,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"3277:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2268,"indexExpression":{"id":2267,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"3285:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3277:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3261:32:11"},{"expression":{"id":2270,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"3395:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2263,"id":2271,"nodeType":"Return","src":"3388:12:11"}]},"documentation":{"id":2256,"nodeType":"StructuredDocumentation","src":"3119:46:11","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":2273,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"3179:7:11","nodeType":"FunctionDefinition","overrides":{"id":2260,"nodeType":"OverrideSpecifier","overrides":[],"src":"3224:8:11"},"parameters":{"id":2259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2258,"mutability":"mutable","name":"tokenId","nameLocation":"3195:7:11","nodeType":"VariableDeclaration","scope":2273,"src":"3187:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2257,"name":"uint256","nodeType":"ElementaryTypeName","src":"3187:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3186:17:11"},"returnParameters":{"id":2263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2262,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2273,"src":"3242:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2261,"name":"address","nodeType":"ElementaryTypeName","src":"3242:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3241:9:11"},"scope":3154,"src":"3170:237:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[314],"body":{"id":2282,"nodeType":"Block","src":"3538:29:11","statements":[{"expression":{"id":2280,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"3555:5:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2279,"id":2281,"nodeType":"Return","src":"3548:12:11"}]},"documentation":{"id":2274,"nodeType":"StructuredDocumentation","src":"3413:51:11","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":2283,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"3478:4:11","nodeType":"FunctionDefinition","overrides":{"id":2276,"nodeType":"OverrideSpecifier","overrides":[],"src":"3505:8:11"},"parameters":{"id":2275,"nodeType":"ParameterList","parameters":[],"src":"3482:2:11"},"returnParameters":{"id":2279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2283,"src":"3523:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2277,"name":"string","nodeType":"ElementaryTypeName","src":"3523:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3522:15:11"},"scope":3154,"src":"3469:98:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[320],"body":{"id":2292,"nodeType":"Block","src":"3702:31:11","statements":[{"expression":{"id":2290,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"3719:7:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2289,"id":2291,"nodeType":"Return","src":"3712:14:11"}]},"documentation":{"id":2284,"nodeType":"StructuredDocumentation","src":"3573:53:11","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":2293,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"3640:6:11","nodeType":"FunctionDefinition","overrides":{"id":2286,"nodeType":"OverrideSpecifier","overrides":[],"src":"3669:8:11"},"parameters":{"id":2285,"nodeType":"ParameterList","parameters":[],"src":"3646:2:11"},"returnParameters":{"id":2289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2288,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2293,"src":"3687:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2287,"name":"string","nodeType":"ElementaryTypeName","src":"3687:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3686:15:11"},"scope":3154,"src":"3631:102:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[328],"body":{"id":2334,"nodeType":"Block","src":"3887:241:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2304,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"3913:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2303,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"3905:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3905:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e","id":2306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3923:49:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb","typeString":"literal_string \"ERC721Metadata: URI query for nonexistent token\""},"value":"ERC721Metadata: URI query for nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb","typeString":"literal_string \"ERC721Metadata: URI query for nonexistent token\""}],"id":2302,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3897:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3897:76:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2308,"nodeType":"ExpressionStatement","src":"3897:76:11"},{"assignments":[2310],"declarations":[{"constant":false,"id":2310,"mutability":"mutable","name":"baseURI","nameLocation":"3998:7:11","nodeType":"VariableDeclaration","scope":2334,"src":"3984:21:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2309,"name":"string","nodeType":"ElementaryTypeName","src":"3984:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2313,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2311,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"4008:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4008:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"3984:34:11"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2316,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"4041:7:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4035:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2314,"name":"bytes","nodeType":"ElementaryTypeName","src":"4035:5:11","typeDescriptions":{}}},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4035:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4050:6:11","memberName":"length","nodeType":"MemberAccess","src":"4035:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4059:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4035:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4119:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4035:86:11","trueExpression":{"arguments":[{"arguments":[{"id":2325,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"4087:7:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2326,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"4096:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4104:8:11","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1099,"src":"4096:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4096:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2323,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4070:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4074:12:11","memberName":"encodePacked","nodeType":"MemberAccess","src":"4070:16:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4070:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4063:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2321,"name":"string","nodeType":"ElementaryTypeName","src":"4063:6:11","typeDescriptions":{}}},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4063:53:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2301,"id":2333,"nodeType":"Return","src":"4028:93:11"}]},"documentation":{"id":2294,"nodeType":"StructuredDocumentation","src":"3739:55:11","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":2335,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"3808:8:11","nodeType":"FunctionDefinition","overrides":{"id":2298,"nodeType":"OverrideSpecifier","overrides":[],"src":"3854:8:11"},"parameters":{"id":2297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"tokenId","nameLocation":"3825:7:11","nodeType":"VariableDeclaration","scope":2335,"src":"3817:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2295,"name":"uint256","nodeType":"ElementaryTypeName","src":"3817:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3816:17:11"},"returnParameters":{"id":2301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2335,"src":"3872:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2299,"name":"string","nodeType":"ElementaryTypeName","src":"3872:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3871:15:11"},"scope":3154,"src":"3799:329:11","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2343,"nodeType":"Block","src":"4436:26:11","statements":[{"expression":{"hexValue":"","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4453:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":2340,"id":2342,"nodeType":"Return","src":"4446:9:11"}]},"documentation":{"id":2336,"nodeType":"StructuredDocumentation","src":"4134:231:11","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":2344,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"4379:8:11","nodeType":"FunctionDefinition","parameters":{"id":2337,"nodeType":"ParameterList","parameters":[],"src":"4387:2:11"},"returnParameters":{"id":2340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2344,"src":"4421:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2338,"name":"string","nodeType":"ElementaryTypeName","src":"4421:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4420:15:11"},"scope":3154,"src":"4370:92:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[275],"body":{"id":2386,"nodeType":"Block","src":"4589:343:11","statements":[{"assignments":[2354],"declarations":[{"constant":false,"id":2354,"mutability":"mutable","name":"owner","nameLocation":"4607:5:11","nodeType":"VariableDeclaration","scope":2386,"src":"4599:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2353,"name":"address","nodeType":"ElementaryTypeName","src":"4599:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2359,"initialValue":{"arguments":[{"id":2357,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2349,"src":"4642:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2355,"name":"ERC721rUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"4615:18:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721rUpgradeable_$3154_$","typeString":"type(contract ERC721rUpgradeable)"}},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4634:7:11","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"4615:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4615:35:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4599:51:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2361,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"4668:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2362,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"4674:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4668:11:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4681:35:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":2360,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4660:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4660:57:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2366,"nodeType":"ExpressionStatement","src":"4660:57:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2368,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"4749:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2370,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"4765:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4749:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2373,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"4791:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2374,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"4798:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4798:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2372,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"4774:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4774:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4749:62:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c","id":2378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4825:58:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d","typeString":"literal_string \"ERC721: approve caller is not owner nor approved for all\""},"value":"ERC721: approve caller is not owner nor approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d","typeString":"literal_string \"ERC721: approve caller is not owner nor approved for all\""}],"id":2367,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4728:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4728:165:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2380,"nodeType":"ExpressionStatement","src":"4728:165:11"},{"expression":{"arguments":[{"id":2382,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"4913:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2383,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2349,"src":"4917:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2381,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3037,"src":"4904:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4904:21:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2385,"nodeType":"ExpressionStatement","src":"4904:21:11"}]},"documentation":{"id":2345,"nodeType":"StructuredDocumentation","src":"4468:46:11","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":2387,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4528:7:11","nodeType":"FunctionDefinition","overrides":{"id":2351,"nodeType":"OverrideSpecifier","overrides":[],"src":"4580:8:11"},"parameters":{"id":2350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2347,"mutability":"mutable","name":"to","nameLocation":"4544:2:11","nodeType":"VariableDeclaration","scope":2387,"src":"4536:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2346,"name":"address","nodeType":"ElementaryTypeName","src":"4536:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2349,"mutability":"mutable","name":"tokenId","nameLocation":"4556:7:11","nodeType":"VariableDeclaration","scope":2387,"src":"4548:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2348,"name":"uint256","nodeType":"ElementaryTypeName","src":"4548:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4535:29:11"},"returnParameters":{"id":2352,"nodeType":"ParameterList","parameters":[],"src":"4589:0:11"},"scope":3154,"src":"4519:413:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[291],"body":{"id":2407,"nodeType":"Block","src":"5078:132:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2398,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"5104:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2397,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"5096:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5096:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e","id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5114:46:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d","typeString":"literal_string \"ERC721: approved query for nonexistent token\""},"value":"ERC721: approved query for nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d","typeString":"literal_string \"ERC721: approved query for nonexistent token\""}],"id":2396,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5088:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5088:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2402,"nodeType":"ExpressionStatement","src":"5088:73:11"},{"expression":{"baseExpression":{"id":2403,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2129,"src":"5179:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2405,"indexExpression":{"id":2404,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"5195:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5179:24:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2395,"id":2406,"nodeType":"Return","src":"5172:31:11"}]},"documentation":{"id":2388,"nodeType":"StructuredDocumentation","src":"4938:50:11","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":2408,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"5002:11:11","nodeType":"FunctionDefinition","overrides":{"id":2392,"nodeType":"OverrideSpecifier","overrides":[],"src":"5051:8:11"},"parameters":{"id":2391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2390,"mutability":"mutable","name":"tokenId","nameLocation":"5022:7:11","nodeType":"VariableDeclaration","scope":2408,"src":"5014:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2389,"name":"uint256","nodeType":"ElementaryTypeName","src":"5014:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5013:17:11"},"returnParameters":{"id":2395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2394,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2408,"src":"5069:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2393,"name":"address","nodeType":"ElementaryTypeName","src":"5069:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5068:9:11"},"scope":3154,"src":"4993:217:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[283],"body":{"id":2424,"nodeType":"Block","src":"5361:69:11","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2418,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"5390:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5390:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2420,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"5404:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2421,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"5414:8:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2417,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"5371:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5371:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2423,"nodeType":"ExpressionStatement","src":"5371:52:11"}]},"documentation":{"id":2409,"nodeType":"StructuredDocumentation","src":"5216:56:11","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":2425,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"5286:17:11","nodeType":"FunctionDefinition","overrides":{"id":2415,"nodeType":"OverrideSpecifier","overrides":[],"src":"5352:8:11"},"parameters":{"id":2414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2411,"mutability":"mutable","name":"operator","nameLocation":"5312:8:11","nodeType":"VariableDeclaration","scope":2425,"src":"5304:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2410,"name":"address","nodeType":"ElementaryTypeName","src":"5304:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2413,"mutability":"mutable","name":"approved","nameLocation":"5327:8:11","nodeType":"VariableDeclaration","scope":2425,"src":"5322:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2412,"name":"bool","nodeType":"ElementaryTypeName","src":"5322:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5303:33:11"},"returnParameters":{"id":2416,"nodeType":"ParameterList","parameters":[],"src":"5361:0:11"},"scope":3154,"src":"5277:153:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[301],"body":{"id":2442,"nodeType":"Block","src":"5599:59:11","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2436,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"5616:18:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2438,"indexExpression":{"id":2437,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"5635:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5616:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2440,"indexExpression":{"id":2439,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"5642:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5616:35:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2435,"id":2441,"nodeType":"Return","src":"5609:42:11"}]},"documentation":{"id":2426,"nodeType":"StructuredDocumentation","src":"5436:55:11","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":2443,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5505:16:11","nodeType":"FunctionDefinition","overrides":{"id":2432,"nodeType":"OverrideSpecifier","overrides":[],"src":"5575:8:11"},"parameters":{"id":2431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2428,"mutability":"mutable","name":"owner","nameLocation":"5530:5:11","nodeType":"VariableDeclaration","scope":2443,"src":"5522:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2427,"name":"address","nodeType":"ElementaryTypeName","src":"5522:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2430,"mutability":"mutable","name":"operator","nameLocation":"5545:8:11","nodeType":"VariableDeclaration","scope":2443,"src":"5537:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2429,"name":"address","nodeType":"ElementaryTypeName","src":"5537:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5521:33:11"},"returnParameters":{"id":2435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2434,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2443,"src":"5593:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2433,"name":"bool","nodeType":"ElementaryTypeName","src":"5593:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5592:6:11"},"scope":3154,"src":"5496:162:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[267],"body":{"id":2469,"nodeType":"Block","src":"5839:211:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2456,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"5928:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5928:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2458,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"5942:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2455,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"5909:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5909:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564","id":2460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5952:51:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","typeString":"literal_string \"ERC721: transfer caller is not owner nor approved\""},"value":"ERC721: transfer caller is not owner nor approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","typeString":"literal_string \"ERC721: transfer caller is not owner nor approved\""}],"id":2454,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5901:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5901:103:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2462,"nodeType":"ExpressionStatement","src":"5901:103:11"},{"expression":{"arguments":[{"id":2464,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"6025:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2465,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"6031:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2466,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"6035:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2463,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"6015:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6015:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2468,"nodeType":"ExpressionStatement","src":"6015:28:11"}]},"documentation":{"id":2444,"nodeType":"StructuredDocumentation","src":"5664:51:11","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":2470,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5729:12:11","nodeType":"FunctionDefinition","overrides":{"id":2452,"nodeType":"OverrideSpecifier","overrides":[],"src":"5830:8:11"},"parameters":{"id":2451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2446,"mutability":"mutable","name":"from","nameLocation":"5759:4:11","nodeType":"VariableDeclaration","scope":2470,"src":"5751:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2445,"name":"address","nodeType":"ElementaryTypeName","src":"5751:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2448,"mutability":"mutable","name":"to","nameLocation":"5781:2:11","nodeType":"VariableDeclaration","scope":2470,"src":"5773:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2447,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2450,"mutability":"mutable","name":"tokenId","nameLocation":"5801:7:11","nodeType":"VariableDeclaration","scope":2470,"src":"5793:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2449,"name":"uint256","nodeType":"ElementaryTypeName","src":"5793:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5741:73:11"},"returnParameters":{"id":2453,"nodeType":"ParameterList","parameters":[],"src":"5839:0:11"},"scope":3154,"src":"5720:330:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[257],"body":{"id":2488,"nodeType":"Block","src":"6239:56:11","statements":[{"expression":{"arguments":[{"id":2482,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"6266:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2483,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"6272:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2484,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2477,"src":"6276:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6285:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2481,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[2489,2519],"referencedDeclaration":2519,"src":"6249:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6249:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2487,"nodeType":"ExpressionStatement","src":"6249:39:11"}]},"documentation":{"id":2471,"nodeType":"StructuredDocumentation","src":"6056:55:11","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":2489,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"6125:16:11","nodeType":"FunctionDefinition","overrides":{"id":2479,"nodeType":"OverrideSpecifier","overrides":[],"src":"6230:8:11"},"parameters":{"id":2478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"from","nameLocation":"6159:4:11","nodeType":"VariableDeclaration","scope":2489,"src":"6151:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2472,"name":"address","nodeType":"ElementaryTypeName","src":"6151:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2475,"mutability":"mutable","name":"to","nameLocation":"6181:2:11","nodeType":"VariableDeclaration","scope":2489,"src":"6173:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2474,"name":"address","nodeType":"ElementaryTypeName","src":"6173:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2477,"mutability":"mutable","name":"tokenId","nameLocation":"6201:7:11","nodeType":"VariableDeclaration","scope":2489,"src":"6193:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2476,"name":"uint256","nodeType":"ElementaryTypeName","src":"6193:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6141:73:11"},"returnParameters":{"id":2480,"nodeType":"ParameterList","parameters":[],"src":"6239:0:11"},"scope":3154,"src":"6116:179:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[247],"body":{"id":2518,"nodeType":"Block","src":"6512:169:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2504,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"6549:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6549:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2506,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2496,"src":"6563:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2503,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"6530:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6530:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564","id":2508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6573:51:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","typeString":"literal_string \"ERC721: transfer caller is not owner nor approved\""},"value":"ERC721: transfer caller is not owner nor approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","typeString":"literal_string \"ERC721: transfer caller is not owner nor approved\""}],"id":2502,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6522:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6522:103:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2510,"nodeType":"ExpressionStatement","src":"6522:103:11"},{"expression":{"arguments":[{"id":2512,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"6649:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2513,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"6655:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2514,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2496,"src":"6659:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2515,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"6668:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2511,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"6635:13:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6635:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2517,"nodeType":"ExpressionStatement","src":"6635:39:11"}]},"documentation":{"id":2490,"nodeType":"StructuredDocumentation","src":"6301:55:11","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":2519,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"6370:16:11","nodeType":"FunctionDefinition","overrides":{"id":2500,"nodeType":"OverrideSpecifier","overrides":[],"src":"6503:8:11"},"parameters":{"id":2499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2492,"mutability":"mutable","name":"from","nameLocation":"6404:4:11","nodeType":"VariableDeclaration","scope":2519,"src":"6396:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2491,"name":"address","nodeType":"ElementaryTypeName","src":"6396:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2494,"mutability":"mutable","name":"to","nameLocation":"6426:2:11","nodeType":"VariableDeclaration","scope":2519,"src":"6418:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2493,"name":"address","nodeType":"ElementaryTypeName","src":"6418:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2496,"mutability":"mutable","name":"tokenId","nameLocation":"6446:7:11","nodeType":"VariableDeclaration","scope":2519,"src":"6438:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2495,"name":"uint256","nodeType":"ElementaryTypeName","src":"6438:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2498,"mutability":"mutable","name":"_data","nameLocation":"6476:5:11","nodeType":"VariableDeclaration","scope":2519,"src":"6463:18:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2497,"name":"bytes","nodeType":"ElementaryTypeName","src":"6463:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6386:101:11"},"returnParameters":{"id":2501,"nodeType":"ParameterList","parameters":[],"src":"6512:0:11"},"scope":3154,"src":"6361:320:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2547,"nodeType":"Block","src":"7684:166:11","statements":[{"expression":{"arguments":[{"id":2532,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"7704:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2533,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"7710:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2534,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"7714:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2531,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"7694:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7694:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2536,"nodeType":"ExpressionStatement","src":"7694:28:11"},{"expression":{"arguments":[{"arguments":[{"id":2539,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"7763:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2540,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"7769:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2541,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"7773:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2542,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"7782:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2538,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3131,"src":"7740:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7740:48:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7790:52:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2537,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7732:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7732:111:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2546,"nodeType":"ExpressionStatement","src":"7732:111:11"}]},"documentation":{"id":2520,"nodeType":"StructuredDocumentation","src":"6687:851:11","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `_data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2548,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"7552:13:11","nodeType":"FunctionDefinition","parameters":{"id":2529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2522,"mutability":"mutable","name":"from","nameLocation":"7583:4:11","nodeType":"VariableDeclaration","scope":2548,"src":"7575:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2521,"name":"address","nodeType":"ElementaryTypeName","src":"7575:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2524,"mutability":"mutable","name":"to","nameLocation":"7605:2:11","nodeType":"VariableDeclaration","scope":2548,"src":"7597:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2523,"name":"address","nodeType":"ElementaryTypeName","src":"7597:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2526,"mutability":"mutable","name":"tokenId","nameLocation":"7625:7:11","nodeType":"VariableDeclaration","scope":2548,"src":"7617:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2525,"name":"uint256","nodeType":"ElementaryTypeName","src":"7617:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2528,"mutability":"mutable","name":"_data","nameLocation":"7655:5:11","nodeType":"VariableDeclaration","scope":2548,"src":"7642:18:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2527,"name":"bytes","nodeType":"ElementaryTypeName","src":"7642:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7565:101:11"},"returnParameters":{"id":2530,"nodeType":"ParameterList","parameters":[],"src":"7684:0:11"},"scope":3154,"src":"7543:307:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2565,"nodeType":"Block","src":"8224:54:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2556,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"8241:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2558,"indexExpression":{"id":2557,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"8249:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8241:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8269:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8261:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2559,"name":"address","nodeType":"ElementaryTypeName","src":"8261:7:11","typeDescriptions":{}}},"id":2562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8261:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8241:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2555,"id":2564,"nodeType":"Return","src":"8234:37:11"}]},"documentation":{"id":2549,"nodeType":"StructuredDocumentation","src":"7856:292:11","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":2566,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"8162:7:11","nodeType":"FunctionDefinition","parameters":{"id":2552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2551,"mutability":"mutable","name":"tokenId","nameLocation":"8178:7:11","nodeType":"VariableDeclaration","scope":2566,"src":"8170:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2550,"name":"uint256","nodeType":"ElementaryTypeName","src":"8170:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8169:17:11"},"returnParameters":{"id":2555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2566,"src":"8218:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2553,"name":"bool","nodeType":"ElementaryTypeName","src":"8218:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8217:6:11"},"scope":3154,"src":"8153:125:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2606,"nodeType":"Block","src":"8535:257:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2578,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"8561:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2577,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"8553:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8553:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e","id":2580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8571:46:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c","typeString":"literal_string \"ERC721: operator query for nonexistent token\""},"value":"ERC721: operator query for nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c","typeString":"literal_string \"ERC721: operator query for nonexistent token\""}],"id":2576,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8545:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8545:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2582,"nodeType":"ExpressionStatement","src":"8545:73:11"},{"assignments":[2584],"declarations":[{"constant":false,"id":2584,"mutability":"mutable","name":"owner","nameLocation":"8636:5:11","nodeType":"VariableDeclaration","scope":2606,"src":"8628:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2583,"name":"address","nodeType":"ElementaryTypeName","src":"8628:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2589,"initialValue":{"arguments":[{"id":2587,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"8671:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2585,"name":"ERC721rUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"8644:18:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721rUpgradeable_$3154_$","typeString":"type(contract ERC721rUpgradeable)"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8663:7:11","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"8644:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8644:35:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8628:51:11"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2590,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"8697:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2591,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2584,"src":"8708:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8697:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2594,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"8729:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2593,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"8717:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8717:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2596,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"8741:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8717:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8697:51:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2600,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2584,"src":"8769:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2601,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"8776:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2599,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"8752:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8752:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8697:87:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2604,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8696:89:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2575,"id":2605,"nodeType":"Return","src":"8689:96:11"}]},"documentation":{"id":2567,"nodeType":"StructuredDocumentation","src":"8284:147:11","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":2607,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"8445:18:11","nodeType":"FunctionDefinition","parameters":{"id":2572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2569,"mutability":"mutable","name":"spender","nameLocation":"8472:7:11","nodeType":"VariableDeclaration","scope":2607,"src":"8464:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2568,"name":"address","nodeType":"ElementaryTypeName","src":"8464:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2571,"mutability":"mutable","name":"tokenId","nameLocation":"8489:7:11","nodeType":"VariableDeclaration","scope":2607,"src":"8481:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2570,"name":"uint256","nodeType":"ElementaryTypeName","src":"8481:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8463:34:11"},"returnParameters":{"id":2575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2607,"src":"8529:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2573,"name":"bool","nodeType":"ElementaryTypeName","src":"8529:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8528:6:11"},"scope":3154,"src":"8436:356:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2647,"nodeType":"Block","src":"8872:222:11","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8911:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8903:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2615,"name":"address","nodeType":"ElementaryTypeName","src":"8903:7:11","typeDescriptions":{}}},"id":2618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8903:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2619,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"8915:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2620,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"8919:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2614,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"8882:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8882:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2622,"nodeType":"ExpressionStatement","src":"8882:45:11"},{"expression":{"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2623,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"8946:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2625,"indexExpression":{"id":2624,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"8954:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8946:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2626,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"8965:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8946:21:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2628,"nodeType":"ExpressionStatement","src":"8946:21:11"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9008:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9000:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2630,"name":"address","nodeType":"ElementaryTypeName","src":"9000:7:11","typeDescriptions":{}}},"id":2633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9000:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2634,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"9012:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2635,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"9016:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2629,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"8991:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8991:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2637,"nodeType":"EmitStatement","src":"8986:38:11"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9071:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9063:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2639,"name":"address","nodeType":"ElementaryTypeName","src":"9063:7:11","typeDescriptions":{}}},"id":2642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9063:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2643,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"9075:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2644,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"9079:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2638,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"9043:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9043:44:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2646,"nodeType":"ExpressionStatement","src":"9043:44:11"}]},"id":2648,"implemented":true,"kind":"function","modifiers":[],"name":"_mintIdWithoutBalanceUpdate","nameLocation":"8807:27:11","nodeType":"FunctionDefinition","parameters":{"id":2612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2609,"mutability":"mutable","name":"to","nameLocation":"8843:2:11","nodeType":"VariableDeclaration","scope":2648,"src":"8835:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2608,"name":"address","nodeType":"ElementaryTypeName","src":"8835:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2611,"mutability":"mutable","name":"tokenId","nameLocation":"8855:7:11","nodeType":"VariableDeclaration","scope":2648,"src":"8847:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2610,"name":"uint256","nodeType":"ElementaryTypeName","src":"8847:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8834:29:11"},"returnParameters":{"id":2613,"nodeType":"ParameterList","parameters":[],"src":"8872:0:11"},"scope":3154,"src":"8798:296:11","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2750,"nodeType":"Block","src":"9189:987:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2659,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"9207:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9207:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2661,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"9223:2:11","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9226:6:11","memberName":"origin","nodeType":"MemberAccess","src":"9223:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9207:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f6e7472616374732063616e6e6f74206d696e74","id":2664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9234:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_32a53888ca69a743bbaa97a0e7d9316f442fadccf6d37bbebbe9ab28e7024e3e","typeString":"literal_string \"Contracts cannot mint\""},"value":"Contracts cannot mint"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_32a53888ca69a743bbaa97a0e7d9316f442fadccf6d37bbebbe9ab28e7024e3e","typeString":"literal_string \"Contracts cannot mint\""}],"id":2658,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9199:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9199:59:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2666,"nodeType":"ExpressionStatement","src":"9199:59:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2668,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"9276:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9290:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9282:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2669,"name":"address","nodeType":"ElementaryTypeName","src":"9282:7:11","typeDescriptions":{}}},"id":2672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9282:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9276:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":2674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9294:34:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":2667,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9268:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9268:61:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2676,"nodeType":"ExpressionStatement","src":"9268:61:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2678,"name":"_numToMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"9347:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9347:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243373231723a206e65656420746f206d696e74206174206c65617374206f6e6520746f6b656e","id":2681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9363:42:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_bb31380de390e4e0627ca842496a815f4aa25ce62aeb0a04ee78aed6e6c12b62","typeString":"literal_string \"ERC721r: need to mint at least one token\""},"value":"ERC721r: need to mint at least one token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bb31380de390e4e0627ca842496a815f4aa25ce62aeb0a04ee78aed6e6c12b62","typeString":"literal_string \"ERC721r: need to mint at least one token\""}],"id":2677,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9339:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9339:67:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2683,"nodeType":"ExpressionStatement","src":"9339:67:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2685,"name":"_numAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"9534:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2686,"name":"_numToMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"9557:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9534:33:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243373231723a206d696e74696e67206d6f726520746f6b656e73207468616e20617661696c61626c65","id":2688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9569:45:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ffa3719eede42d3318b3817081dd67bc4c18fb5a15d06600fb820769c5c8571","typeString":"literal_string \"ERC721r: minting more tokens than available\""},"value":"ERC721r: minting more tokens than available"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ffa3719eede42d3318b3817081dd67bc4c18fb5a15d06600fb820769c5c8571","typeString":"literal_string \"ERC721r: minting more tokens than available\""}],"id":2684,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9526:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9526:89:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2690,"nodeType":"ExpressionStatement","src":"9526:89:11"},{"assignments":[2692],"declarations":[{"constant":false,"id":2692,"mutability":"mutable","name":"updatedNumAvailableTokens","nameLocation":"9639:25:11","nodeType":"VariableDeclaration","scope":2750,"src":"9634:30:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2691,"name":"uint","nodeType":"ElementaryTypeName","src":"9634:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2694,"initialValue":{"id":2693,"name":"_numAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"9667:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9634:52:11"},{"assignments":[2699],"declarations":[{"constant":false,"id":2699,"mutability":"mutable","name":"res","nameLocation":"9710:3:11","nodeType":"VariableDeclaration","scope":2750,"src":"9696:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2697,"name":"uint","nodeType":"ElementaryTypeName","src":"9696:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2698,"nodeType":"ArrayTypeName","src":"9696:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2705,"initialValue":{"arguments":[{"id":2703,"name":"_numToMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"9727:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"9716:10:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":2700,"name":"uint","nodeType":"ElementaryTypeName","src":"9720:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2701,"nodeType":"ArrayTypeName","src":"9720:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9716:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9696:42:11"},{"body":{"id":2736,"nodeType":"Block","src":"9785:262:11","statements":[{"assignments":[2716],"declarations":[{"constant":false,"id":2716,"mutability":"mutable","name":"tokenId","nameLocation":"9832:7:11","nodeType":"VariableDeclaration","scope":2736,"src":"9824:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2715,"name":"uint256","nodeType":"ElementaryTypeName","src":"9824:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2721,"initialValue":{"arguments":[{"id":2718,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"9868:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2719,"name":"updatedNumAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"9872:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2717,"name":"getRandomAvailableTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"9842:25:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) returns (uint256)"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9842:56:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9824:74:11"},{"expression":{"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2722,"name":"res","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"9912:3:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2724,"indexExpression":{"id":2723,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"9916:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9912:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2725,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"9921:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9912:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2727,"nodeType":"ExpressionStatement","src":"9912:16:11"},{"expression":{"arguments":[{"id":2729,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"9970:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2730,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"9974:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2728,"name":"_mintIdWithoutBalanceUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"9942:27:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9942:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2732,"nodeType":"ExpressionStatement","src":"9942:40:11"},{"expression":{"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"10009:27:11","subExpression":{"id":2733,"name":"updatedNumAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"10011:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2735,"nodeType":"ExpressionStatement","src":"10009:27:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2709,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"9764:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2710,"name":"_numToMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"9768:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9764:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2737,"initializationExpression":{"assignments":[2707],"declarations":[{"constant":false,"id":2707,"mutability":"mutable","name":"i","nameLocation":"9761:1:11","nodeType":"VariableDeclaration","scope":2737,"src":"9753:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2706,"name":"uint256","nodeType":"ElementaryTypeName","src":"9753:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2708,"nodeType":"VariableDeclarationStatement","src":"9753:9:11"},"loopExpression":{"expression":{"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"9780:3:11","subExpression":{"id":2712,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"9782:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2714,"nodeType":"ExpressionStatement","src":"9780:3:11"},"nodeType":"ForStatement","src":"9748:299:11"},{"expression":{"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2738,"name":"_numAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"10065:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2739,"name":"updatedNumAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"10087:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10065:47:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2741,"nodeType":"ExpressionStatement","src":"10065:47:11"},{"expression":{"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2742,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"10122:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2744,"indexExpression":{"id":2743,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"10132:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10122:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2745,"name":"_numToMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"10139:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10122:27:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2747,"nodeType":"ExpressionStatement","src":"10122:27:11"},{"expression":{"id":2748,"name":"res","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"10166:3:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":2657,"id":2749,"nodeType":"Return","src":"10159:10:11"}]},"id":2751,"implemented":true,"kind":"function","modifiers":[],"name":"_mintRandom","nameLocation":"9109:11:11","nodeType":"FunctionDefinition","parameters":{"id":2653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2650,"mutability":"mutable","name":"to","nameLocation":"9129:2:11","nodeType":"VariableDeclaration","scope":2751,"src":"9121:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2649,"name":"address","nodeType":"ElementaryTypeName","src":"9121:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2652,"mutability":"mutable","name":"_numToMint","nameLocation":"9138:10:11","nodeType":"VariableDeclaration","scope":2751,"src":"9133:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2651,"name":"uint","nodeType":"ElementaryTypeName","src":"9133:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9120:29:11"},"returnParameters":{"id":2657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2751,"src":"9175:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2654,"name":"uint","nodeType":"ElementaryTypeName","src":"9175:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2655,"nodeType":"ArrayTypeName","src":"9175:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"9174:15:11"},"scope":3154,"src":"9100:1076:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2802,"nodeType":"Block","src":"10316:584:11","statements":[{"assignments":[2761],"declarations":[{"constant":false,"id":2761,"mutability":"mutable","name":"randomNum","nameLocation":"10334:9:11","nodeType":"VariableDeclaration","scope":2802,"src":"10326:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2760,"name":"uint256","nodeType":"ElementaryTypeName","src":"10326:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2790,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":2767,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"10426:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2768,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"10450:2:11","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10453:8:11","memberName":"gasprice","nodeType":"MemberAccess","src":"10450:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2770,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10483:5:11","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10489:6:11","memberName":"number","nodeType":"MemberAccess","src":"10483:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2772,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10517:5:11","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10523:9:11","memberName":"timestamp","nodeType":"MemberAccess","src":"10517:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2774,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10554:5:11","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10560:10:11","memberName":"difficulty","nodeType":"MemberAccess","src":"10554:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2777,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10602:5:11","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10608:6:11","memberName":"number","nodeType":"MemberAccess","src":"10602:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10617:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10602:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2776,"name":"blockhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-5,"src":"10592:9:11","typeDescriptions":{"typeIdentifier":"t_function_blockhash_view$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256) view returns (bytes32)"}},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10592:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":2784,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"10649:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721rUpgradeable_$3154","typeString":"contract ERC721rUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC721rUpgradeable_$3154","typeString":"contract ERC721rUpgradeable"}],"id":2783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10641:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2782,"name":"address","nodeType":"ElementaryTypeName","src":"10641:7:11","typeDescriptions":{}}},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10641:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2786,"name":"updatedNumAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"10676:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2765,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10394:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10398:6:11","memberName":"encode","nodeType":"MemberAccess","src":"10394:10:11","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10394:325:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2764,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10367:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10367:366:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10346:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2762,"name":"uint256","nodeType":"ElementaryTypeName","src":"10346:7:11","typeDescriptions":{}}},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10346:397:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10326:417:11"},{"assignments":[2792],"declarations":[{"constant":false,"id":2792,"mutability":"mutable","name":"randomIndex","nameLocation":"10761:11:11","nodeType":"VariableDeclaration","scope":2802,"src":"10753:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2791,"name":"uint256","nodeType":"ElementaryTypeName","src":"10753:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2796,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2793,"name":"randomNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"10775:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2794,"name":"updatedNumAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"10787:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10775:37:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10753:59:11"},{"expression":{"arguments":[{"id":2798,"name":"randomIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"10854:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2799,"name":"updatedNumAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"10867:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2797,"name":"getAvailableTokenAtIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"10829:24:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) returns (uint256)"}},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10829:64:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2759,"id":2801,"nodeType":"Return","src":"10822:71:11"}]},"id":2803,"implemented":true,"kind":"function","modifiers":[],"name":"getRandomAvailableTokenId","nameLocation":"10199:25:11","nodeType":"FunctionDefinition","parameters":{"id":2756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2753,"mutability":"mutable","name":"to","nameLocation":"10233:2:11","nodeType":"VariableDeclaration","scope":2803,"src":"10225:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2752,"name":"address","nodeType":"ElementaryTypeName","src":"10225:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2755,"mutability":"mutable","name":"updatedNumAvailableTokens","nameLocation":"10242:25:11","nodeType":"VariableDeclaration","scope":2803,"src":"10237:30:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2754,"name":"uint","nodeType":"ElementaryTypeName","src":"10237:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10224:44:11"},"returnParameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2758,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2803,"src":"10303:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2757,"name":"uint256","nodeType":"ElementaryTypeName","src":"10303:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10302:9:11"},"scope":3154,"src":"10190:710:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2882,"nodeType":"Block","src":"11148:1310:11","statements":[{"assignments":[2813],"declarations":[{"constant":false,"id":2813,"mutability":"mutable","name":"valAtIndex","nameLocation":"11166:10:11","nodeType":"VariableDeclaration","scope":2882,"src":"11158:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2812,"name":"uint256","nodeType":"ElementaryTypeName","src":"11158:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2817,"initialValue":{"baseExpression":{"id":2814,"name":"_availableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"11179:16:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2816,"indexExpression":{"id":2815,"name":"indexToUse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"11196:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11179:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11158:49:11"},{"assignments":[2819],"declarations":[{"constant":false,"id":2819,"mutability":"mutable","name":"result","nameLocation":"11225:6:11","nodeType":"VariableDeclaration","scope":2882,"src":"11217:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2818,"name":"uint256","nodeType":"ElementaryTypeName","src":"11217:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2820,"nodeType":"VariableDeclarationStatement","src":"11217:14:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2821,"name":"valAtIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2813,"src":"11245:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11259:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11245:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2833,"nodeType":"Block","src":"11383:144:11","statements":[{"expression":{"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2829,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"11497:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2830,"name":"valAtIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2813,"src":"11506:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11497:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2832,"nodeType":"ExpressionStatement","src":"11497:19:11"}]},"id":2834,"nodeType":"IfStatement","src":"11241:286:11","trueBody":{"id":2828,"nodeType":"Block","src":"11262:115:11","statements":[{"expression":{"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2824,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"11347:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2825,"name":"indexToUse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"11356:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11347:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2827,"nodeType":"ExpressionStatement","src":"11347:19:11"}]}},{"assignments":[2836],"declarations":[{"constant":false,"id":2836,"mutability":"mutable","name":"lastIndex","nameLocation":"11545:9:11","nodeType":"VariableDeclaration","scope":2882,"src":"11537:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2835,"name":"uint256","nodeType":"ElementaryTypeName","src":"11537:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2840,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2837,"name":"updatedNumAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"11557:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11585:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11557:29:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11537:49:11"},{"assignments":[2842],"declarations":[{"constant":false,"id":2842,"mutability":"mutable","name":"lastValInArray","nameLocation":"11604:14:11","nodeType":"VariableDeclaration","scope":2882,"src":"11596:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2841,"name":"uint256","nodeType":"ElementaryTypeName","src":"11596:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2846,"initialValue":{"baseExpression":{"id":2843,"name":"_availableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"11621:16:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2845,"indexExpression":{"id":2844,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"11638:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11621:27:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11596:52:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2847,"name":"indexToUse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"11662:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2848,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"11676:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11662:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2869,"nodeType":"IfStatement","src":"11658:619:11","trueBody":{"id":2868,"nodeType":"Block","src":"11687:590:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2850,"name":"lastValInArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"11910:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11928:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11910:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2866,"nodeType":"Block","src":"12085:182:11","statements":[{"expression":{"id":2864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2860,"name":"_availableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"12207:16:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2862,"indexExpression":{"id":2861,"name":"indexToUse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"12224:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12207:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2863,"name":"lastValInArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"12238:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12207:45:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2865,"nodeType":"ExpressionStatement","src":"12207:45:11"}]},"id":2867,"nodeType":"IfStatement","src":"11906:361:11","trueBody":{"id":2859,"nodeType":"Block","src":"11931:148:11","statements":[{"expression":{"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2853,"name":"_availableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"12024:16:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2855,"indexExpression":{"id":2854,"name":"indexToUse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"12041:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12024:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2856,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"12055:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12024:40:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2858,"nodeType":"ExpressionStatement","src":"12024:40:11"}]}}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2870,"name":"lastValInArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"12290:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12308:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12290:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2879,"nodeType":"IfStatement","src":"12286:134:11","trueBody":{"id":2878,"nodeType":"Block","src":"12311:109:11","statements":[{"expression":{"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"12375:34:11","subExpression":{"baseExpression":{"id":2873,"name":"_availableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"12382:16:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2875,"indexExpression":{"id":2874,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"12399:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12382:27:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2877,"nodeType":"ExpressionStatement","src":"12375:34:11"}]}},{"expression":{"id":2880,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"12445:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2811,"id":2881,"nodeType":"Return","src":"12438:13:11"}]},"id":2883,"implemented":true,"kind":"function","modifiers":[],"name":"getAvailableTokenAtIndex","nameLocation":"11024:24:11","nodeType":"FunctionDefinition","parameters":{"id":2808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2805,"mutability":"mutable","name":"indexToUse","nameLocation":"11057:10:11","nodeType":"VariableDeclaration","scope":2883,"src":"11049:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2804,"name":"uint256","nodeType":"ElementaryTypeName","src":"11049:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2807,"mutability":"mutable","name":"updatedNumAvailableTokens","nameLocation":"11074:25:11","nodeType":"VariableDeclaration","scope":2883,"src":"11069:30:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2806,"name":"uint","nodeType":"ElementaryTypeName","src":"11069:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11048:52:11"},"returnParameters":{"id":2811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2810,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2883,"src":"11135:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2809,"name":"uint256","nodeType":"ElementaryTypeName","src":"11135:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11134:9:11"},"scope":3154,"src":"11015:1443:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2937,"nodeType":"Block","src":"12681:450:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2891,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"12699:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12699:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2893,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"12715:2:11","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12718:6:11","memberName":"origin","nodeType":"MemberAccess","src":"12715:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12699:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f6e7472616374732063616e6e6f74206d696e74","id":2896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12726:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_32a53888ca69a743bbaa97a0e7d9316f442fadccf6d37bbebbe9ab28e7024e3e","typeString":"literal_string \"Contracts cannot mint\""},"value":"Contracts cannot mint"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_32a53888ca69a743bbaa97a0e7d9316f442fadccf6d37bbebbe9ab28e7024e3e","typeString":"literal_string \"Contracts cannot mint\""}],"id":2890,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12691:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12691:59:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2898,"nodeType":"ExpressionStatement","src":"12691:59:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2900,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"12768:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12782:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12774:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2901,"name":"address","nodeType":"ElementaryTypeName","src":"12774:7:11","typeDescriptions":{}}},"id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12774:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12768:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":2906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12786:34:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":2899,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12760:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12760:61:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2908,"nodeType":"ExpressionStatement","src":"12760:61:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2910,"name":"_numAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"12839:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"31","id":2911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12862:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12839:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243373231723a206d696e74696e67206d6f726520746f6b656e73207468616e20617661696c61626c65","id":2913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12865:45:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ffa3719eede42d3318b3817081dd67bc4c18fb5a15d06600fb820769c5c8571","typeString":"literal_string \"ERC721r: minting more tokens than available\""},"value":"ERC721r: minting more tokens than available"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ffa3719eede42d3318b3817081dd67bc4c18fb5a15d06600fb820769c5c8571","typeString":"literal_string \"ERC721r: minting more tokens than available\""}],"id":2909,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12831:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12831:80:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2915,"nodeType":"ExpressionStatement","src":"12831:80:11"},{"assignments":[2917],"declarations":[{"constant":false,"id":2917,"mutability":"mutable","name":"tokenId","nameLocation":"12935:7:11","nodeType":"VariableDeclaration","scope":2937,"src":"12930:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2916,"name":"uint","nodeType":"ElementaryTypeName","src":"12930:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2922,"initialValue":{"arguments":[{"id":2919,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"12970:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2920,"name":"_numAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"12977:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2918,"name":"getAvailableTokenAtIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"12945:24:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) returns (uint256)"}},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12945:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12930:67:11"},{"expression":{"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"13007:21:11","subExpression":{"id":2923,"name":"_numAvailableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"13009:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2925,"nodeType":"ExpressionStatement","src":"13007:21:11"},{"expression":{"arguments":[{"id":2927,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"13075:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2928,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"13079:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2926,"name":"_mintIdWithoutBalanceUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"13047:27:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13047:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2930,"nodeType":"ExpressionStatement","src":"13047:40:11"},{"expression":{"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2931,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"13106:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2933,"indexExpression":{"id":2932,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"13116:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13106:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13123:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13106:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2936,"nodeType":"ExpressionStatement","src":"13106:18:11"}]},"id":2938,"implemented":true,"kind":"function","modifiers":[],"name":"_mintAtIndex","nameLocation":"12627:12:11","nodeType":"FunctionDefinition","parameters":{"id":2888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2885,"mutability":"mutable","name":"to","nameLocation":"12648:2:11","nodeType":"VariableDeclaration","scope":2938,"src":"12640:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2884,"name":"address","nodeType":"ElementaryTypeName","src":"12640:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2887,"mutability":"mutable","name":"index","nameLocation":"12657:5:11","nodeType":"VariableDeclaration","scope":2938,"src":"12652:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2886,"name":"uint","nodeType":"ElementaryTypeName","src":"12652:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12639:24:11"},"returnParameters":{"id":2889,"nodeType":"ParameterList","parameters":[],"src":"12681:0:11"},"scope":3154,"src":"12618:513:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3012,"nodeType":"Block","src":"13564:508:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2951,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"13609:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2949,"name":"ERC721rUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"13582:18:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721rUpgradeable_$3154_$","typeString":"type(contract ERC721rUpgradeable)"}},"id":2950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13601:7:11","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"13582:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13582:35:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2953,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"13621:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13582:43:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":2955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13627:39:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":2948,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13574:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13574:93:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2957,"nodeType":"ExpressionStatement","src":"13574:93:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2959,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"13685:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13699:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13691:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2960,"name":"address","nodeType":"ElementaryTypeName","src":"13691:7:11","typeDescriptions":{}}},"id":2963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13691:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13685:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13703:38:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":2958,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13677:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13677:65:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2967,"nodeType":"ExpressionStatement","src":"13677:65:11"},{"expression":{"arguments":[{"id":2969,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"13774:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2970,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"13780:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2971,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"13784:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2968,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"13753:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13753:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2973,"nodeType":"ExpressionStatement","src":"13753:39:11"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13871:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13863:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2975,"name":"address","nodeType":"ElementaryTypeName","src":"13863:7:11","typeDescriptions":{}}},"id":2978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13863:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2979,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"13875:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2974,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3037,"src":"13854:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13854:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2981,"nodeType":"ExpressionStatement","src":"13854:29:11"},{"expression":{"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2982,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"13894:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2984,"indexExpression":{"id":2983,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"13904:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13894:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13913:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13894:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2987,"nodeType":"ExpressionStatement","src":"13894:20:11"},{"expression":{"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2988,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"13924:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2990,"indexExpression":{"id":2989,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"13934:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13924:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13941:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13924:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2993,"nodeType":"ExpressionStatement","src":"13924:18:11"},{"expression":{"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2994,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"13952:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2996,"indexExpression":{"id":2995,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"13960:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13952:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2997,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"13971:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13952:21:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2999,"nodeType":"ExpressionStatement","src":"13952:21:11"},{"eventCall":{"arguments":[{"id":3001,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"13998:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3002,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"14004:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3003,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"14008:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3000,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"13989:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13989:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3005,"nodeType":"EmitStatement","src":"13984:32:11"},{"expression":{"arguments":[{"id":3007,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"14047:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3008,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"14053:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3009,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"14057:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3006,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"14027:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14027:38:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3011,"nodeType":"ExpressionStatement","src":"14027:38:11"}]},"documentation":{"id":2939,"nodeType":"StructuredDocumentation","src":"13137:313:11","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":3013,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"13464:9:11","nodeType":"FunctionDefinition","parameters":{"id":2946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2941,"mutability":"mutable","name":"from","nameLocation":"13491:4:11","nodeType":"VariableDeclaration","scope":3013,"src":"13483:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2940,"name":"address","nodeType":"ElementaryTypeName","src":"13483:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2943,"mutability":"mutable","name":"to","nameLocation":"13513:2:11","nodeType":"VariableDeclaration","scope":3013,"src":"13505:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2942,"name":"address","nodeType":"ElementaryTypeName","src":"13505:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2945,"mutability":"mutable","name":"tokenId","nameLocation":"13533:7:11","nodeType":"VariableDeclaration","scope":3013,"src":"13525:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2944,"name":"uint256","nodeType":"ElementaryTypeName","src":"13525:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13473:73:11"},"returnParameters":{"id":2947,"nodeType":"ParameterList","parameters":[],"src":"13564:0:11"},"scope":3154,"src":"13455:617:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3036,"nodeType":"Block","src":"14247:119:11","statements":[{"expression":{"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3021,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2129,"src":"14257:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3023,"indexExpression":{"id":3022,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"14273:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14257:24:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3024,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"14284:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14257:29:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3026,"nodeType":"ExpressionStatement","src":"14257:29:11"},{"eventCall":{"arguments":[{"arguments":[{"id":3030,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"14337:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3028,"name":"ERC721rUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"14310:18:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721rUpgradeable_$3154_$","typeString":"type(contract ERC721rUpgradeable)"}},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14329:7:11","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"14310:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14310:35:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3032,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"14347:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3033,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"14351:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3027,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"14301:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14301:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3035,"nodeType":"EmitStatement","src":"14296:63:11"}]},"documentation":{"id":3014,"nodeType":"StructuredDocumentation","src":"14078:100:11","text":" @dev Approve `to` to operate on `tokenId`\n Emits a {Approval} event."},"id":3037,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14192:8:11","nodeType":"FunctionDefinition","parameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3016,"mutability":"mutable","name":"to","nameLocation":"14209:2:11","nodeType":"VariableDeclaration","scope":3037,"src":"14201:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3015,"name":"address","nodeType":"ElementaryTypeName","src":"14201:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3018,"mutability":"mutable","name":"tokenId","nameLocation":"14221:7:11","nodeType":"VariableDeclaration","scope":3037,"src":"14213:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3017,"name":"uint256","nodeType":"ElementaryTypeName","src":"14213:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14200:29:11"},"returnParameters":{"id":3020,"nodeType":"ParameterList","parameters":[],"src":"14247:0:11"},"scope":3154,"src":"14183:183:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3068,"nodeType":"Block","src":"14624:184:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3048,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"14642:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3049,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"14651:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14642:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":3051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14661:27:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":3047,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14634:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14634:55:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3053,"nodeType":"ExpressionStatement","src":"14634:55:11"},{"expression":{"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3054,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"14699:18:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3057,"indexExpression":{"id":3055,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"14718:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14699:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3058,"indexExpression":{"id":3056,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"14725:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14699:35:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3059,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"14737:8:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14699:46:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3061,"nodeType":"ExpressionStatement","src":"14699:46:11"},{"eventCall":{"arguments":[{"id":3063,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"14775:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3064,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"14782:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3065,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"14792:8:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3062,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"14760:14:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14760:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3067,"nodeType":"EmitStatement","src":"14755:46:11"}]},"documentation":{"id":3038,"nodeType":"StructuredDocumentation","src":"14372:124:11","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits a {ApprovalForAll} event."},"id":3069,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"14510:18:11","nodeType":"FunctionDefinition","parameters":{"id":3045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3040,"mutability":"mutable","name":"owner","nameLocation":"14546:5:11","nodeType":"VariableDeclaration","scope":3069,"src":"14538:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3039,"name":"address","nodeType":"ElementaryTypeName","src":"14538:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3042,"mutability":"mutable","name":"operator","nameLocation":"14569:8:11","nodeType":"VariableDeclaration","scope":3069,"src":"14561:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3041,"name":"address","nodeType":"ElementaryTypeName","src":"14561:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3044,"mutability":"mutable","name":"approved","nameLocation":"14592:8:11","nodeType":"VariableDeclaration","scope":3069,"src":"14587:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3043,"name":"bool","nodeType":"ElementaryTypeName","src":"14587:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14528:78:11"},"returnParameters":{"id":3046,"nodeType":"ParameterList","parameters":[],"src":"14624:0:11"},"scope":3154,"src":"14501:307:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3130,"nodeType":"Block","src":"15517:644:11","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3083,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"15531:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15534:10:11","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":729,"src":"15531:13:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15531:15:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3128,"nodeType":"Block","src":"16119:36:11","statements":[{"expression":{"hexValue":"74727565","id":3126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16140:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3082,"id":3127,"nodeType":"Return","src":"16133:11:11"}]},"id":3129,"nodeType":"IfStatement","src":"15527:628:11","trueBody":{"id":3125,"nodeType":"Block","src":"15548:565:11","statements":[{"clauses":[{"block":{"id":3105,"nodeType":"Block","src":"15674:102:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3099,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"15699:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3100,"name":"IERC721ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"15709:26:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721ReceiverUpgradeable_$186_$","typeString":"type(contract IERC721ReceiverUpgradeable)"}},"id":3101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15736:16:11","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":185,"src":"15709:43:11","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721ReceiverUpgradeable.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":3102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15753:8:11","memberName":"selector","nodeType":"MemberAccess","src":"15709:52:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"15699:62:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3082,"id":3104,"nodeType":"Return","src":"15692:69:11"}]},"errorName":"","id":3106,"nodeType":"TryCatchClause","parameters":{"id":3098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3097,"mutability":"mutable","name":"retval","nameLocation":"15666:6:11","nodeType":"VariableDeclaration","scope":3106,"src":"15659:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3096,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15659:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"15658:15:11"},"src":"15650:126:11"},{"block":{"id":3122,"nodeType":"Block","src":"15805:298:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3110,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"15827:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15834:6:11","memberName":"length","nodeType":"MemberAccess","src":"15827:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15844:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15827:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3120,"nodeType":"Block","src":"15954:135:11","statements":[{"AST":{"nodeType":"YulBlock","src":"15985:86:11","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16022:2:11","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"16026:6:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16018:3:11"},"nodeType":"YulFunctionCall","src":"16018:15:11"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"16041:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16035:5:11"},"nodeType":"YulFunctionCall","src":"16035:13:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16011:6:11"},"nodeType":"YulFunctionCall","src":"16011:38:11"},"nodeType":"YulExpressionStatement","src":"16011:38:11"}]},"evmVersion":"london","externalReferences":[{"declaration":3108,"isOffset":false,"isSlot":false,"src":"16026:6:11","valueSize":1},{"declaration":3108,"isOffset":false,"isSlot":false,"src":"16041:6:11","valueSize":1}],"id":3119,"nodeType":"InlineAssembly","src":"15976:95:11"}]},"id":3121,"nodeType":"IfStatement","src":"15823:266:11","trueBody":{"id":3118,"nodeType":"Block","src":"15847:101:11","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":3115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15876:52:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":3114,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"15869:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15869:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3117,"nodeType":"ExpressionStatement","src":"15869:60:11"}]}}]},"errorName":"","id":3123,"nodeType":"TryCatchClause","parameters":{"id":3109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3108,"mutability":"mutable","name":"reason","nameLocation":"15797:6:11","nodeType":"VariableDeclaration","scope":3123,"src":"15784:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3107,"name":"bytes","nodeType":"ElementaryTypeName","src":"15784:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15783:21:11"},"src":"15777:326:11"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3090,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"15614:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15614:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3092,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"15628:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3093,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"15634:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3094,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"15643:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3087,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"15593:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3086,"name":"IERC721ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"15566:26:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721ReceiverUpgradeable_$186_$","typeString":"type(contract IERC721ReceiverUpgradeable)"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15566:30:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721ReceiverUpgradeable_$186","typeString":"contract IERC721ReceiverUpgradeable"}},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15597:16:11","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":185,"src":"15566:47:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15566:83:11","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3124,"nodeType":"TryStatement","src":"15562:541:11"}]}}]},"documentation":{"id":3070,"nodeType":"StructuredDocumentation","src":"14814:542:11","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param _data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":3131,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"15370:22:11","nodeType":"FunctionDefinition","parameters":{"id":3079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3072,"mutability":"mutable","name":"from","nameLocation":"15410:4:11","nodeType":"VariableDeclaration","scope":3131,"src":"15402:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3071,"name":"address","nodeType":"ElementaryTypeName","src":"15402:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3074,"mutability":"mutable","name":"to","nameLocation":"15432:2:11","nodeType":"VariableDeclaration","scope":3131,"src":"15424:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3073,"name":"address","nodeType":"ElementaryTypeName","src":"15424:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3076,"mutability":"mutable","name":"tokenId","nameLocation":"15452:7:11","nodeType":"VariableDeclaration","scope":3131,"src":"15444:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3075,"name":"uint256","nodeType":"ElementaryTypeName","src":"15444:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3078,"mutability":"mutable","name":"_data","nameLocation":"15482:5:11","nodeType":"VariableDeclaration","scope":3131,"src":"15469:18:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3077,"name":"bytes","nodeType":"ElementaryTypeName","src":"15469:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15392:101:11"},"returnParameters":{"id":3082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3131,"src":"15511:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3080,"name":"bool","nodeType":"ElementaryTypeName","src":"15511:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15510:6:11"},"scope":3154,"src":"15361:800:11","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3141,"nodeType":"Block","src":"16837:2:11","statements":[]},"documentation":{"id":3132,"nodeType":"StructuredDocumentation","src":"16167:545:11","text":" @dev Hook that is called before any token transfer. This includes minting\n and burning.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, ``from``'s `tokenId` will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":3142,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"16726:20:11","nodeType":"FunctionDefinition","parameters":{"id":3139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3134,"mutability":"mutable","name":"from","nameLocation":"16764:4:11","nodeType":"VariableDeclaration","scope":3142,"src":"16756:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3133,"name":"address","nodeType":"ElementaryTypeName","src":"16756:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3136,"mutability":"mutable","name":"to","nameLocation":"16786:2:11","nodeType":"VariableDeclaration","scope":3142,"src":"16778:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3135,"name":"address","nodeType":"ElementaryTypeName","src":"16778:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"tokenId","nameLocation":"16806:7:11","nodeType":"VariableDeclaration","scope":3142,"src":"16798:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3137,"name":"uint256","nodeType":"ElementaryTypeName","src":"16798:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16746:73:11"},"returnParameters":{"id":3140,"nodeType":"ParameterList","parameters":[],"src":"16837:0:11"},"scope":3154,"src":"16717:122:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3152,"nodeType":"Block","src":"17330:2:11","statements":[]},"documentation":{"id":3143,"nodeType":"StructuredDocumentation","src":"16845:361:11","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":3153,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"17220:19:11","nodeType":"FunctionDefinition","parameters":{"id":3150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3145,"mutability":"mutable","name":"from","nameLocation":"17257:4:11","nodeType":"VariableDeclaration","scope":3153,"src":"17249:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3144,"name":"address","nodeType":"ElementaryTypeName","src":"17249:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3147,"mutability":"mutable","name":"to","nameLocation":"17279:2:11","nodeType":"VariableDeclaration","scope":3153,"src":"17271:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3146,"name":"address","nodeType":"ElementaryTypeName","src":"17271:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3149,"mutability":"mutable","name":"tokenId","nameLocation":"17299:7:11","nodeType":"VariableDeclaration","scope":3153,"src":"17291:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3148,"name":"uint256","nodeType":"ElementaryTypeName","src":"17291:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17239:73:11"},"returnParameters":{"id":3151,"nodeType":"ParameterList","parameters":[],"src":"17330:0:11"},"scope":3154,"src":"17211:121:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3155,"src":"822:16512:11","usedErrors":[]}],"src":"33:17301:11"},"id":11},"contracts/HashPunk.sol":{"ast":{"absolutePath":"contracts/HashPunk.sol","exportedSymbols":{"Address":[1041],"AddressUpgradeable":[613],"ContextUpgradeable":[655],"ERC165Upgradeable":[699],"ERC721rUpgradeable":[3154],"HashPunk":[3612],"HashPunkStorage":[3696],"IERC165Upgradeable":[711],"IERC721MetadataUpgradeable":[329],"IERC721ReceiverUpgradeable":[186],"IERC721Upgradeable":[302],"IHValue":[3664],"Initializable":[168],"Math":[2081],"Strings":[1216]},"id":3613,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3156,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:12"},{"absolutePath":"contracts/ERC721rUpgradeable.sol","file":"./ERC721rUpgradeable.sol","id":3157,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3613,"sourceUnit":3155,"src":"57:34:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/HashPunkStorage.sol","file":"./HashPunkStorage.sol","id":3158,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3613,"sourceUnit":3697,"src":"92:31:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3159,"name":"ERC721rUpgradeable","nameLocations":["146:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":3154,"src":"146:18:12"},"id":3160,"nodeType":"InheritanceSpecifier","src":"146:18:12"},{"baseName":{"id":3161,"name":"HashPunkStorage","nameLocations":["166:15:12"],"nodeType":"IdentifierPath","referencedDeclaration":3696,"src":"166:15:12"},"id":3162,"nodeType":"InheritanceSpecifier","src":"166:15:12"}],"canonicalName":"HashPunk","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3612,"linearizedBaseContracts":[3612,3696,3154,329,302,699,711,655,168],"name":"HashPunk","nameLocation":"134:8:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":3204,"nodeType":"Block","src":"339:206:12","statements":[{"expression":{"arguments":[{"hexValue":"4861736850756e6b","id":3176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"364:10:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_ac0d6ed64137f6afa90a7b9bbb0d58a2fa6368ce863dd7a803d62c2d0eeee843","typeString":"literal_string \"HashPunk\""},"value":"HashPunk"},{"hexValue":"4850","id":3177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"376:4:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_a3b26fd170457b532f6b1a50a94e6c19413ca9d8e71b5b17acf8cafc843385d7","typeString":"literal_string \"HP\""},"value":"HP"},{"hexValue":"33303030","id":3178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"382:4:12","typeDescriptions":{"typeIdentifier":"t_rational_3000_by_1","typeString":"int_const 3000"},"value":"3000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ac0d6ed64137f6afa90a7b9bbb0d58a2fa6368ce863dd7a803d62c2d0eeee843","typeString":"literal_string \"HashPunk\""},{"typeIdentifier":"t_stringliteral_a3b26fd170457b532f6b1a50a94e6c19413ca9d8e71b5b17acf8cafc843385d7","typeString":"literal_string \"HP\""},{"typeIdentifier":"t_rational_3000_by_1","typeString":"int_const 3000"}],"id":3175,"name":"__ERC721r_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"349:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,string memory,uint256)"}},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"349:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3180,"nodeType":"ExpressionStatement","src":"349:38:12"},{"expression":{"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3181,"name":"passIdBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"397:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3182,"name":"_passIdBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3170,"src":"410:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"397:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3184,"nodeType":"ExpressionStatement","src":"397:24:12"},{"expression":{"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3185,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"431:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3186,"name":"_base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3168,"src":"438:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"431:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3188,"nodeType":"ExpressionStatement","src":"431:12:12"},{"expression":{"id":3193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3189,"name":"hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"453:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3191,"name":"_hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3166,"src":"470:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3190,"name":"IHValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"462:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IHValue_$3664_$","typeString":"type(contract IHValue)"}},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"462:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"src":"453:25:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"id":3194,"nodeType":"ExpressionStatement","src":"453:25:12"},{"expression":{"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3195,"name":"baseMetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3684,"src":"488:15:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3196,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"506:4:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"488:22:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3198,"nodeType":"ExpressionStatement","src":"488:22:12"},{"expression":{"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3199,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"520:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3200,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"528:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"532:6:12","memberName":"sender","nodeType":"MemberAccess","src":"528:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"520:18:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3203,"nodeType":"ExpressionStatement","src":"520:18:12"}]},"functionSelector":"1e214f06","id":3205,"implemented":true,"kind":"function","modifiers":[{"id":3173,"kind":"modifierInvocation","modifierName":{"id":3172,"name":"initializer","nameLocations":["327:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":70,"src":"327:11:12"},"nodeType":"ModifierInvocation","src":"327:11:12"}],"name":"initialize","nameLocation":"198:10:12","nodeType":"FunctionDefinition","parameters":{"id":3171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3164,"mutability":"mutable","name":"_uri","nameLocation":"232:4:12","nodeType":"VariableDeclaration","scope":3205,"src":"218:18:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3163,"name":"string","nodeType":"ElementaryTypeName","src":"218:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3166,"mutability":"mutable","name":"_hValue","nameLocation":"254:7:12","nodeType":"VariableDeclaration","scope":3205,"src":"246:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3165,"name":"address","nodeType":"ElementaryTypeName","src":"246:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3168,"mutability":"mutable","name":"_base","nameLocation":"279:5:12","nodeType":"VariableDeclaration","scope":3205,"src":"271:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3167,"name":"uint256","nodeType":"ElementaryTypeName","src":"271:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3170,"mutability":"mutable","name":"_passIdBase","nameLocation":"302:11:12","nodeType":"VariableDeclaration","scope":3205,"src":"294:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3169,"name":"uint256","nodeType":"ElementaryTypeName","src":"294:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"208:111:12"},"returnParameters":{"id":3174,"nodeType":"ParameterList","parameters":[],"src":"339:0:12"},"scope":3612,"src":"189:356:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3216,"nodeType":"Block","src":"572:127:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3208,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"603:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"607:6:12","memberName":"sender","nodeType":"MemberAccess","src":"603:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3210,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"617:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"603:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4861736850756e6b3a2063616c6c6572206973206e6f7420746865206f776e6572","id":3212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"636:35:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_71947446ca525a6f47b4c26e39d45a716107b5eb5547cf11856e8d61c0fa00ba","typeString":"literal_string \"HashPunk: caller is not the owner\""},"value":"HashPunk: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_71947446ca525a6f47b4c26e39d45a716107b5eb5547cf11856e8d61c0fa00ba","typeString":"literal_string \"HashPunk: caller is not the owner\""}],"id":3207,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"582:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"582:99:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3214,"nodeType":"ExpressionStatement","src":"582:99:12"},{"id":3215,"nodeType":"PlaceholderStatement","src":"691:1:12"}]},"id":3217,"name":"onlyOwner","nameLocation":"560:9:12","nodeType":"ModifierDefinition","parameters":{"id":3206,"nodeType":"ParameterList","parameters":[],"src":"569:2:12"},"src":"551:148:12","virtual":false,"visibility":"internal"},{"body":{"id":3379,"nodeType":"Block","src":"754:963:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3225,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"772:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"775:6:12","memberName":"origin","nodeType":"MemberAccess","src":"772:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3227,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"785:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"789:6:12","memberName":"sender","nodeType":"MemberAccess","src":"785:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"772:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"","id":3230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"797:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3224,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"764:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"764:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3232,"nodeType":"ExpressionStatement","src":"764:36:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3234,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"818:2:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3235,"name":"passId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3667,"src":"824:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"818:12:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3237,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"834:2:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3238,"name":"Hpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"840:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"834:12:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"818:28:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964206964","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"848:12:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c270178c73806a8dbbf8aad0f9eb77e61abe0b7a93239d42f99fae572eed526","typeString":"literal_string \"invalid id\""},"value":"invalid id"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c270178c73806a8dbbf8aad0f9eb77e61abe0b7a93239d42f99fae572eed526","typeString":"literal_string \"invalid id\""}],"id":3233,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"810:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:51:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3243,"nodeType":"ExpressionStatement","src":"810:51:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3244,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"875:2:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3245,"name":"passId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3667,"src":"881:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"875:12:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3290,"nodeType":"IfStatement","src":"871:329:12","trueBody":{"id":3289,"nodeType":"Block","src":"889:311:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":3250,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"928:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"932:6:12","memberName":"sender","nodeType":"MemberAccess","src":"928:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3252,"name":"passId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3667,"src":"940:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3248,"name":"hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"911:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"918:9:12","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":3623,"src":"911:16:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view external returns (uint256)"}},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"911:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3254,"name":"passIdBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"951:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3255,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"964:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"951:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"911:59:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e73756666696369656e74205061737320436172642062616c616e6365","id":3258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"972:32:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc7e415b4d71800746fd56cd2e9f99a70019c07d161e9e43d2fe64c358808e78","typeString":"literal_string \"insufficient Pass Card balance\""},"value":"insufficient Pass Card balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc7e415b4d71800746fd56cd2e9f99a70019c07d161e9e43d2fe64c358808e78","typeString":"literal_string \"insufficient Pass Card balance\""}],"id":3247,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"903:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:102:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3260,"nodeType":"ExpressionStatement","src":"903:102:12"},{"expression":{"arguments":[{"expression":{"id":3264,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1031:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1035:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1031:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3266,"name":"passId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3667,"src":"1043:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3267,"name":"passIdBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"1051:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3268,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"1064:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1051:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3261,"name":"hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"1019:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1026:4:12","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":3645,"src":"1019:11:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) external"}},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1019:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3271,"nodeType":"ExpressionStatement","src":"1019:52:12"},{"expression":{"arguments":[{"expression":{"id":3273,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1097:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1101:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1097:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3275,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"1109:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3272,"name":"_mintRandom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"1085:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256) returns (uint256[] memory)"}},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1085:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3277,"nodeType":"ExpressionStatement","src":"1085:31:12"},{"expression":{"arguments":[{"expression":{"id":3281,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1142:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1146:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1142:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3283,"name":"voucher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"1154:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":3284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1163:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"","id":3285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1166:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3278,"name":"hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"1130:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1137:4:12","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":3656,"src":"1130:11:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory) external"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1130:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3287,"nodeType":"ExpressionStatement","src":"1130:39:12"},{"functionReturnParameters":3223,"id":3288,"nodeType":"Return","src":"1183:7:12"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":3294,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1234:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1238:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1234:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3296,"name":"Hpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"1246:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3292,"name":"hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"1217:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1224:9:12","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":3623,"src":"1217:16:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view external returns (uint256)"}},"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1217:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"expression":{"id":3300,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1276:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1280:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1276:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3298,"name":"hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"1256:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1263:12:12","memberName":"negtiveValue","nodeType":"MemberAccess","referencedDeclaration":3663,"src":"1256:19:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1256:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1217:70:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3304,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"1291:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3305,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"1298:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1291:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1217:87:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e73756666696369656e74204856616c75652062616c616e6365","id":3308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1306:29:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_8dab769bb3e1b4a60276b85ee01ccc68a7073052ca1cb5124502172cc6982bf4","typeString":"literal_string \"insufficient HValue balance\""},"value":"insufficient HValue balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8dab769bb3e1b4a60276b85ee01ccc68a7073052ca1cb5124502172cc6982bf4","typeString":"literal_string \"insufficient HValue balance\""}],"id":3291,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1209:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1209:127:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3310,"nodeType":"ExpressionStatement","src":"1209:127:12"},{"expression":{"arguments":[{"expression":{"id":3314,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1358:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1362:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1358:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3316,"name":"Hpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"1370:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3317,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"1378:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3318,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"1385:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1378:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3311,"name":"hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"1346:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1353:4:12","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":3645,"src":"1346:11:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) external"}},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1346:46:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3321,"nodeType":"ExpressionStatement","src":"1346:46:12"},{"assignments":[3326],"declarations":[{"constant":false,"id":3326,"mutability":"mutable","name":"tokenIds","nameLocation":"1416:8:12","nodeType":"VariableDeclaration","scope":3379,"src":"1402:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3324,"name":"uint","nodeType":"ElementaryTypeName","src":"1402:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3325,"nodeType":"ArrayTypeName","src":"1402:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3332,"initialValue":{"arguments":[{"expression":{"id":3328,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1439:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1443:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1439:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3330,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"1451:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3327,"name":"_mintRandom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"1427:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256) returns (uint256[] memory)"}},"id":3331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1427:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1402:56:12"},{"body":{"id":3367,"nodeType":"Block","src":"1510:152:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3344,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"1527:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3346,"indexExpression":{"id":3345,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"1536:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1527:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3347,"name":"luckyStart","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3687,"src":"1540:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1527:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3349,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"1554:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3351,"indexExpression":{"id":3350,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"1563:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1554:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3352,"name":"luckyEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3690,"src":"1567:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1554:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1527:48:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3366,"nodeType":"IfStatement","src":"1524:128:12","trueBody":{"id":3365,"nodeType":"Block","src":"1577:75:12","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3360,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"1625:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3362,"indexExpression":{"id":3361,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"1634:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1625:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":3355,"name":"userToRareIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"1594:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":3358,"indexExpression":{"expression":{"id":3356,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1608:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1612:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1608:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1594:25:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1620:4:12","memberName":"push","nodeType":"MemberAccess","src":"1594:30:12","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":3363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1594:43:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3364,"nodeType":"ExpressionStatement","src":"1594:43:12"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3337,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"1484:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3338,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"1488:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1497:6:12","memberName":"length","nodeType":"MemberAccess","src":"1488:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1484:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3368,"initializationExpression":{"assignments":[3334],"declarations":[{"constant":false,"id":3334,"mutability":"mutable","name":"i","nameLocation":"1477:1:12","nodeType":"VariableDeclaration","scope":3368,"src":"1472:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3333,"name":"uint","nodeType":"ElementaryTypeName","src":"1472:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3336,"initialValue":{"hexValue":"30","id":3335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1481:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1472:10:12"},"loopExpression":{"expression":{"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1505:3:12","subExpression":{"id":3341,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"1505:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3343,"nodeType":"ExpressionStatement","src":"1505:3:12"},"nodeType":"ForStatement","src":"1468:194:12"},{"expression":{"arguments":[{"expression":{"id":3372,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1683:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1687:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1683:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3374,"name":"voucher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"1695:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":3375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1704:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"","id":3376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3369,"name":"hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"1671:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1678:4:12","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":3656,"src":"1671:11:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory) external"}},"id":3377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3378,"nodeType":"ExpressionStatement","src":"1671:39:12"}]},"functionSelector":"1b2ef1ca","id":3380,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"714:4:12","nodeType":"FunctionDefinition","parameters":{"id":3222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3219,"mutability":"mutable","name":"id","nameLocation":"727:2:12","nodeType":"VariableDeclaration","scope":3380,"src":"719:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3218,"name":"uint256","nodeType":"ElementaryTypeName","src":"719:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3221,"mutability":"mutable","name":"amount","nameLocation":"739:6:12","nodeType":"VariableDeclaration","scope":3380,"src":"731:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3220,"name":"uint256","nodeType":"ElementaryTypeName","src":"731:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"718:28:12"},"returnParameters":{"id":3223,"nodeType":"ParameterList","parameters":[],"src":"754:0:12"},"scope":3612,"src":"705:1012:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3392,"nodeType":"Block","src":"1836:42:12","statements":[{"expression":{"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3388,"name":"baseMetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3684,"src":"1846:15:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3389,"name":"baseUri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3383,"src":"1864:7:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1846:25:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3391,"nodeType":"ExpressionStatement","src":"1846:25:12"}]},"documentation":{"id":3381,"nodeType":"StructuredDocumentation","src":"1723:46:12","text":" Sets a new baseURI for NFT."},"functionSelector":"a0bcfc7f","id":3393,"implemented":true,"kind":"function","modifiers":[{"id":3386,"kind":"modifierInvocation","modifierName":{"id":3385,"name":"onlyOwner","nameLocations":["1826:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":3217,"src":"1826:9:12"},"nodeType":"ModifierInvocation","src":"1826:9:12"}],"name":"setBaseUri","nameLocation":"1783:10:12","nodeType":"FunctionDefinition","parameters":{"id":3384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3383,"mutability":"mutable","name":"baseUri","nameLocation":"1808:7:12","nodeType":"VariableDeclaration","scope":3393,"src":"1794:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3382,"name":"string","nodeType":"ElementaryTypeName","src":"1794:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1793:23:12"},"returnParameters":{"id":3387,"nodeType":"ParameterList","parameters":[],"src":"1836:0:12"},"scope":3612,"src":"1774:104:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2335],"body":{"id":3413,"nodeType":"Block","src":"2076:85:12","statements":[{"expression":{"arguments":[{"arguments":[{"id":3406,"name":"baseMetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3684,"src":"2117:15:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"arguments":[{"id":3408,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"2144:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3407,"name":"_uint2str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"2134:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2134:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3404,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2100:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2104:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"2100:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2100:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2093:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3402,"name":"string","nodeType":"ElementaryTypeName","src":"2093:6:12","typeDescriptions":{}}},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2093:61:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3401,"id":3412,"nodeType":"Return","src":"2086:68:12"}]},"documentation":{"id":3394,"nodeType":"StructuredDocumentation","src":"1884:55:12","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":3414,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1953:8:12","nodeType":"FunctionDefinition","overrides":{"id":3398,"nodeType":"OverrideSpecifier","overrides":[],"src":"2031:8:12"},"parameters":{"id":3397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3396,"mutability":"mutable","name":"tokenId","nameLocation":"1970:7:12","nodeType":"VariableDeclaration","scope":3414,"src":"1962:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3395,"name":"uint256","nodeType":"ElementaryTypeName","src":"1962:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1961:17:12"},"returnParameters":{"id":3401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3414,"src":"2057:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3399,"name":"string","nodeType":"ElementaryTypeName","src":"2057:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2056:15:12"},"scope":3612,"src":"1944:217:12","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3425,"nodeType":"Block","src":"2228:41:12","statements":[{"expression":{"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3421,"name":"passIdBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"2238:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3422,"name":"_passIdBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3416,"src":"2251:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2238:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3424,"nodeType":"ExpressionStatement","src":"2238:24:12"}]},"functionSelector":"89be0ad1","id":3426,"implemented":true,"kind":"function","modifiers":[{"id":3419,"kind":"modifierInvocation","modifierName":{"id":3418,"name":"onlyOwner","nameLocations":["2218:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":3217,"src":"2218:9:12"},"nodeType":"ModifierInvocation","src":"2218:9:12"}],"name":"setPassIdBase","nameLocation":"2176:13:12","nodeType":"FunctionDefinition","parameters":{"id":3417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3416,"mutability":"mutable","name":"_passIdBase","nameLocation":"2198:11:12","nodeType":"VariableDeclaration","scope":3426,"src":"2190:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3415,"name":"uint256","nodeType":"ElementaryTypeName","src":"2190:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2189:21:12"},"returnParameters":{"id":3420,"nodeType":"ParameterList","parameters":[],"src":"2228:0:12"},"scope":3612,"src":"2167:102:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3437,"nodeType":"Block","src":"2324:29:12","statements":[{"expression":{"id":3435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3433,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"2334:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3434,"name":"_base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"2341:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2334:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3436,"nodeType":"ExpressionStatement","src":"2334:12:12"}]},"functionSelector":"38e80f68","id":3438,"implemented":true,"kind":"function","modifiers":[{"id":3431,"kind":"modifierInvocation","modifierName":{"id":3430,"name":"onlyOwner","nameLocations":["2314:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":3217,"src":"2314:9:12"},"nodeType":"ModifierInvocation","src":"2314:9:12"}],"name":"setBase","nameLocation":"2284:7:12","nodeType":"FunctionDefinition","parameters":{"id":3429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3428,"mutability":"mutable","name":"_base","nameLocation":"2300:5:12","nodeType":"VariableDeclaration","scope":3438,"src":"2292:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3427,"name":"uint256","nodeType":"ElementaryTypeName","src":"2292:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2291:15:12"},"returnParameters":{"id":3432,"nodeType":"ParameterList","parameters":[],"src":"2324:0:12"},"scope":3612,"src":"2275:78:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3450,"nodeType":"Block","src":"2412:33:12","statements":[{"expression":{"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3446,"name":"hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"2422:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3447,"name":"_hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3441,"src":"2431:7:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"src":"2422:16:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"id":3449,"nodeType":"ExpressionStatement","src":"2422:16:12"}]},"functionSelector":"0178f6b9","id":3451,"implemented":true,"kind":"function","modifiers":[{"id":3444,"kind":"modifierInvocation","modifierName":{"id":3443,"name":"onlyOwner","nameLocations":["2402:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":3217,"src":"2402:9:12"},"nodeType":"ModifierInvocation","src":"2402:9:12"}],"name":"setHValue","nameLocation":"2368:9:12","nodeType":"FunctionDefinition","parameters":{"id":3442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3441,"mutability":"mutable","name":"_hValue","nameLocation":"2386:7:12","nodeType":"VariableDeclaration","scope":3451,"src":"2378:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"},"typeName":{"id":3440,"nodeType":"UserDefinedTypeName","pathNode":{"id":3439,"name":"IHValue","nameLocations":["2378:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3664,"src":"2378:7:12"},"referencedDeclaration":3664,"src":"2378:7:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"visibility":"internal"}],"src":"2377:17:12"},"returnParameters":{"id":3445,"nodeType":"ParameterList","parameters":[],"src":"2412:0:12"},"scope":3612,"src":"2359:86:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3545,"nodeType":"Block","src":"2520:487:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3458,"name":"_i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"2534:2:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2540:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2534:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3464,"nodeType":"IfStatement","src":"2530:48:12","trueBody":{"id":3463,"nodeType":"Block","src":"2543:35:12","statements":[{"expression":{"hexValue":"30","id":3461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2564:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"functionReturnParameters":3457,"id":3462,"nodeType":"Return","src":"2557:10:12"}]}},{"assignments":[3466],"declarations":[{"constant":false,"id":3466,"mutability":"mutable","name":"j","nameLocation":"2595:1:12","nodeType":"VariableDeclaration","scope":3545,"src":"2587:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3465,"name":"uint256","nodeType":"ElementaryTypeName","src":"2587:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3468,"initialValue":{"id":3467,"name":"_i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"2599:2:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2587:14:12"},{"assignments":[3470],"declarations":[{"constant":false,"id":3470,"mutability":"mutable","name":"len","nameLocation":"2619:3:12","nodeType":"VariableDeclaration","scope":3545,"src":"2611:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3469,"name":"uint256","nodeType":"ElementaryTypeName","src":"2611:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3471,"nodeType":"VariableDeclarationStatement","src":"2611:11:12"},{"body":{"id":3482,"nodeType":"Block","src":"2647:51:12","statements":[{"expression":{"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2661:5:12","subExpression":{"id":3475,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"2661:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3477,"nodeType":"ExpressionStatement","src":"2661:5:12"},{"expression":{"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3478,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"2680:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2685:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"2680:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3481,"nodeType":"ExpressionStatement","src":"2680:7:12"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3472,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"2639:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2644:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2639:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3483,"nodeType":"WhileStatement","src":"2632:66:12"},{"assignments":[3485],"declarations":[{"constant":false,"id":3485,"mutability":"mutable","name":"bStr","nameLocation":"2720:4:12","nodeType":"VariableDeclaration","scope":3545,"src":"2707:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3484,"name":"bytes","nodeType":"ElementaryTypeName","src":"2707:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3490,"initialValue":{"arguments":[{"id":3488,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"2737:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2727:9:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3486,"name":"bytes","nodeType":"ElementaryTypeName","src":"2731:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2727:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2707:34:12"},{"assignments":[3492],"declarations":[{"constant":false,"id":3492,"mutability":"mutable","name":"k","nameLocation":"2759:1:12","nodeType":"VariableDeclaration","scope":3545,"src":"2751:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3491,"name":"uint256","nodeType":"ElementaryTypeName","src":"2751:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3494,"initialValue":{"id":3493,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"2763:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2751:15:12"},{"body":{"id":3538,"nodeType":"Block","src":"2792:180:12","statements":[{"expression":{"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3498,"name":"k","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"2806:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3499,"name":"k","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"2810:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2814:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2810:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2806:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3503,"nodeType":"ExpressionStatement","src":"2806:9:12"},{"assignments":[3505],"declarations":[{"constant":false,"id":3505,"mutability":"mutable","name":"temp","nameLocation":"2835:4:12","nodeType":"VariableDeclaration","scope":3538,"src":"2829:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3504,"name":"uint8","nodeType":"ElementaryTypeName","src":"2829:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3520,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":3506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2843:2:12","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3509,"name":"_i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"2854:2:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3510,"name":"_i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"2860:2:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130","id":3511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2865:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"2860:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3513,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2859:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3130","id":3514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2871:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"2859:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2854:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2848:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3507,"name":"uint8","nodeType":"ElementaryTypeName","src":"2848:5:12","typeDescriptions":{}}},"id":3517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2848:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2843:31:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3519,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2842:33:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"2829:46:12"},{"assignments":[3522],"declarations":[{"constant":false,"id":3522,"mutability":"mutable","name":"b1","nameLocation":"2896:2:12","nodeType":"VariableDeclaration","scope":3538,"src":"2889:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":3521,"name":"bytes1","nodeType":"ElementaryTypeName","src":"2889:6:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":3527,"initialValue":{"arguments":[{"id":3525,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3505,"src":"2908:4:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2901:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":3523,"name":"bytes1","nodeType":"ElementaryTypeName","src":"2901:6:12","typeDescriptions":{}}},"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"2889:24:12"},{"expression":{"id":3532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3528,"name":"bStr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"2927:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3530,"indexExpression":{"id":3529,"name":"k","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"2932:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2927:7:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3531,"name":"b1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"2937:2:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2927:12:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3533,"nodeType":"ExpressionStatement","src":"2927:12:12"},{"expression":{"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3534,"name":"_i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"2953:2:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2959:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"2953:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3537,"nodeType":"ExpressionStatement","src":"2953:8:12"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3495,"name":"_i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"2783:2:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2789:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2783:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3539,"nodeType":"WhileStatement","src":"2776:196:12"},{"expression":{"arguments":[{"id":3542,"name":"bStr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"2995:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2988:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3540,"name":"string","nodeType":"ElementaryTypeName","src":"2988:6:12","typeDescriptions":{}}},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2988:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3457,"id":3544,"nodeType":"Return","src":"2981:19:12"}]},"id":3546,"implemented":true,"kind":"function","modifiers":[],"name":"_uint2str","nameLocation":"2460:9:12","nodeType":"FunctionDefinition","parameters":{"id":3454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3453,"mutability":"mutable","name":"_i","nameLocation":"2478:2:12","nodeType":"VariableDeclaration","scope":3546,"src":"2470:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3452,"name":"uint256","nodeType":"ElementaryTypeName","src":"2470:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2469:12:12"},"returnParameters":{"id":3457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3546,"src":"2505:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3455,"name":"string","nodeType":"ElementaryTypeName","src":"2505:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2504:15:12"},"scope":3612,"src":"2451:556:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"baseFunctions":[2607],"body":{"id":3597,"nodeType":"Block","src":"3113:336:12","statements":[{"expression":{"arguments":[{"arguments":[{"id":3558,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"3139:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3557,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"3131:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3131:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e","id":3560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3149:46:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c","typeString":"literal_string \"ERC721: operator query for nonexistent token\""},"value":"ERC721: operator query for nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c","typeString":"literal_string \"ERC721: operator query for nonexistent token\""}],"id":3556,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3123:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3123:73:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3562,"nodeType":"ExpressionStatement","src":"3123:73:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3563,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3209:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3213:6:12","memberName":"sender","nodeType":"MemberAccess","src":"3209:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3567,"name":"hValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"3231:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}],"id":3566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3223:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3565,"name":"address","nodeType":"ElementaryTypeName","src":"3223:7:12","typeDescriptions":{}}},"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3223:15:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3209:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3573,"nodeType":"IfStatement","src":"3206:70:12","trueBody":{"id":3572,"nodeType":"Block","src":"3240:36:12","statements":[{"expression":{"hexValue":"74727565","id":3570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3261:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3555,"id":3571,"nodeType":"Return","src":"3254:11:12"}]}},{"assignments":[3575],"declarations":[{"constant":false,"id":3575,"mutability":"mutable","name":"owner","nameLocation":"3293:5:12","nodeType":"VariableDeclaration","scope":3597,"src":"3285:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3574,"name":"address","nodeType":"ElementaryTypeName","src":"3285:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3580,"initialValue":{"arguments":[{"id":3578,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"3328:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3576,"name":"ERC721rUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"3301:18:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721rUpgradeable_$3154_$","typeString":"type(contract ERC721rUpgradeable)"}},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3320:7:12","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"3301:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3301:35:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3285:51:12"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3581,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"3354:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3582,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"3365:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3354:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3585,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"3386:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3584,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"3374:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3374:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3587,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"3398:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3374:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3354:51:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3591,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"3426:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3592,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"3433:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3590,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"3409:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3409:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3354:87:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3595,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3353:89:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3555,"id":3596,"nodeType":"Return","src":"3346:96:12"}]},"id":3598,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"3022:18:12","nodeType":"FunctionDefinition","overrides":{"id":3552,"nodeType":"OverrideSpecifier","overrides":[],"src":"3089:8:12"},"parameters":{"id":3551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3548,"mutability":"mutable","name":"spender","nameLocation":"3049:7:12","nodeType":"VariableDeclaration","scope":3598,"src":"3041:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3547,"name":"address","nodeType":"ElementaryTypeName","src":"3041:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3550,"mutability":"mutable","name":"tokenId","nameLocation":"3066:7:12","nodeType":"VariableDeclaration","scope":3598,"src":"3058:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3549,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3040:34:12"},"returnParameters":{"id":3555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3598,"src":"3107:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3553,"name":"bool","nodeType":"ElementaryTypeName","src":"3107:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3106:6:12"},"scope":3612,"src":"3013:436:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3610,"nodeType":"Block","src":"3531:43:12","statements":[{"expression":{"baseExpression":{"id":3606,"name":"userToRareIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"3548:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":3608,"indexExpression":{"id":3607,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"3562:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3548:19:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"functionReturnParameters":3605,"id":3609,"nodeType":"Return","src":"3541:26:12"}]},"functionSelector":"bfc52443","id":3611,"implemented":true,"kind":"function","modifiers":[],"name":"getUserToRareIds","nameLocation":"3464:16:12","nodeType":"FunctionDefinition","parameters":{"id":3601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3600,"mutability":"mutable","name":"user","nameLocation":"3489:4:12","nodeType":"VariableDeclaration","scope":3611,"src":"3481:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3599,"name":"address","nodeType":"ElementaryTypeName","src":"3481:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3480:14:12"},"returnParameters":{"id":3605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3604,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3611,"src":"3516:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3602,"name":"uint","nodeType":"ElementaryTypeName","src":"3516:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3603,"nodeType":"ArrayTypeName","src":"3516:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3515:15:12"},"scope":3612,"src":"3455:119:12","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3613,"src":"125:3451:12","usedErrors":[]}],"src":"32:3545:12"},"id":12},"contracts/HashPunkStorage.sol":{"ast":{"absolutePath":"contracts/HashPunkStorage.sol","exportedSymbols":{"HashPunkStorage":[3696],"IHValue":[3664]},"id":3697,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3614,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"32:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IHValue","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3664,"linearizedBaseContracts":[3664],"name":"IHValue","nameLocation":"68:7:13","nodeType":"ContractDefinition","nodes":[{"functionSelector":"00fdd58e","id":3623,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"92:9:13","nodeType":"FunctionDefinition","parameters":{"id":3619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3616,"mutability":"mutable","name":"account","nameLocation":"110:7:13","nodeType":"VariableDeclaration","scope":3623,"src":"102:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3615,"name":"address","nodeType":"ElementaryTypeName","src":"102:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3618,"mutability":"mutable","name":"id","nameLocation":"127:2:13","nodeType":"VariableDeclaration","scope":3623,"src":"119:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3617,"name":"uint256","nodeType":"ElementaryTypeName","src":"119:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"101:29:13"},"returnParameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3623,"src":"178:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3620,"name":"uint256","nodeType":"ElementaryTypeName","src":"178:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"177:9:13"},"scope":3664,"src":"83:104:13","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f242432a","id":3636,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"202:16:13","nodeType":"FunctionDefinition","parameters":{"id":3634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3625,"mutability":"mutable","name":"from","nameLocation":"236:4:13","nodeType":"VariableDeclaration","scope":3636,"src":"228:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3624,"name":"address","nodeType":"ElementaryTypeName","src":"228:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3627,"mutability":"mutable","name":"to","nameLocation":"258:2:13","nodeType":"VariableDeclaration","scope":3636,"src":"250:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3626,"name":"address","nodeType":"ElementaryTypeName","src":"250:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3629,"mutability":"mutable","name":"id","nameLocation":"278:2:13","nodeType":"VariableDeclaration","scope":3636,"src":"270:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3628,"name":"uint256","nodeType":"ElementaryTypeName","src":"270:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3631,"mutability":"mutable","name":"amount","nameLocation":"298:6:13","nodeType":"VariableDeclaration","scope":3636,"src":"290:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3630,"name":"uint256","nodeType":"ElementaryTypeName","src":"290:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3633,"mutability":"mutable","name":"data","nameLocation":"329:4:13","nodeType":"VariableDeclaration","scope":3636,"src":"314:19:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3632,"name":"bytes","nodeType":"ElementaryTypeName","src":"314:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"218:121:13"},"returnParameters":{"id":3635,"nodeType":"ParameterList","parameters":[],"src":"348:0:13"},"scope":3664,"src":"193:156:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f5298aca","id":3645,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"364:4:13","nodeType":"FunctionDefinition","parameters":{"id":3643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3638,"mutability":"mutable","name":"from","nameLocation":"386:4:13","nodeType":"VariableDeclaration","scope":3645,"src":"378:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3637,"name":"address","nodeType":"ElementaryTypeName","src":"378:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3640,"mutability":"mutable","name":"tokenId","nameLocation":"408:7:13","nodeType":"VariableDeclaration","scope":3645,"src":"400:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3639,"name":"uint256","nodeType":"ElementaryTypeName","src":"400:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3642,"mutability":"mutable","name":"amount","nameLocation":"433:6:13","nodeType":"VariableDeclaration","scope":3645,"src":"425:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3641,"name":"uint256","nodeType":"ElementaryTypeName","src":"425:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"368:77:13"},"returnParameters":{"id":3644,"nodeType":"ParameterList","parameters":[],"src":"454:0:13"},"scope":3664,"src":"355:100:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"731133e9","id":3656,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"470:4:13","nodeType":"FunctionDefinition","parameters":{"id":3654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3647,"mutability":"mutable","name":"to","nameLocation":"492:2:13","nodeType":"VariableDeclaration","scope":3656,"src":"484:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3646,"name":"address","nodeType":"ElementaryTypeName","src":"484:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3649,"mutability":"mutable","name":"tokenId","nameLocation":"512:7:13","nodeType":"VariableDeclaration","scope":3656,"src":"504:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3648,"name":"uint256","nodeType":"ElementaryTypeName","src":"504:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3651,"mutability":"mutable","name":"amount","nameLocation":"537:6:13","nodeType":"VariableDeclaration","scope":3656,"src":"529:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3650,"name":"uint256","nodeType":"ElementaryTypeName","src":"529:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3653,"mutability":"mutable","name":"data","nameLocation":"566:4:13","nodeType":"VariableDeclaration","scope":3656,"src":"553:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3652,"name":"bytes","nodeType":"ElementaryTypeName","src":"553:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"474:102:13"},"returnParameters":{"id":3655,"nodeType":"ParameterList","parameters":[],"src":"585:0:13"},"scope":3664,"src":"461:125:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4c25e11f","id":3663,"implemented":false,"kind":"function","modifiers":[],"name":"negtiveValue","nameLocation":"601:12:13","nodeType":"FunctionDefinition","parameters":{"id":3659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3658,"mutability":"mutable","name":"_address","nameLocation":"622:8:13","nodeType":"VariableDeclaration","scope":3663,"src":"614:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3657,"name":"address","nodeType":"ElementaryTypeName","src":"614:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"613:18:13"},"returnParameters":{"id":3662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3661,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3663,"src":"655:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3660,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:9:13"},"scope":3664,"src":"592:72:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3697,"src":"58:608:13","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"HashPunkStorage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3696,"linearizedBaseContracts":[3696],"name":"HashPunkStorage","nameLocation":"677:15:13","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"444b7aaf","id":3667,"mutability":"constant","name":"passId","nameLocation":"723:6:13","nodeType":"VariableDeclaration","scope":3696,"src":"699:35:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3665,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":3666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"733:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"functionSelector":"83d18f7a","id":3670,"mutability":"constant","name":"Hpoint","nameLocation":"764:6:13","nodeType":"VariableDeclaration","scope":3696,"src":"740:35:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3668,"name":"uint256","nodeType":"ElementaryTypeName","src":"740:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":3669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"774:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"public"},{"constant":true,"functionSelector":"cdda418c","id":3673,"mutability":"constant","name":"voucher","nameLocation":"805:7:13","nodeType":"VariableDeclaration","scope":3696,"src":"781:35:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3671,"name":"uint256","nodeType":"ElementaryTypeName","src":"781:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":3672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"815:1:13","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":false,"functionSelector":"80893c17","id":3675,"mutability":"mutable","name":"passIdBase","nameLocation":"846:10:13","nodeType":"VariableDeclaration","scope":3696,"src":"822:34:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3674,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"5001f3b5","id":3677,"mutability":"mutable","name":"base","nameLocation":"886:4:13","nodeType":"VariableDeclaration","scope":3696,"src":"862:28:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3676,"name":"uint256","nodeType":"ElementaryTypeName","src":"862:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"9332c9a5","id":3680,"mutability":"mutable","name":"hValue","nameLocation":"920:6:13","nodeType":"VariableDeclaration","scope":3696,"src":"896:30:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"},"typeName":{"id":3679,"nodeType":"UserDefinedTypeName","pathNode":{"id":3678,"name":"IHValue","nameLocations":["896:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":3664,"src":"896:7:13"},"referencedDeclaration":3664,"src":"896:7:13","typeDescriptions":{"typeIdentifier":"t_contract$_IHValue_$3664","typeString":"contract IHValue"}},"visibility":"public"},{"constant":false,"functionSelector":"8da5cb5b","id":3682,"mutability":"mutable","name":"owner","nameLocation":"956:5:13","nodeType":"VariableDeclaration","scope":3696,"src":"932:29:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3681,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"5b2bd79e","id":3684,"mutability":"mutable","name":"baseMetadataURI","nameLocation":"991:15:13","nodeType":"VariableDeclaration","scope":3696,"src":"967:39:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3683,"name":"string","nodeType":"ElementaryTypeName","src":"967:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"0e471525","id":3687,"mutability":"mutable","name":"luckyStart","nameLocation":"1036:10:13","nodeType":"VariableDeclaration","scope":3696,"src":"1012:44:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3685,"name":"uint256","nodeType":"ElementaryTypeName","src":"1012:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":3686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1055:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":false,"functionSelector":"f7e056ee","id":3690,"mutability":"mutable","name":"luckyEnd","nameLocation":"1086:8:13","nodeType":"VariableDeclaration","scope":3696,"src":"1062:46:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3688,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353030","id":3689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1105:3:13","typeDescriptions":{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"},"value":"500"},"visibility":"public"},{"constant":false,"functionSelector":"a8a86457","id":3695,"mutability":"mutable","name":"userToRareIds","nameLocation":"1148:13:13","nodeType":"VariableDeclaration","scope":3696,"src":"1114:47:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"typeName":{"id":3694,"keyType":{"id":3691,"name":"address","nodeType":"ElementaryTypeName","src":"1122:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1114:26:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"valueType":{"baseType":{"id":3692,"name":"uint","nodeType":"ElementaryTypeName","src":"1133:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3693,"nodeType":"ArrayTypeName","src":"1133:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"public"}],"scope":3697,"src":"668:496:13","usedErrors":[]}],"src":"32:1132:13"},"id":13}},"contracts":{"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":9,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol":{"IERC721ReceiverUpgradeable":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":\"IERC721ReceiverUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol":{"IERC721Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":\"IERC721Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol":{"IERC721MetadataUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":\"IERC721MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eae6293f20f60487b38e04fe85a3ddce718a1e806544baafb89b2fc191a6381164736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA 0xE6 0x29 EXTCODEHASH KECCAK256 0xF6 DIV DUP8 0xB3 DUP15 DIV INVALID DUP6 LOG3 0xDD 0xCE PUSH18 0x8A1E806544BAAFB89B2FC191A6381164736F PUSH13 0x63430008110033000000000000 ","sourceMap":"194:8087:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8087:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eae6293f20f60487b38e04fe85a3ddce718a1e806544baafb89b2fc191a6381164736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA 0xE6 0x29 EXTCODEHASH KECCAK256 0xF6 DIV DUP8 0xB3 DUP15 DIV INVALID DUP6 LOG3 0xDD 0xCE PUSH18 0x8A1E806544BAAFB89B2FC191A6381164736F PUSH13 0x63430008110033000000000000 ","sourceMap":"194:8087:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":9,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":654,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":9,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":698,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200adb4f3f7178b8e511d8b1d15f94e47a2d1598d2d1f9b4ba38d5ef126a52024e64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xDB 0x4F EXTCODEHASH PUSH18 0x78B8E511D8B1D15F94E47A2D1598D2D1F9B4 0xBA CODESIZE 0xD5 0xEF SLT PUSH11 0x52024E64736F6C63430008 GT STOP CALLER ","sourceMap":"194:8964:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200adb4f3f7178b8e511d8b1d15f94e47a2d1598d2d1f9b4ba38d5ef126a52024e64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xDB 0x4F EXTCODEHASH PUSH18 0x78B8E511D8B1D15F94E47A2D1598D2D1F9B4 0xBA CODESIZE 0xD5 0xEF SLT PUSH11 0x52024E64736F6C63430008 GT STOP CALLER ","sourceMap":"194:8964:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202480e6c580649581670d8f3ab7e1a31eac5b397935413b6cfa52683b904c60b664736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 DUP1 0xE6 0xC5 DUP1 PUSH5 0x9581670D8F GASPRICE 0xB7 0xE1 LOG3 0x1E 0xAC JUMPDEST CODECOPY PUSH26 0x35413B6CFA52683B904C60B664736F6C63430008110033000000 ","sourceMap":"188:2065:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;188:2065:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202480e6c580649581670d8f3ab7e1a31eac5b397935413b6cfa52683b904c60b664736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 DUP1 0xE6 0xC5 DUP1 PUSH5 0x9581670D8F GASPRICE 0xB7 0xE1 LOG3 0x1E 0xAC JUMPDEST CODECOPY PUSH26 0x35413B6CFA52683B904C60B664736F6C63430008110033000000 ","sourceMap":"188:2065:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220535276f603c63551ea15da16fbe8483a3d8a0a26bb6b21d2e7c005f08420f23664736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 MSTORE PUSH23 0xF603C63551EA15DA16FBE8483A3D8A0A26BB6B21D2E7C0 SDIV CREATE DUP5 KECCAK256 CALLCODE CALLDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12302:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12302:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220535276f603c63551ea15da16fbe8483a3d8a0a26bb6b21d2e7c005f08420f23664736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 MSTORE PUSH23 0xF603C63551EA15DA16FBE8483A3D8A0A26BB6B21D2E7C0 SDIV CREATE DUP5 KECCAK256 CALLCODE CALLDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12302:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC721rUpgradeable.sol":{"ERC721rUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension. This does random batch minting.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506111fe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636352211e11610097578063b88d4fde11610066578063b88d4fde1461020a578063c87b56dd1461021d578063d5abeb0114610230578063e985e9c51461023857600080fd5b80636352211e146101b357806370a08231146101dc57806395d89b41146101ef578063a22cb465146101f757600080fd5b8063095ea7b3116100d3578063095ea7b31461016257806318160ddd1461017757806323b872dd1461018d57806342842e0e146101a057600080fd5b806301ffc9a7146100fa57806306fdde0314610122578063081812fc14610137575b600080fd5b61010d610108366004610d8f565b61024b565b60405190151581526020015b60405180910390f35b61012a61029d565b6040516101199190610dfc565b61014a610145366004610e0f565b61032f565b6040516001600160a01b039091168152602001610119565b610175610170366004610e44565b6103c9565b005b61017f6104dc565b604051908152602001610119565b61017561019b366004610e6e565b6104f3565b6101756101ae366004610e6e565b610524565b61014a6101c1366004610e0f565b6000908152606a60205260409020546001600160a01b031690565b61017f6101ea366004610eaa565b61053f565b61012a6105c6565b610175610205366004610ec5565b6105d5565b610175610218366004610f17565b6105e4565b61012a61022b366004610e0f565b61061c565b60695461017f565b61010d610246366004610ff3565b610704565b60006001600160e01b031982166380ac58cd60e01b148061027c57506001600160e01b03198216635b5e139f60e01b145b8061029757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060606580546102ac90611026565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890611026565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b6000818152606a60205260408120546001600160a01b03166103ad5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606c60205260409020546001600160a01b031690565b6000818152606a60205260409020546001600160a01b0390811690831681900361043f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016103a4565b336001600160a01b038216148061045b575061045b8133610704565b6104cd5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016103a4565b6104d78383610732565b505050565b60006068546069546104ee9190611076565b905090565b6104fd3382610799565b6105195760405162461bcd60e51b81526004016103a490611089565b6104d783838361086d565b6104d7838383604051806020016040528060008152506105e4565b60006001600160a01b0382166105aa5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016103a4565b506001600160a01b03166000908152606b602052604090205490565b6060606680546102ac90611026565b6105e0338383610a09565b5050565b6105ee3383610799565b61060a5760405162461bcd60e51b81526004016103a490611089565b61061684848484610ad7565b50505050565b6000818152606a60205260409020546060906001600160a01b031661069b5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016103a4565b60006106b260408051602081019091526000815290565b905060008151116106d257604051806020016040528060008152506106fd565b806106dc84610b0a565b6040516020016106ed9291906110da565b6040516020818303038152906040525b9392505050565b6001600160a01b039182166000908152606d6020908152604080832093909416825291909152205460ff1690565b6000818152606c6020908152604080832080546001600160a01b0319166001600160a01b03878116918217909255606a909352818420549151859492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b6000818152606a60205260408120546001600160a01b03166108125760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016103a4565b6000828152606a60205260409020546001600160a01b039081169084168114806108555750836001600160a01b031661084a8461032f565b6001600160a01b0316145b8061086557506108658185610704565b949350505050565b6000818152606a60205260409020546001600160a01b038481169116146108e45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016103a4565b6001600160a01b0382166109465760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103a4565b610951600082610732565b6001600160a01b0383166000908152606b6020526040812080546001929061097a908490611076565b90915550506001600160a01b0382166000908152606b602052604081208054600192906109a8908490611109565b90915550506000818152606a602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b031603610a6a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103a4565b6001600160a01b038381166000818152606d6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610ae284848461086d565b610aee84848484610b9d565b6106165760405162461bcd60e51b81526004016103a49061111c565b60606000610b1783610c9e565b600101905060008167ffffffffffffffff811115610b3757610b37610f01565b6040519080825280601f01601f191660200182016040528015610b61576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610b6b57509392505050565b60006001600160a01b0384163b15610c9357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610be190339089908890889060040161116e565b6020604051808303816000875af1925050508015610c1c575060408051601f3d908101601f19168201909252610c19918101906111ab565b60015b610c79573d808015610c4a576040519150601f19603f3d011682016040523d82523d6000602084013e610c4f565b606091505b508051600003610c715760405162461bcd60e51b81526004016103a49061111c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610865565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610cdd5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610d09576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610d2757662386f26fc10000830492506010015b6305f5e1008310610d3f576305f5e100830492506008015b6127108310610d5357612710830492506004015b60648310610d65576064830492506002015b600a83106102975760010192915050565b6001600160e01b031981168114610d8c57600080fd5b50565b600060208284031215610da157600080fd5b81356106fd81610d76565b60005b83811015610dc7578181015183820152602001610daf565b50506000910152565b60008151808452610de8816020860160208601610dac565b601f01601f19169290920160200192915050565b6020815260006106fd6020830184610dd0565b600060208284031215610e2157600080fd5b5035919050565b80356001600160a01b0381168114610e3f57600080fd5b919050565b60008060408385031215610e5757600080fd5b610e6083610e28565b946020939093013593505050565b600080600060608486031215610e8357600080fd5b610e8c84610e28565b9250610e9a60208501610e28565b9150604084013590509250925092565b600060208284031215610ebc57600080fd5b6106fd82610e28565b60008060408385031215610ed857600080fd5b610ee183610e28565b915060208301358015158114610ef657600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610f2d57600080fd5b610f3685610e28565b9350610f4460208601610e28565b925060408501359150606085013567ffffffffffffffff80821115610f6857600080fd5b818701915087601f830112610f7c57600080fd5b813581811115610f8e57610f8e610f01565b604051601f8201601f19908116603f01168101908382118183101715610fb657610fb6610f01565b816040528281528a6020848701011115610fcf57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561100657600080fd5b61100f83610e28565b915061101d60208401610e28565b90509250929050565b600181811c9082168061103a57607f821691505b60208210810361105a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561029757610297611060565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600083516110ec818460208801610dac565b835190830190611100818360208801610dac565b01949350505050565b8082018082111561029757610297611060565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906111a190830184610dd0565b9695505050505050565b6000602082840312156111bd57600080fd5b81516106fd81610d7656fea264697066735822122049a5ed43249e9e15c9b91ecd94671e88a1bb2fd1a7a2cb722a993be51388071864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11FE DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0xD5ABEB01 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x18D JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x137 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xD8F JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0xDFC JUMP JUMPDEST PUSH2 0x14A PUSH2 0x145 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x170 CALLDATASIZE PUSH1 0x4 PUSH2 0xE44 JUMP JUMPDEST PUSH2 0x3C9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17F PUSH2 0x4DC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0xE6E JUMP JUMPDEST PUSH2 0x4F3 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x1AE CALLDATASIZE PUSH1 0x4 PUSH2 0xE6E JUMP JUMPDEST PUSH2 0x524 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x17F PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0xEAA JUMP JUMPDEST PUSH2 0x53F JUMP JUMPDEST PUSH2 0x12A PUSH2 0x5C6 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xEC5 JUMP JUMPDEST PUSH2 0x5D5 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0xF17 JUMP JUMPDEST PUSH2 0x5E4 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x61C JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH2 0x17F JUMP JUMPDEST PUSH2 0x10D PUSH2 0x246 CALLDATASIZE PUSH1 0x4 PUSH2 0xFF3 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x27C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x297 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x65 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0x1026 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2D8 SWAP1 PUSH2 0x1026 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x325 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2FA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x325 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x308 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 SWAP1 SUB PUSH2 0x43F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x45B JUMPI POP PUSH2 0x45B DUP2 CALLER PUSH2 0x704 JUMP JUMPDEST PUSH2 0x4CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH2 0x4D7 DUP4 DUP4 PUSH2 0x732 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x68 SLOAD PUSH1 0x69 SLOAD PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0x1076 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x4FD CALLER DUP3 PUSH2 0x799 JUMP JUMPDEST PUSH2 0x519 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A4 SWAP1 PUSH2 0x1089 JUMP JUMPDEST PUSH2 0x4D7 DUP4 DUP4 DUP4 PUSH2 0x86D JUMP JUMPDEST PUSH2 0x4D7 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x5E4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x66 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0x1026 JUMP JUMPDEST PUSH2 0x5E0 CALLER DUP4 DUP4 PUSH2 0xA09 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5EE CALLER DUP4 PUSH2 0x799 JUMP JUMPDEST PUSH2 0x60A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A4 SWAP1 PUSH2 0x1089 JUMP JUMPDEST PUSH2 0x616 DUP5 DUP5 DUP5 DUP5 PUSH2 0xAD7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x69B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B2 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x6D2 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x6FD JUMP JUMPDEST DUP1 PUSH2 0x6DC DUP5 PUSH2 0xB0A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6ED SWAP3 SWAP2 SWAP1 PUSH2 0x10DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x6A SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD SWAP2 MLOAD DUP6 SWAP5 SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND DUP2 EQ DUP1 PUSH2 0x855 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x84A DUP5 PUSH2 0x32F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x865 JUMPI POP PUSH2 0x865 DUP2 DUP6 PUSH2 0x704 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ PUSH2 0x8E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x946 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH2 0x951 PUSH1 0x0 DUP3 PUSH2 0x732 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x97A SWAP1 DUP5 SWAP1 PUSH2 0x1076 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x9A8 SWAP1 DUP5 SWAP1 PUSH2 0x1109 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xA6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xAE2 DUP5 DUP5 DUP5 PUSH2 0x86D JUMP JUMPDEST PUSH2 0xAEE DUP5 DUP5 DUP5 DUP5 PUSH2 0xB9D JUMP JUMPDEST PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A4 SWAP1 PUSH2 0x111C JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xB17 DUP4 PUSH2 0xC9E JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB37 JUMPI PUSH2 0xB37 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB61 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xB6B JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xC93 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xBE1 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x116E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xC1C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xC19 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xC79 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xC4A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xC71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A4 SWAP1 PUSH2 0x111C JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x865 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xCDD JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xD09 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xD27 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xD3F JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xD53 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xD65 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x297 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xD8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6FD DUP2 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDC7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xDAF JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xDE8 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xDAC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x6FD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE60 DUP4 PUSH2 0xE28 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE8C DUP5 PUSH2 0xE28 JUMP JUMPDEST SWAP3 POP PUSH2 0xE9A PUSH1 0x20 DUP6 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6FD DUP3 PUSH2 0xE28 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xED8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE1 DUP4 PUSH2 0xE28 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF36 DUP6 PUSH2 0xE28 JUMP JUMPDEST SWAP4 POP PUSH2 0xF44 PUSH1 0x20 DUP7 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xF8E JUMPI PUSH2 0xF8E PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xFB6 JUMPI PUSH2 0xFB6 PUSH2 0xF01 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xFCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1006 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100F DUP4 PUSH2 0xE28 JUMP JUMPDEST SWAP2 POP PUSH2 0x101D PUSH1 0x20 DUP5 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x103A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x105A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x297 JUMPI PUSH2 0x297 PUSH2 0x1060 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x10EC DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xDAC JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1100 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xDAC JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x297 JUMPI PUSH2 0x297 PUSH2 0x1060 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x11A1 SWAP1 DUP4 ADD DUP5 PUSH2 0xDD0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6FD DUP2 PUSH2 0xD76 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0xA5 0xED NUMBER 0x24 SWAP15 SWAP15 ISZERO 0xC9 0xB9 0x1E 0xCD SWAP5 PUSH8 0x1E88A1BB2FD1A7A2 0xCB PUSH19 0x2A993BE51388071864736F6C63430008110033 ","sourceMap":"822:16512:11:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_3153":{"entryPoint":null,"id":3153,"parameterSlots":3,"returnSlots":0},"@_approve_3037":{"entryPoint":1842,"id":3037,"parameterSlots":2,"returnSlots":0},"@_baseURI_2344":{"entryPoint":null,"id":2344,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_3142":{"entryPoint":null,"id":3142,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_3131":{"entryPoint":2973,"id":3131,"parameterSlots":4,"returnSlots":1},"@_exists_2566":{"entryPoint":null,"id":2566,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_2607":{"entryPoint":1945,"id":2607,"parameterSlots":2,"returnSlots":1},"@_msgSender_640":{"entryPoint":null,"id":640,"parameterSlots":0,"returnSlots":1},"@_safeTransfer_2548":{"entryPoint":2775,"id":2548,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_3069":{"entryPoint":2569,"id":3069,"parameterSlots":3,"returnSlots":0},"@_transfer_3013":{"entryPoint":2157,"id":3013,"parameterSlots":3,"returnSlots":0},"@approve_2387":{"entryPoint":969,"id":2387,"parameterSlots":2,"returnSlots":0},"@balanceOf_2255":{"entryPoint":1343,"id":2255,"parameterSlots":1,"returnSlots":1},"@getApproved_2408":{"entryPoint":815,"id":2408,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_2443":{"entryPoint":1796,"id":2443,"parameterSlots":2,"returnSlots":1},"@isContract_729":{"entryPoint":null,"id":729,"parameterSlots":1,"returnSlots":1},"@log10_1918":{"entryPoint":3230,"id":1918,"parameterSlots":1,"returnSlots":1},"@maxSupply_2231":{"entryPoint":null,"id":2231,"parameterSlots":0,"returnSlots":1},"@name_2283":{"entryPoint":669,"id":2283,"parameterSlots":0,"returnSlots":1},"@ownerOf_2273":{"entryPoint":null,"id":2273,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_2489":{"entryPoint":1316,"id":2489,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_2519":{"entryPoint":1508,"id":2519,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_2425":{"entryPoint":1493,"id":2425,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2213":{"entryPoint":587,"id":2213,"parameterSlots":1,"returnSlots":1},"@supportsInterface_693":{"entryPoint":null,"id":693,"parameterSlots":1,"returnSlots":1},"@symbol_2293":{"entryPoint":1478,"id":2293,"parameterSlots":0,"returnSlots":1},"@toString_1099":{"entryPoint":2826,"id":1099,"parameterSlots":1,"returnSlots":1},"@tokenURI_2335":{"entryPoint":1564,"id":2335,"parameterSlots":1,"returnSlots":1},"@totalSupply_2223":{"entryPoint":1244,"id":2223,"parameterSlots":0,"returnSlots":1},"@transferFrom_2470":{"entryPoint":1267,"id":2470,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":3624,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3754,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4083,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3694,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":3863,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3781,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3652,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3471,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":4523,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3599,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3536,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4314,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4462,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3580,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4380,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4233,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4361,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4214,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":3500,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":4134,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4192,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3841,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":3446,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:11416:14","statements":[{"nodeType":"YulBlock","src":"6:3:14","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:14","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:14"},"nodeType":"YulFunctionCall","src":"125:12:14"},"nodeType":"YulExpressionStatement","src":"125:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:14","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:14"},"nodeType":"YulFunctionCall","src":"99:20:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:14"},"nodeType":"YulFunctionCall","src":"88:32:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:14"},"nodeType":"YulFunctionCall","src":"78:43:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:14"},"nodeType":"YulFunctionCall","src":"71:51:14"},"nodeType":"YulIf","src":"68:71:14"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:14","type":""}],"src":"14:131:14"},{"body":{"nodeType":"YulBlock","src":"219:176:14","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:14"},"nodeType":"YulFunctionCall","src":"267:12:14"},"nodeType":"YulExpressionStatement","src":"267:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:14"},"nodeType":"YulFunctionCall","src":"236:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:14"},"nodeType":"YulFunctionCall","src":"232:32:14"},"nodeType":"YulIf","src":"229:52:14"},{"nodeType":"YulVariableDeclaration","src":"290:36:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:14"},"nodeType":"YulFunctionCall","src":"303:23:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:14"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:14"},"nodeType":"YulFunctionCall","src":"335:30:14"},"nodeType":"YulExpressionStatement","src":"335:30:14"},{"nodeType":"YulAssignment","src":"374:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:14"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:14","type":""}],"src":"150:245:14"},{"body":{"nodeType":"YulBlock","src":"495:92:14","statements":[{"nodeType":"YulAssignment","src":"505:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:14"},"nodeType":"YulFunctionCall","src":"513:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:14"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:14"},"nodeType":"YulFunctionCall","src":"565:14:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:14"},"nodeType":"YulFunctionCall","src":"558:22:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:14"},"nodeType":"YulFunctionCall","src":"540:41:14"},"nodeType":"YulExpressionStatement","src":"540:41:14"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:14","type":""}],"src":"400:187:14"},{"body":{"nodeType":"YulBlock","src":"658:184:14","statements":[{"nodeType":"YulVariableDeclaration","src":"668:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"677:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"672:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"737:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"762:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"767:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:14"},"nodeType":"YulFunctionCall","src":"758:11:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"781:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"786:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:14"},"nodeType":"YulFunctionCall","src":"777:11:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"771:5:14"},"nodeType":"YulFunctionCall","src":"771:18:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"751:6:14"},"nodeType":"YulFunctionCall","src":"751:39:14"},"nodeType":"YulExpressionStatement","src":"751:39:14"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"701:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"695:2:14"},"nodeType":"YulFunctionCall","src":"695:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"709:19:14","statements":[{"nodeType":"YulAssignment","src":"711:15:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"720:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"723:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:14"},"nodeType":"YulFunctionCall","src":"716:10:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"711:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"691:3:14","statements":[]},"src":"687:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"820:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"825:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"816:3:14"},"nodeType":"YulFunctionCall","src":"816:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"834:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:14"},"nodeType":"YulFunctionCall","src":"809:27:14"},"nodeType":"YulExpressionStatement","src":"809:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"636:3:14","type":""},{"name":"dst","nodeType":"YulTypedName","src":"641:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"646:6:14","type":""}],"src":"592:250:14"},{"body":{"nodeType":"YulBlock","src":"897:221:14","statements":[{"nodeType":"YulVariableDeclaration","src":"907:26:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"927:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"921:5:14"},"nodeType":"YulFunctionCall","src":"921:12:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"911:6:14","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"949:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"954:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"942:6:14"},"nodeType":"YulFunctionCall","src":"942:19:14"},"nodeType":"YulExpressionStatement","src":"942:19:14"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1009:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"1016:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1005:3:14"},"nodeType":"YulFunctionCall","src":"1005:16:14"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1027:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"1032:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:14"},"nodeType":"YulFunctionCall","src":"1023:14:14"},{"name":"length","nodeType":"YulIdentifier","src":"1039:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"970:34:14"},"nodeType":"YulFunctionCall","src":"970:76:14"},"nodeType":"YulExpressionStatement","src":"970:76:14"},{"nodeType":"YulAssignment","src":"1055:57:14","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1070:3:14"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1083:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"1091:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1079:3:14"},"nodeType":"YulFunctionCall","src":"1079:15:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1100:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1096:3:14"},"nodeType":"YulFunctionCall","src":"1096:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1075:3:14"},"nodeType":"YulFunctionCall","src":"1075:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:14"},"nodeType":"YulFunctionCall","src":"1066:39:14"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1062:3:14"},"nodeType":"YulFunctionCall","src":"1062:50:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1055:3:14"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"874:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"881:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"889:3:14","type":""}],"src":"847:271:14"},{"body":{"nodeType":"YulBlock","src":"1244:99:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1261:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1272:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1254:6:14"},"nodeType":"YulFunctionCall","src":"1254:21:14"},"nodeType":"YulExpressionStatement","src":"1254:21:14"},{"nodeType":"YulAssignment","src":"1284:53:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1310:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1322:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1333:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1318:3:14"},"nodeType":"YulFunctionCall","src":"1318:18:14"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1292:17:14"},"nodeType":"YulFunctionCall","src":"1292:45:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1284:4:14"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1213:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1224:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1235:4:14","type":""}],"src":"1123:220:14"},{"body":{"nodeType":"YulBlock","src":"1418:110:14","statements":[{"body":{"nodeType":"YulBlock","src":"1464:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1473:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1476:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1466:6:14"},"nodeType":"YulFunctionCall","src":"1466:12:14"},"nodeType":"YulExpressionStatement","src":"1466:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1439:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"1448:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1435:3:14"},"nodeType":"YulFunctionCall","src":"1435:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"1460:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1431:3:14"},"nodeType":"YulFunctionCall","src":"1431:32:14"},"nodeType":"YulIf","src":"1428:52:14"},{"nodeType":"YulAssignment","src":"1489:33:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1512:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1499:12:14"},"nodeType":"YulFunctionCall","src":"1499:23:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1489:6:14"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1384:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1395:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1407:6:14","type":""}],"src":"1348:180:14"},{"body":{"nodeType":"YulBlock","src":"1634:102:14","statements":[{"nodeType":"YulAssignment","src":"1644:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1656:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1667:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:14"},"nodeType":"YulFunctionCall","src":"1652:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1644:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1686:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1701:6:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1722:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1713:3:14"},"nodeType":"YulFunctionCall","src":"1713:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"1726:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1709:3:14"},"nodeType":"YulFunctionCall","src":"1709:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1697:3:14"},"nodeType":"YulFunctionCall","src":"1697:32:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1679:6:14"},"nodeType":"YulFunctionCall","src":"1679:51:14"},"nodeType":"YulExpressionStatement","src":"1679:51:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1603:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1614:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1625:4:14","type":""}],"src":"1533:203:14"},{"body":{"nodeType":"YulBlock","src":"1790:124:14","statements":[{"nodeType":"YulAssignment","src":"1800:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1822:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1809:12:14"},"nodeType":"YulFunctionCall","src":"1809:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1800:5:14"}]},{"body":{"nodeType":"YulBlock","src":"1892:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1901:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1904:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1894:6:14"},"nodeType":"YulFunctionCall","src":"1894:12:14"},"nodeType":"YulExpressionStatement","src":"1894:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1851:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1862:5:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1882:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1873:3:14"},"nodeType":"YulFunctionCall","src":"1873:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"1886:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1869:3:14"},"nodeType":"YulFunctionCall","src":"1869:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1858:3:14"},"nodeType":"YulFunctionCall","src":"1858:31:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1848:2:14"},"nodeType":"YulFunctionCall","src":"1848:42:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1841:6:14"},"nodeType":"YulFunctionCall","src":"1841:50:14"},"nodeType":"YulIf","src":"1838:70:14"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1780:5:14","type":""}],"src":"1741:173:14"},{"body":{"nodeType":"YulBlock","src":"2006:167:14","statements":[{"body":{"nodeType":"YulBlock","src":"2052:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2061:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2064:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2054:6:14"},"nodeType":"YulFunctionCall","src":"2054:12:14"},"nodeType":"YulExpressionStatement","src":"2054:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2027:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2023:3:14"},"nodeType":"YulFunctionCall","src":"2023:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"2048:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2019:3:14"},"nodeType":"YulFunctionCall","src":"2019:32:14"},"nodeType":"YulIf","src":"2016:52:14"},{"nodeType":"YulAssignment","src":"2077:39:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2106:9:14"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2087:18:14"},"nodeType":"YulFunctionCall","src":"2087:29:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2077:6:14"}]},{"nodeType":"YulAssignment","src":"2125:42:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2152:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2163:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2148:3:14"},"nodeType":"YulFunctionCall","src":"2148:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2135:12:14"},"nodeType":"YulFunctionCall","src":"2135:32:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2125:6:14"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1964:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1975:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1987:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1995:6:14","type":""}],"src":"1919:254:14"},{"body":{"nodeType":"YulBlock","src":"2279:76:14","statements":[{"nodeType":"YulAssignment","src":"2289:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2301:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2312:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2297:3:14"},"nodeType":"YulFunctionCall","src":"2297:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2289:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2331:9:14"},{"name":"value0","nodeType":"YulIdentifier","src":"2342:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2324:6:14"},"nodeType":"YulFunctionCall","src":"2324:25:14"},"nodeType":"YulExpressionStatement","src":"2324:25:14"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2248:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2259:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2270:4:14","type":""}],"src":"2178:177:14"},{"body":{"nodeType":"YulBlock","src":"2464:224:14","statements":[{"body":{"nodeType":"YulBlock","src":"2510:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2519:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2522:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2512:6:14"},"nodeType":"YulFunctionCall","src":"2512:12:14"},"nodeType":"YulExpressionStatement","src":"2512:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2485:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"2494:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2481:3:14"},"nodeType":"YulFunctionCall","src":"2481:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"2506:2:14","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2477:3:14"},"nodeType":"YulFunctionCall","src":"2477:32:14"},"nodeType":"YulIf","src":"2474:52:14"},{"nodeType":"YulAssignment","src":"2535:39:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2564:9:14"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2545:18:14"},"nodeType":"YulFunctionCall","src":"2545:29:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2535:6:14"}]},{"nodeType":"YulAssignment","src":"2583:48:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2616:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2627:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2612:3:14"},"nodeType":"YulFunctionCall","src":"2612:18:14"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2593:18:14"},"nodeType":"YulFunctionCall","src":"2593:38:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2583:6:14"}]},{"nodeType":"YulAssignment","src":"2640:42:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2667:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2678:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2663:3:14"},"nodeType":"YulFunctionCall","src":"2663:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2650:12:14"},"nodeType":"YulFunctionCall","src":"2650:32:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2640:6:14"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2414:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2425:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2437:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2445:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2453:6:14","type":""}],"src":"2360:328:14"},{"body":{"nodeType":"YulBlock","src":"2763:116:14","statements":[{"body":{"nodeType":"YulBlock","src":"2809:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2818:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2821:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2811:6:14"},"nodeType":"YulFunctionCall","src":"2811:12:14"},"nodeType":"YulExpressionStatement","src":"2811:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2784:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"2793:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2780:3:14"},"nodeType":"YulFunctionCall","src":"2780:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"2805:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2776:3:14"},"nodeType":"YulFunctionCall","src":"2776:32:14"},"nodeType":"YulIf","src":"2773:52:14"},{"nodeType":"YulAssignment","src":"2834:39:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2863:9:14"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2844:18:14"},"nodeType":"YulFunctionCall","src":"2844:29:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2834:6:14"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2729:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2740:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2752:6:14","type":""}],"src":"2693:186:14"},{"body":{"nodeType":"YulBlock","src":"2968:263:14","statements":[{"body":{"nodeType":"YulBlock","src":"3014:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3023:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3026:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3016:6:14"},"nodeType":"YulFunctionCall","src":"3016:12:14"},"nodeType":"YulExpressionStatement","src":"3016:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2989:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"2998:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2985:3:14"},"nodeType":"YulFunctionCall","src":"2985:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"3010:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2981:3:14"},"nodeType":"YulFunctionCall","src":"2981:32:14"},"nodeType":"YulIf","src":"2978:52:14"},{"nodeType":"YulAssignment","src":"3039:39:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3068:9:14"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3049:18:14"},"nodeType":"YulFunctionCall","src":"3049:29:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3039:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"3087:45:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3117:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"3128:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3113:3:14"},"nodeType":"YulFunctionCall","src":"3113:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3100:12:14"},"nodeType":"YulFunctionCall","src":"3100:32:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3091:5:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3185:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3194:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3187:6:14"},"nodeType":"YulFunctionCall","src":"3187:12:14"},"nodeType":"YulExpressionStatement","src":"3187:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3154:5:14"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3175:5:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3168:6:14"},"nodeType":"YulFunctionCall","src":"3168:13:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3161:6:14"},"nodeType":"YulFunctionCall","src":"3161:21:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3151:2:14"},"nodeType":"YulFunctionCall","src":"3151:32:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3144:6:14"},"nodeType":"YulFunctionCall","src":"3144:40:14"},"nodeType":"YulIf","src":"3141:60:14"},{"nodeType":"YulAssignment","src":"3210:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"3220:5:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3210:6:14"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2926:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2937:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2949:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2957:6:14","type":""}],"src":"2884:347:14"},{"body":{"nodeType":"YulBlock","src":"3268:95:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3285:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3292:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3297:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3288:3:14"},"nodeType":"YulFunctionCall","src":"3288:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3278:6:14"},"nodeType":"YulFunctionCall","src":"3278:31:14"},"nodeType":"YulExpressionStatement","src":"3278:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3325:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3328:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3318:6:14"},"nodeType":"YulFunctionCall","src":"3318:15:14"},"nodeType":"YulExpressionStatement","src":"3318:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3349:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3352:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3342:6:14"},"nodeType":"YulFunctionCall","src":"3342:15:14"},"nodeType":"YulExpressionStatement","src":"3342:15:14"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3236:127:14"},{"body":{"nodeType":"YulBlock","src":"3498:1008:14","statements":[{"body":{"nodeType":"YulBlock","src":"3545:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3554:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3557:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3547:6:14"},"nodeType":"YulFunctionCall","src":"3547:12:14"},"nodeType":"YulExpressionStatement","src":"3547:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3519:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"3528:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3515:3:14"},"nodeType":"YulFunctionCall","src":"3515:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"3540:3:14","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3511:3:14"},"nodeType":"YulFunctionCall","src":"3511:33:14"},"nodeType":"YulIf","src":"3508:53:14"},{"nodeType":"YulAssignment","src":"3570:39:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3599:9:14"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3580:18:14"},"nodeType":"YulFunctionCall","src":"3580:29:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3570:6:14"}]},{"nodeType":"YulAssignment","src":"3618:48:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3651:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"3662:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3647:3:14"},"nodeType":"YulFunctionCall","src":"3647:18:14"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3628:18:14"},"nodeType":"YulFunctionCall","src":"3628:38:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3618:6:14"}]},{"nodeType":"YulAssignment","src":"3675:42:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3702:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"3713:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3698:3:14"},"nodeType":"YulFunctionCall","src":"3698:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3685:12:14"},"nodeType":"YulFunctionCall","src":"3685:32:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3675:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"3726:46:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3757:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"3768:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3753:3:14"},"nodeType":"YulFunctionCall","src":"3753:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3740:12:14"},"nodeType":"YulFunctionCall","src":"3740:32:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3730:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3781:28:14","value":{"kind":"number","nodeType":"YulLiteral","src":"3791:18:14","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3785:2:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3836:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3845:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3848:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3838:6:14"},"nodeType":"YulFunctionCall","src":"3838:12:14"},"nodeType":"YulExpressionStatement","src":"3838:12:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3824:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"3832:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3821:2:14"},"nodeType":"YulFunctionCall","src":"3821:14:14"},"nodeType":"YulIf","src":"3818:34:14"},{"nodeType":"YulVariableDeclaration","src":"3861:32:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3875:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"3886:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3871:3:14"},"nodeType":"YulFunctionCall","src":"3871:22:14"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3865:2:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3941:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3950:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3953:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3943:6:14"},"nodeType":"YulFunctionCall","src":"3943:12:14"},"nodeType":"YulExpressionStatement","src":"3943:12:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3920:2:14"},{"kind":"number","nodeType":"YulLiteral","src":"3924:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3916:3:14"},"nodeType":"YulFunctionCall","src":"3916:13:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3931:7:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3912:3:14"},"nodeType":"YulFunctionCall","src":"3912:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3905:6:14"},"nodeType":"YulFunctionCall","src":"3905:35:14"},"nodeType":"YulIf","src":"3902:55:14"},{"nodeType":"YulVariableDeclaration","src":"3966:26:14","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3989:2:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3976:12:14"},"nodeType":"YulFunctionCall","src":"3976:16:14"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3970:2:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"4015:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4017:16:14"},"nodeType":"YulFunctionCall","src":"4017:18:14"},"nodeType":"YulExpressionStatement","src":"4017:18:14"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4007:2:14"},{"name":"_1","nodeType":"YulIdentifier","src":"4011:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4004:2:14"},"nodeType":"YulFunctionCall","src":"4004:10:14"},"nodeType":"YulIf","src":"4001:36:14"},{"nodeType":"YulVariableDeclaration","src":"4046:17:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4060:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4056:3:14"},"nodeType":"YulFunctionCall","src":"4056:7:14"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4050:2:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4072:23:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4092:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4086:5:14"},"nodeType":"YulFunctionCall","src":"4086:9:14"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4076:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4104:71:14","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4126:6:14"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4150:2:14"},{"kind":"number","nodeType":"YulLiteral","src":"4154:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4146:3:14"},"nodeType":"YulFunctionCall","src":"4146:13:14"},{"name":"_4","nodeType":"YulIdentifier","src":"4161:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4142:3:14"},"nodeType":"YulFunctionCall","src":"4142:22:14"},{"kind":"number","nodeType":"YulLiteral","src":"4166:2:14","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4138:3:14"},"nodeType":"YulFunctionCall","src":"4138:31:14"},{"name":"_4","nodeType":"YulIdentifier","src":"4171:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4134:3:14"},"nodeType":"YulFunctionCall","src":"4134:40:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4122:3:14"},"nodeType":"YulFunctionCall","src":"4122:53:14"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4108:10:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"4234:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4236:16:14"},"nodeType":"YulFunctionCall","src":"4236:18:14"},"nodeType":"YulExpressionStatement","src":"4236:18:14"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4193:10:14"},{"name":"_1","nodeType":"YulIdentifier","src":"4205:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4190:2:14"},"nodeType":"YulFunctionCall","src":"4190:18:14"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4213:10:14"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4225:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4210:2:14"},"nodeType":"YulFunctionCall","src":"4210:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4187:2:14"},"nodeType":"YulFunctionCall","src":"4187:46:14"},"nodeType":"YulIf","src":"4184:72:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4272:2:14","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4276:10:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4265:6:14"},"nodeType":"YulFunctionCall","src":"4265:22:14"},"nodeType":"YulExpressionStatement","src":"4265:22:14"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4303:6:14"},{"name":"_3","nodeType":"YulIdentifier","src":"4311:2:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4296:6:14"},"nodeType":"YulFunctionCall","src":"4296:18:14"},"nodeType":"YulExpressionStatement","src":"4296:18:14"},{"body":{"nodeType":"YulBlock","src":"4360:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4369:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4372:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4362:6:14"},"nodeType":"YulFunctionCall","src":"4362:12:14"},"nodeType":"YulExpressionStatement","src":"4362:12:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4337:2:14"},{"name":"_3","nodeType":"YulIdentifier","src":"4341:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4333:3:14"},"nodeType":"YulFunctionCall","src":"4333:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"4346:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4329:3:14"},"nodeType":"YulFunctionCall","src":"4329:20:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4351:7:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4326:2:14"},"nodeType":"YulFunctionCall","src":"4326:33:14"},"nodeType":"YulIf","src":"4323:53:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4402:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4410:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4398:3:14"},"nodeType":"YulFunctionCall","src":"4398:15:14"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4419:2:14"},{"kind":"number","nodeType":"YulLiteral","src":"4423:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4415:3:14"},"nodeType":"YulFunctionCall","src":"4415:11:14"},{"name":"_3","nodeType":"YulIdentifier","src":"4428:2:14"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4385:12:14"},"nodeType":"YulFunctionCall","src":"4385:46:14"},"nodeType":"YulExpressionStatement","src":"4385:46:14"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4455:6:14"},{"name":"_3","nodeType":"YulIdentifier","src":"4463:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4451:3:14"},"nodeType":"YulFunctionCall","src":"4451:15:14"},{"kind":"number","nodeType":"YulLiteral","src":"4468:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4447:3:14"},"nodeType":"YulFunctionCall","src":"4447:24:14"},{"kind":"number","nodeType":"YulLiteral","src":"4473:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4440:6:14"},"nodeType":"YulFunctionCall","src":"4440:35:14"},"nodeType":"YulExpressionStatement","src":"4440:35:14"},{"nodeType":"YulAssignment","src":"4484:16:14","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4494:6:14"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4484:6:14"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3440:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3451:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3463:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3471:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3479:6:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3487:6:14","type":""}],"src":"3368:1138:14"},{"body":{"nodeType":"YulBlock","src":"4598:173:14","statements":[{"body":{"nodeType":"YulBlock","src":"4644:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4653:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4656:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4646:6:14"},"nodeType":"YulFunctionCall","src":"4646:12:14"},"nodeType":"YulExpressionStatement","src":"4646:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4619:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"4628:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4615:3:14"},"nodeType":"YulFunctionCall","src":"4615:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4640:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4611:3:14"},"nodeType":"YulFunctionCall","src":"4611:32:14"},"nodeType":"YulIf","src":"4608:52:14"},{"nodeType":"YulAssignment","src":"4669:39:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4698:9:14"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4679:18:14"},"nodeType":"YulFunctionCall","src":"4679:29:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4669:6:14"}]},{"nodeType":"YulAssignment","src":"4717:48:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4750:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4761:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4746:3:14"},"nodeType":"YulFunctionCall","src":"4746:18:14"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4727:18:14"},"nodeType":"YulFunctionCall","src":"4727:38:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4717:6:14"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4556:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4567:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4579:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4587:6:14","type":""}],"src":"4511:260:14"},{"body":{"nodeType":"YulBlock","src":"4831:325:14","statements":[{"nodeType":"YulAssignment","src":"4841:22:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4855:1:14","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4858:4:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4851:3:14"},"nodeType":"YulFunctionCall","src":"4851:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4841:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"4872:38:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4902:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"4908:1:14","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4898:3:14"},"nodeType":"YulFunctionCall","src":"4898:12:14"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4876:18:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"4949:31:14","statements":[{"nodeType":"YulAssignment","src":"4951:27:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4965:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4973:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4961:3:14"},"nodeType":"YulFunctionCall","src":"4961:17:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4951:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4929:18:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4922:6:14"},"nodeType":"YulFunctionCall","src":"4922:26:14"},"nodeType":"YulIf","src":"4919:61:14"},{"body":{"nodeType":"YulBlock","src":"5039:111:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5060:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5067:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5072:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5063:3:14"},"nodeType":"YulFunctionCall","src":"5063:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5053:6:14"},"nodeType":"YulFunctionCall","src":"5053:31:14"},"nodeType":"YulExpressionStatement","src":"5053:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5104:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5107:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5097:6:14"},"nodeType":"YulFunctionCall","src":"5097:15:14"},"nodeType":"YulExpressionStatement","src":"5097:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5132:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5135:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5125:6:14"},"nodeType":"YulFunctionCall","src":"5125:15:14"},"nodeType":"YulExpressionStatement","src":"5125:15:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4995:18:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5018:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"5026:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5015:2:14"},"nodeType":"YulFunctionCall","src":"5015:14:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4992:2:14"},"nodeType":"YulFunctionCall","src":"4992:38:14"},"nodeType":"YulIf","src":"4989:161:14"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4811:4:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4820:6:14","type":""}],"src":"4776:380:14"},{"body":{"nodeType":"YulBlock","src":"5335:234:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5352:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5363:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5345:6:14"},"nodeType":"YulFunctionCall","src":"5345:21:14"},"nodeType":"YulExpressionStatement","src":"5345:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5386:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5397:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5382:3:14"},"nodeType":"YulFunctionCall","src":"5382:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"5402:2:14","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5375:6:14"},"nodeType":"YulFunctionCall","src":"5375:30:14"},"nodeType":"YulExpressionStatement","src":"5375:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5425:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5436:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5421:3:14"},"nodeType":"YulFunctionCall","src":"5421:18:14"},{"hexValue":"4552433732313a20617070726f76656420717565727920666f72206e6f6e6578","kind":"string","nodeType":"YulLiteral","src":"5441:34:14","type":"","value":"ERC721: approved query for nonex"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5414:6:14"},"nodeType":"YulFunctionCall","src":"5414:62:14"},"nodeType":"YulExpressionStatement","src":"5414:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5496:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5507:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5492:3:14"},"nodeType":"YulFunctionCall","src":"5492:18:14"},{"hexValue":"697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"5512:14:14","type":"","value":"istent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5485:6:14"},"nodeType":"YulFunctionCall","src":"5485:42:14"},"nodeType":"YulExpressionStatement","src":"5485:42:14"},{"nodeType":"YulAssignment","src":"5536:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5548:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5559:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5544:3:14"},"nodeType":"YulFunctionCall","src":"5544:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5536:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5312:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5326:4:14","type":""}],"src":"5161:408:14"},{"body":{"nodeType":"YulBlock","src":"5748:223:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5765:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5776:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5758:6:14"},"nodeType":"YulFunctionCall","src":"5758:21:14"},"nodeType":"YulExpressionStatement","src":"5758:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5799:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5810:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5795:3:14"},"nodeType":"YulFunctionCall","src":"5795:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"5815:2:14","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5788:6:14"},"nodeType":"YulFunctionCall","src":"5788:30:14"},"nodeType":"YulExpressionStatement","src":"5788:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5838:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5849:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5834:3:14"},"nodeType":"YulFunctionCall","src":"5834:18:14"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"5854:34:14","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5827:6:14"},"nodeType":"YulFunctionCall","src":"5827:62:14"},"nodeType":"YulExpressionStatement","src":"5827:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5909:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5920:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5905:3:14"},"nodeType":"YulFunctionCall","src":"5905:18:14"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5925:3:14","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5898:6:14"},"nodeType":"YulFunctionCall","src":"5898:31:14"},"nodeType":"YulExpressionStatement","src":"5898:31:14"},{"nodeType":"YulAssignment","src":"5938:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5950:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5961:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5946:3:14"},"nodeType":"YulFunctionCall","src":"5946:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5938:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5725:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5739:4:14","type":""}],"src":"5574:397:14"},{"body":{"nodeType":"YulBlock","src":"6150:246:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6167:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6178:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6160:6:14"},"nodeType":"YulFunctionCall","src":"6160:21:14"},"nodeType":"YulExpressionStatement","src":"6160:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6201:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6212:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6197:3:14"},"nodeType":"YulFunctionCall","src":"6197:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"6217:2:14","type":"","value":"56"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6190:6:14"},"nodeType":"YulFunctionCall","src":"6190:30:14"},"nodeType":"YulExpressionStatement","src":"6190:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6240:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6251:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6236:3:14"},"nodeType":"YulFunctionCall","src":"6236:18:14"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f74206f77","kind":"string","nodeType":"YulLiteral","src":"6256:34:14","type":"","value":"ERC721: approve caller is not ow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6229:6:14"},"nodeType":"YulFunctionCall","src":"6229:62:14"},"nodeType":"YulExpressionStatement","src":"6229:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6311:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6322:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6307:3:14"},"nodeType":"YulFunctionCall","src":"6307:18:14"},{"hexValue":"6e6572206e6f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"6327:26:14","type":"","value":"ner nor approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6300:6:14"},"nodeType":"YulFunctionCall","src":"6300:54:14"},"nodeType":"YulExpressionStatement","src":"6300:54:14"},{"nodeType":"YulAssignment","src":"6363:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6375:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6386:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6371:3:14"},"nodeType":"YulFunctionCall","src":"6371:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6363:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6127:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6141:4:14","type":""}],"src":"5976:420:14"},{"body":{"nodeType":"YulBlock","src":"6433:95:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6450:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6457:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6462:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6453:3:14"},"nodeType":"YulFunctionCall","src":"6453:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6443:6:14"},"nodeType":"YulFunctionCall","src":"6443:31:14"},"nodeType":"YulExpressionStatement","src":"6443:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6490:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6493:4:14","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6483:6:14"},"nodeType":"YulFunctionCall","src":"6483:15:14"},"nodeType":"YulExpressionStatement","src":"6483:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6514:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6517:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6507:6:14"},"nodeType":"YulFunctionCall","src":"6507:15:14"},"nodeType":"YulExpressionStatement","src":"6507:15:14"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6401:127:14"},{"body":{"nodeType":"YulBlock","src":"6582:79:14","statements":[{"nodeType":"YulAssignment","src":"6592:17:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6604:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"6607:1:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6600:3:14"},"nodeType":"YulFunctionCall","src":"6600:9:14"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"6592:4:14"}]},{"body":{"nodeType":"YulBlock","src":"6633:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6635:16:14"},"nodeType":"YulFunctionCall","src":"6635:18:14"},"nodeType":"YulExpressionStatement","src":"6635:18:14"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"6624:4:14"},{"name":"x","nodeType":"YulIdentifier","src":"6630:1:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6621:2:14"},"nodeType":"YulFunctionCall","src":"6621:11:14"},"nodeType":"YulIf","src":"6618:37:14"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6564:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"6567:1:14","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"6573:4:14","type":""}],"src":"6533:128:14"},{"body":{"nodeType":"YulBlock","src":"6840:239:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6857:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6868:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6850:6:14"},"nodeType":"YulFunctionCall","src":"6850:21:14"},"nodeType":"YulExpressionStatement","src":"6850:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6891:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6902:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6887:3:14"},"nodeType":"YulFunctionCall","src":"6887:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"6907:2:14","type":"","value":"49"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6880:6:14"},"nodeType":"YulFunctionCall","src":"6880:30:14"},"nodeType":"YulExpressionStatement","src":"6880:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6930:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6941:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6926:3:14"},"nodeType":"YulFunctionCall","src":"6926:18:14"},{"hexValue":"4552433732313a207472616e736665722063616c6c6572206973206e6f74206f","kind":"string","nodeType":"YulLiteral","src":"6946:34:14","type":"","value":"ERC721: transfer caller is not o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6919:6:14"},"nodeType":"YulFunctionCall","src":"6919:62:14"},"nodeType":"YulExpressionStatement","src":"6919:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7001:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7012:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6997:3:14"},"nodeType":"YulFunctionCall","src":"6997:18:14"},{"hexValue":"776e6572206e6f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"7017:19:14","type":"","value":"wner nor approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6990:6:14"},"nodeType":"YulFunctionCall","src":"6990:47:14"},"nodeType":"YulExpressionStatement","src":"6990:47:14"},{"nodeType":"YulAssignment","src":"7046:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7058:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7069:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7054:3:14"},"nodeType":"YulFunctionCall","src":"7054:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7046:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6817:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6831:4:14","type":""}],"src":"6666:413:14"},{"body":{"nodeType":"YulBlock","src":"7258:232:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7275:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7286:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7268:6:14"},"nodeType":"YulFunctionCall","src":"7268:21:14"},"nodeType":"YulExpressionStatement","src":"7268:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7309:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7320:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7305:3:14"},"nodeType":"YulFunctionCall","src":"7305:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"7325:2:14","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7298:6:14"},"nodeType":"YulFunctionCall","src":"7298:30:14"},"nodeType":"YulExpressionStatement","src":"7298:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7348:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7359:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7344:3:14"},"nodeType":"YulFunctionCall","src":"7344:18:14"},{"hexValue":"4552433732313a2062616c616e636520717565727920666f7220746865207a65","kind":"string","nodeType":"YulLiteral","src":"7364:34:14","type":"","value":"ERC721: balance query for the ze"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7337:6:14"},"nodeType":"YulFunctionCall","src":"7337:62:14"},"nodeType":"YulExpressionStatement","src":"7337:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7419:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7430:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7415:3:14"},"nodeType":"YulFunctionCall","src":"7415:18:14"},{"hexValue":"726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"7435:12:14","type":"","value":"ro address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7408:6:14"},"nodeType":"YulFunctionCall","src":"7408:40:14"},"nodeType":"YulExpressionStatement","src":"7408:40:14"},{"nodeType":"YulAssignment","src":"7457:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7469:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7480:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7465:3:14"},"nodeType":"YulFunctionCall","src":"7465:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7457:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7235:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7249:4:14","type":""}],"src":"7084:406:14"},{"body":{"nodeType":"YulBlock","src":"7669:237:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7686:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7697:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7679:6:14"},"nodeType":"YulFunctionCall","src":"7679:21:14"},"nodeType":"YulExpressionStatement","src":"7679:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7720:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7731:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7716:3:14"},"nodeType":"YulFunctionCall","src":"7716:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"7736:2:14","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7709:6:14"},"nodeType":"YulFunctionCall","src":"7709:30:14"},"nodeType":"YulExpressionStatement","src":"7709:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7759:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7770:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7755:3:14"},"nodeType":"YulFunctionCall","src":"7755:18:14"},{"hexValue":"4552433732314d657461646174613a2055524920717565727920666f72206e6f","kind":"string","nodeType":"YulLiteral","src":"7775:34:14","type":"","value":"ERC721Metadata: URI query for no"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7748:6:14"},"nodeType":"YulFunctionCall","src":"7748:62:14"},"nodeType":"YulExpressionStatement","src":"7748:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7830:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7841:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7826:3:14"},"nodeType":"YulFunctionCall","src":"7826:18:14"},{"hexValue":"6e6578697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"7846:17:14","type":"","value":"nexistent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7819:6:14"},"nodeType":"YulFunctionCall","src":"7819:45:14"},"nodeType":"YulExpressionStatement","src":"7819:45:14"},{"nodeType":"YulAssignment","src":"7873:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7885:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7896:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7881:3:14"},"nodeType":"YulFunctionCall","src":"7881:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7873:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7646:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7660:4:14","type":""}],"src":"7495:411:14"},{"body":{"nodeType":"YulBlock","src":"8098:309:14","statements":[{"nodeType":"YulVariableDeclaration","src":"8108:27:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8128:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8122:5:14"},"nodeType":"YulFunctionCall","src":"8122:13:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8112:6:14","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8183:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8191:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8179:3:14"},"nodeType":"YulFunctionCall","src":"8179:17:14"},{"name":"pos","nodeType":"YulIdentifier","src":"8198:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"8203:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8144:34:14"},"nodeType":"YulFunctionCall","src":"8144:66:14"},"nodeType":"YulExpressionStatement","src":"8144:66:14"},{"nodeType":"YulVariableDeclaration","src":"8219:29:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8236:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"8241:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8232:3:14"},"nodeType":"YulFunctionCall","src":"8232:16:14"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"8223:5:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8257:29:14","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8279:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8273:5:14"},"nodeType":"YulFunctionCall","src":"8273:13:14"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"8261:8:14","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8334:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8342:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8330:3:14"},"nodeType":"YulFunctionCall","src":"8330:17:14"},{"name":"end_1","nodeType":"YulIdentifier","src":"8349:5:14"},{"name":"length_1","nodeType":"YulIdentifier","src":"8356:8:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8295:34:14"},"nodeType":"YulFunctionCall","src":"8295:70:14"},"nodeType":"YulExpressionStatement","src":"8295:70:14"},{"nodeType":"YulAssignment","src":"8374:27:14","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"8385:5:14"},{"name":"length_1","nodeType":"YulIdentifier","src":"8392:8:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8381:3:14"},"nodeType":"YulFunctionCall","src":"8381:20:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8374:3:14"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8066:3:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8071:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8079:6:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8090:3:14","type":""}],"src":"7911:496:14"},{"body":{"nodeType":"YulBlock","src":"8586:234:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8603:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8614:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8596:6:14"},"nodeType":"YulFunctionCall","src":"8596:21:14"},"nodeType":"YulExpressionStatement","src":"8596:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8637:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8648:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8633:3:14"},"nodeType":"YulFunctionCall","src":"8633:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"8653:2:14","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8626:6:14"},"nodeType":"YulFunctionCall","src":"8626:30:14"},"nodeType":"YulExpressionStatement","src":"8626:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8676:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8687:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8672:3:14"},"nodeType":"YulFunctionCall","src":"8672:18:14"},{"hexValue":"4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578","kind":"string","nodeType":"YulLiteral","src":"8692:34:14","type":"","value":"ERC721: operator query for nonex"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8665:6:14"},"nodeType":"YulFunctionCall","src":"8665:62:14"},"nodeType":"YulExpressionStatement","src":"8665:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8747:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8758:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8743:3:14"},"nodeType":"YulFunctionCall","src":"8743:18:14"},{"hexValue":"697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"8763:14:14","type":"","value":"istent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8736:6:14"},"nodeType":"YulFunctionCall","src":"8736:42:14"},"nodeType":"YulExpressionStatement","src":"8736:42:14"},{"nodeType":"YulAssignment","src":"8787:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8799:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8810:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8795:3:14"},"nodeType":"YulFunctionCall","src":"8795:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8787:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8563:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8577:4:14","type":""}],"src":"8412:408:14"},{"body":{"nodeType":"YulBlock","src":"8999:227:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9016:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9027:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9009:6:14"},"nodeType":"YulFunctionCall","src":"9009:21:14"},"nodeType":"YulExpressionStatement","src":"9009:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9050:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9061:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9046:3:14"},"nodeType":"YulFunctionCall","src":"9046:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"9066:2:14","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9039:6:14"},"nodeType":"YulFunctionCall","src":"9039:30:14"},"nodeType":"YulExpressionStatement","src":"9039:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9089:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9100:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9085:3:14"},"nodeType":"YulFunctionCall","src":"9085:18:14"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"9105:34:14","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9078:6:14"},"nodeType":"YulFunctionCall","src":"9078:62:14"},"nodeType":"YulExpressionStatement","src":"9078:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9160:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9171:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9156:3:14"},"nodeType":"YulFunctionCall","src":"9156:18:14"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"9176:7:14","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9149:6:14"},"nodeType":"YulFunctionCall","src":"9149:35:14"},"nodeType":"YulExpressionStatement","src":"9149:35:14"},{"nodeType":"YulAssignment","src":"9193:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9205:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9216:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9201:3:14"},"nodeType":"YulFunctionCall","src":"9201:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9193:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8976:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8990:4:14","type":""}],"src":"8825:401:14"},{"body":{"nodeType":"YulBlock","src":"9405:226:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9422:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9433:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9415:6:14"},"nodeType":"YulFunctionCall","src":"9415:21:14"},"nodeType":"YulExpressionStatement","src":"9415:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9456:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9467:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9452:3:14"},"nodeType":"YulFunctionCall","src":"9452:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"9472:2:14","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9445:6:14"},"nodeType":"YulFunctionCall","src":"9445:30:14"},"nodeType":"YulExpressionStatement","src":"9445:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9495:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9506:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9491:3:14"},"nodeType":"YulFunctionCall","src":"9491:18:14"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"9511:34:14","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9484:6:14"},"nodeType":"YulFunctionCall","src":"9484:62:14"},"nodeType":"YulExpressionStatement","src":"9484:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9566:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9577:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9562:3:14"},"nodeType":"YulFunctionCall","src":"9562:18:14"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"9582:6:14","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9555:6:14"},"nodeType":"YulFunctionCall","src":"9555:34:14"},"nodeType":"YulExpressionStatement","src":"9555:34:14"},{"nodeType":"YulAssignment","src":"9598:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9610:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9621:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9606:3:14"},"nodeType":"YulFunctionCall","src":"9606:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9598:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9382:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9396:4:14","type":""}],"src":"9231:400:14"},{"body":{"nodeType":"YulBlock","src":"9684:77:14","statements":[{"nodeType":"YulAssignment","src":"9694:16:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9705:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"9708:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9701:3:14"},"nodeType":"YulFunctionCall","src":"9701:9:14"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9694:3:14"}]},{"body":{"nodeType":"YulBlock","src":"9733:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9735:16:14"},"nodeType":"YulFunctionCall","src":"9735:18:14"},"nodeType":"YulExpressionStatement","src":"9735:18:14"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9725:1:14"},{"name":"sum","nodeType":"YulIdentifier","src":"9728:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9722:2:14"},"nodeType":"YulFunctionCall","src":"9722:10:14"},"nodeType":"YulIf","src":"9719:36:14"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9667:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"9670:1:14","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"9676:3:14","type":""}],"src":"9636:125:14"},{"body":{"nodeType":"YulBlock","src":"9940:175:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9957:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9968:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9950:6:14"},"nodeType":"YulFunctionCall","src":"9950:21:14"},"nodeType":"YulExpressionStatement","src":"9950:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9991:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10002:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9987:3:14"},"nodeType":"YulFunctionCall","src":"9987:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"10007:2:14","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9980:6:14"},"nodeType":"YulFunctionCall","src":"9980:30:14"},"nodeType":"YulExpressionStatement","src":"9980:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10030:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10041:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10026:3:14"},"nodeType":"YulFunctionCall","src":"10026:18:14"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"10046:27:14","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10019:6:14"},"nodeType":"YulFunctionCall","src":"10019:55:14"},"nodeType":"YulExpressionStatement","src":"10019:55:14"},{"nodeType":"YulAssignment","src":"10083:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10095:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10106:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10091:3:14"},"nodeType":"YulFunctionCall","src":"10091:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10083:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9917:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9931:4:14","type":""}],"src":"9766:349:14"},{"body":{"nodeType":"YulBlock","src":"10294:240:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10311:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10322:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10304:6:14"},"nodeType":"YulFunctionCall","src":"10304:21:14"},"nodeType":"YulExpressionStatement","src":"10304:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10345:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10356:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10341:3:14"},"nodeType":"YulFunctionCall","src":"10341:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"10361:2:14","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10334:6:14"},"nodeType":"YulFunctionCall","src":"10334:30:14"},"nodeType":"YulExpressionStatement","src":"10334:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10384:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10395:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10380:3:14"},"nodeType":"YulFunctionCall","src":"10380:18:14"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"10400:34:14","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10373:6:14"},"nodeType":"YulFunctionCall","src":"10373:62:14"},"nodeType":"YulExpressionStatement","src":"10373:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10455:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10466:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10451:3:14"},"nodeType":"YulFunctionCall","src":"10451:18:14"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"10471:20:14","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10444:6:14"},"nodeType":"YulFunctionCall","src":"10444:48:14"},"nodeType":"YulExpressionStatement","src":"10444:48:14"},{"nodeType":"YulAssignment","src":"10501:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10513:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10524:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10509:3:14"},"nodeType":"YulFunctionCall","src":"10509:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10501:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10271:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10285:4:14","type":""}],"src":"10120:414:14"},{"body":{"nodeType":"YulBlock","src":"10571:95:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10588:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10595:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"10600:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10591:3:14"},"nodeType":"YulFunctionCall","src":"10591:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10581:6:14"},"nodeType":"YulFunctionCall","src":"10581:31:14"},"nodeType":"YulExpressionStatement","src":"10581:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10628:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10631:4:14","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10621:6:14"},"nodeType":"YulFunctionCall","src":"10621:15:14"},"nodeType":"YulExpressionStatement","src":"10621:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10652:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10655:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10645:6:14"},"nodeType":"YulFunctionCall","src":"10645:15:14"},"nodeType":"YulExpressionStatement","src":"10645:15:14"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"10539:127:14"},{"body":{"nodeType":"YulBlock","src":"10874:286:14","statements":[{"nodeType":"YulVariableDeclaration","src":"10884:29:14","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10902:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"10907:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10898:3:14"},"nodeType":"YulFunctionCall","src":"10898:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"10911:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10894:3:14"},"nodeType":"YulFunctionCall","src":"10894:19:14"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10888:2:14","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10929:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10944:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"10952:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10940:3:14"},"nodeType":"YulFunctionCall","src":"10940:15:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10922:6:14"},"nodeType":"YulFunctionCall","src":"10922:34:14"},"nodeType":"YulExpressionStatement","src":"10922:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10976:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10987:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10972:3:14"},"nodeType":"YulFunctionCall","src":"10972:18:14"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10996:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"11004:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10992:3:14"},"nodeType":"YulFunctionCall","src":"10992:15:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10965:6:14"},"nodeType":"YulFunctionCall","src":"10965:43:14"},"nodeType":"YulExpressionStatement","src":"10965:43:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11028:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11039:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11024:3:14"},"nodeType":"YulFunctionCall","src":"11024:18:14"},{"name":"value2","nodeType":"YulIdentifier","src":"11044:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11017:6:14"},"nodeType":"YulFunctionCall","src":"11017:34:14"},"nodeType":"YulExpressionStatement","src":"11017:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11071:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11082:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11067:3:14"},"nodeType":"YulFunctionCall","src":"11067:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"11087:3:14","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11060:6:14"},"nodeType":"YulFunctionCall","src":"11060:31:14"},"nodeType":"YulExpressionStatement","src":"11060:31:14"},{"nodeType":"YulAssignment","src":"11100:54:14","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11126:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11138:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11149:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11134:3:14"},"nodeType":"YulFunctionCall","src":"11134:19:14"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"11108:17:14"},"nodeType":"YulFunctionCall","src":"11108:46:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11100:4:14"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10819:9:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10830:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10838:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10846:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10854:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10865:4:14","type":""}],"src":"10671:489:14"},{"body":{"nodeType":"YulBlock","src":"11245:169:14","statements":[{"body":{"nodeType":"YulBlock","src":"11291:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11300:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11303:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11293:6:14"},"nodeType":"YulFunctionCall","src":"11293:12:14"},"nodeType":"YulExpressionStatement","src":"11293:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11266:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"11275:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11262:3:14"},"nodeType":"YulFunctionCall","src":"11262:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"11287:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11258:3:14"},"nodeType":"YulFunctionCall","src":"11258:32:14"},"nodeType":"YulIf","src":"11255:52:14"},{"nodeType":"YulVariableDeclaration","src":"11316:29:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11335:9:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11329:5:14"},"nodeType":"YulFunctionCall","src":"11329:16:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11320:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11378:5:14"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"11354:23:14"},"nodeType":"YulFunctionCall","src":"11354:30:14"},"nodeType":"YulExpressionStatement","src":"11354:30:14"},{"nodeType":"YulAssignment","src":"11393:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"11403:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11393:6:14"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11211:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11222:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11234:6:14","type":""}],"src":"11165:249:14"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: approved query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not ow\")\n        mstore(add(headStart, 96), \"ner nor approved for all\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"ERC721: transfer caller is not o\")\n        mstore(add(headStart, 96), \"wner nor approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC721: balance query for the ze\")\n        mstore(add(headStart, 96), \"ro address\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"ERC721Metadata: URI query for no\")\n        mstore(add(headStart, 96), \"nexistent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: operator query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100f55760003560e01c80636352211e11610097578063b88d4fde11610066578063b88d4fde1461020a578063c87b56dd1461021d578063d5abeb0114610230578063e985e9c51461023857600080fd5b80636352211e146101b357806370a08231146101dc57806395d89b41146101ef578063a22cb465146101f757600080fd5b8063095ea7b3116100d3578063095ea7b31461016257806318160ddd1461017757806323b872dd1461018d57806342842e0e146101a057600080fd5b806301ffc9a7146100fa57806306fdde0314610122578063081812fc14610137575b600080fd5b61010d610108366004610d8f565b61024b565b60405190151581526020015b60405180910390f35b61012a61029d565b6040516101199190610dfc565b61014a610145366004610e0f565b61032f565b6040516001600160a01b039091168152602001610119565b610175610170366004610e44565b6103c9565b005b61017f6104dc565b604051908152602001610119565b61017561019b366004610e6e565b6104f3565b6101756101ae366004610e6e565b610524565b61014a6101c1366004610e0f565b6000908152606a60205260409020546001600160a01b031690565b61017f6101ea366004610eaa565b61053f565b61012a6105c6565b610175610205366004610ec5565b6105d5565b610175610218366004610f17565b6105e4565b61012a61022b366004610e0f565b61061c565b60695461017f565b61010d610246366004610ff3565b610704565b60006001600160e01b031982166380ac58cd60e01b148061027c57506001600160e01b03198216635b5e139f60e01b145b8061029757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060606580546102ac90611026565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890611026565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b6000818152606a60205260408120546001600160a01b03166103ad5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606c60205260409020546001600160a01b031690565b6000818152606a60205260409020546001600160a01b0390811690831681900361043f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016103a4565b336001600160a01b038216148061045b575061045b8133610704565b6104cd5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016103a4565b6104d78383610732565b505050565b60006068546069546104ee9190611076565b905090565b6104fd3382610799565b6105195760405162461bcd60e51b81526004016103a490611089565b6104d783838361086d565b6104d7838383604051806020016040528060008152506105e4565b60006001600160a01b0382166105aa5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016103a4565b506001600160a01b03166000908152606b602052604090205490565b6060606680546102ac90611026565b6105e0338383610a09565b5050565b6105ee3383610799565b61060a5760405162461bcd60e51b81526004016103a490611089565b61061684848484610ad7565b50505050565b6000818152606a60205260409020546060906001600160a01b031661069b5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016103a4565b60006106b260408051602081019091526000815290565b905060008151116106d257604051806020016040528060008152506106fd565b806106dc84610b0a565b6040516020016106ed9291906110da565b6040516020818303038152906040525b9392505050565b6001600160a01b039182166000908152606d6020908152604080832093909416825291909152205460ff1690565b6000818152606c6020908152604080832080546001600160a01b0319166001600160a01b03878116918217909255606a909352818420549151859492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b6000818152606a60205260408120546001600160a01b03166108125760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016103a4565b6000828152606a60205260409020546001600160a01b039081169084168114806108555750836001600160a01b031661084a8461032f565b6001600160a01b0316145b8061086557506108658185610704565b949350505050565b6000818152606a60205260409020546001600160a01b038481169116146108e45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016103a4565b6001600160a01b0382166109465760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103a4565b610951600082610732565b6001600160a01b0383166000908152606b6020526040812080546001929061097a908490611076565b90915550506001600160a01b0382166000908152606b602052604081208054600192906109a8908490611109565b90915550506000818152606a602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b031603610a6a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103a4565b6001600160a01b038381166000818152606d6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610ae284848461086d565b610aee84848484610b9d565b6106165760405162461bcd60e51b81526004016103a49061111c565b60606000610b1783610c9e565b600101905060008167ffffffffffffffff811115610b3757610b37610f01565b6040519080825280601f01601f191660200182016040528015610b61576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610b6b57509392505050565b60006001600160a01b0384163b15610c9357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610be190339089908890889060040161116e565b6020604051808303816000875af1925050508015610c1c575060408051601f3d908101601f19168201909252610c19918101906111ab565b60015b610c79573d808015610c4a576040519150601f19603f3d011682016040523d82523d6000602084013e610c4f565b606091505b508051600003610c715760405162461bcd60e51b81526004016103a49061111c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610865565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610cdd5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610d09576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610d2757662386f26fc10000830492506010015b6305f5e1008310610d3f576305f5e100830492506008015b6127108310610d5357612710830492506004015b60648310610d65576064830492506002015b600a83106102975760010192915050565b6001600160e01b031981168114610d8c57600080fd5b50565b600060208284031215610da157600080fd5b81356106fd81610d76565b60005b83811015610dc7578181015183820152602001610daf565b50506000910152565b60008151808452610de8816020860160208601610dac565b601f01601f19169290920160200192915050565b6020815260006106fd6020830184610dd0565b600060208284031215610e2157600080fd5b5035919050565b80356001600160a01b0381168114610e3f57600080fd5b919050565b60008060408385031215610e5757600080fd5b610e6083610e28565b946020939093013593505050565b600080600060608486031215610e8357600080fd5b610e8c84610e28565b9250610e9a60208501610e28565b9150604084013590509250925092565b600060208284031215610ebc57600080fd5b6106fd82610e28565b60008060408385031215610ed857600080fd5b610ee183610e28565b915060208301358015158114610ef657600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610f2d57600080fd5b610f3685610e28565b9350610f4460208601610e28565b925060408501359150606085013567ffffffffffffffff80821115610f6857600080fd5b818701915087601f830112610f7c57600080fd5b813581811115610f8e57610f8e610f01565b604051601f8201601f19908116603f01168101908382118183101715610fb657610fb6610f01565b816040528281528a6020848701011115610fcf57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561100657600080fd5b61100f83610e28565b915061101d60208401610e28565b90509250929050565b600181811c9082168061103a57607f821691505b60208210810361105a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561029757610297611060565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600083516110ec818460208801610dac565b835190830190611100818360208801610dac565b01949350505050565b8082018082111561029757610297611060565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906111a190830184610dd0565b9695505050505050565b6000602082840312156111bd57600080fd5b81516106fd81610d7656fea264697066735822122049a5ed43249e9e15c9b91ecd94671e88a1bb2fd1a7a2cb722a993be51388071864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0xD5ABEB01 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x18D JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x137 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xD8F JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0xDFC JUMP JUMPDEST PUSH2 0x14A PUSH2 0x145 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x170 CALLDATASIZE PUSH1 0x4 PUSH2 0xE44 JUMP JUMPDEST PUSH2 0x3C9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17F PUSH2 0x4DC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0xE6E JUMP JUMPDEST PUSH2 0x4F3 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x1AE CALLDATASIZE PUSH1 0x4 PUSH2 0xE6E JUMP JUMPDEST PUSH2 0x524 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x17F PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0xEAA JUMP JUMPDEST PUSH2 0x53F JUMP JUMPDEST PUSH2 0x12A PUSH2 0x5C6 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xEC5 JUMP JUMPDEST PUSH2 0x5D5 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0xF17 JUMP JUMPDEST PUSH2 0x5E4 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x61C JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH2 0x17F JUMP JUMPDEST PUSH2 0x10D PUSH2 0x246 CALLDATASIZE PUSH1 0x4 PUSH2 0xFF3 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x27C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x297 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x65 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0x1026 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2D8 SWAP1 PUSH2 0x1026 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x325 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2FA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x325 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x308 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 SWAP1 SUB PUSH2 0x43F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x45B JUMPI POP PUSH2 0x45B DUP2 CALLER PUSH2 0x704 JUMP JUMPDEST PUSH2 0x4CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH2 0x4D7 DUP4 DUP4 PUSH2 0x732 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x68 SLOAD PUSH1 0x69 SLOAD PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0x1076 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x4FD CALLER DUP3 PUSH2 0x799 JUMP JUMPDEST PUSH2 0x519 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A4 SWAP1 PUSH2 0x1089 JUMP JUMPDEST PUSH2 0x4D7 DUP4 DUP4 DUP4 PUSH2 0x86D JUMP JUMPDEST PUSH2 0x4D7 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x5E4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x66 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0x1026 JUMP JUMPDEST PUSH2 0x5E0 CALLER DUP4 DUP4 PUSH2 0xA09 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5EE CALLER DUP4 PUSH2 0x799 JUMP JUMPDEST PUSH2 0x60A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A4 SWAP1 PUSH2 0x1089 JUMP JUMPDEST PUSH2 0x616 DUP5 DUP5 DUP5 DUP5 PUSH2 0xAD7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x69B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B2 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x6D2 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x6FD JUMP JUMPDEST DUP1 PUSH2 0x6DC DUP5 PUSH2 0xB0A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6ED SWAP3 SWAP2 SWAP1 PUSH2 0x10DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x6A SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD SWAP2 MLOAD DUP6 SWAP5 SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND DUP2 EQ DUP1 PUSH2 0x855 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x84A DUP5 PUSH2 0x32F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x865 JUMPI POP PUSH2 0x865 DUP2 DUP6 PUSH2 0x704 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ PUSH2 0x8E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x946 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH2 0x951 PUSH1 0x0 DUP3 PUSH2 0x732 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x97A SWAP1 DUP5 SWAP1 PUSH2 0x1076 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x9A8 SWAP1 DUP5 SWAP1 PUSH2 0x1109 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xA6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xAE2 DUP5 DUP5 DUP5 PUSH2 0x86D JUMP JUMPDEST PUSH2 0xAEE DUP5 DUP5 DUP5 DUP5 PUSH2 0xB9D JUMP JUMPDEST PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A4 SWAP1 PUSH2 0x111C JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xB17 DUP4 PUSH2 0xC9E JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB37 JUMPI PUSH2 0xB37 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB61 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xB6B JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xC93 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xBE1 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x116E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xC1C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xC19 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xC79 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xC4A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xC71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A4 SWAP1 PUSH2 0x111C JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x865 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xCDD JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xD09 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xD27 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xD3F JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xD53 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xD65 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x297 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xD8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6FD DUP2 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDC7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xDAF JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xDE8 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xDAC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x6FD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE60 DUP4 PUSH2 0xE28 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE8C DUP5 PUSH2 0xE28 JUMP JUMPDEST SWAP3 POP PUSH2 0xE9A PUSH1 0x20 DUP6 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6FD DUP3 PUSH2 0xE28 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xED8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE1 DUP4 PUSH2 0xE28 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF36 DUP6 PUSH2 0xE28 JUMP JUMPDEST SWAP4 POP PUSH2 0xF44 PUSH1 0x20 DUP7 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xF8E JUMPI PUSH2 0xF8E PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xFB6 JUMPI PUSH2 0xFB6 PUSH2 0xF01 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xFCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1006 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100F DUP4 PUSH2 0xE28 JUMP JUMPDEST SWAP2 POP PUSH2 0x101D PUSH1 0x20 DUP5 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x103A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x105A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x297 JUMPI PUSH2 0x297 PUSH2 0x1060 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x10EC DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xDAC JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1100 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xDAC JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x297 JUMPI PUSH2 0x297 PUSH2 0x1060 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x11A1 SWAP1 DUP4 ADD DUP5 PUSH2 0xDD0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6FD DUP2 PUSH2 0xD76 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0xA5 0xED NUMBER 0x24 SWAP15 SWAP15 ISZERO 0xC9 0xB9 0x1E 0xCD SWAP5 PUSH8 0x1E88A1BB2FD1A7A2 0xCB PUSH19 0x2A993BE51388071864736F6C63430008110033 ","sourceMap":"822:16512:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2275:344;;;;;;:::i;:::-;;:::i;:::-;;;565:14:14;;558:22;540:41;;528:2;513:18;2275:344:11;;;;;;;;3469:98;;;:::i;:::-;;;;;;;:::i;4993:217::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:14;;;1679:51;;1667:2;1652:18;4993:217:11;1533:203:14;4519:413:11;;;;;;:::i;:::-;;:::i;:::-;;2629:117;;;:::i;:::-;;;2324:25:14;;;2312:2;2297:18;2629:117:11;2178:177:14;5720:330:11;;;;;;:::i;:::-;;:::i;6116:179::-;;;;;;:::i;:::-;;:::i;3170:237::-;;;;;;:::i;:::-;3242:7;3277:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3277:16:11;;3170:237;2908:205;;;;;;:::i;:::-;;:::i;3631:102::-;;;:::i;5277:153::-;;;;;;:::i;:::-;;:::i;6361:320::-;;;;;;:::i;:::-;;:::i;3799:329::-;;;;;;:::i;:::-;;:::i;2756:93::-;2832:10;;2756:93;;5496:162;;;;;;:::i;:::-;;:::i;2275:344::-;2399:4;-1:-1:-1;;;;;;2434:51:11;;-1:-1:-1;;;2434:51:11;;:126;;-1:-1:-1;;;;;;;2501:59:11;;-1:-1:-1;;;2501:59:11;2434:126;:178;;;-1:-1:-1;;;;;;;;;;1168:51:6;;;2576:36:11;2415:197;2275:344;-1:-1:-1;;2275:344:11:o;3469:98::-;3523:13;3555:5;3548:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3469:98;:::o;4993:217::-;5069:7;8241:16;;;:7;:16;;;;;;-1:-1:-1;;;;;8241:16:11;5088:73;;;;-1:-1:-1;;;5088:73:11;;5363:2:14;5088:73:11;;;5345:21:14;5402:2;5382:18;;;5375:30;5441:34;5421:18;;;5414:62;-1:-1:-1;;;5492:18:14;;;5485:42;5544:19;;5088:73:11;;;;;;;;;-1:-1:-1;5179:24:11;;;;:15;:24;;;;;;-1:-1:-1;;;;;5179:24:11;;4993:217::o;4519:413::-;4599:13;3277:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3277:16:11;;;;4668:11;;;;;4660:57;;;;-1:-1:-1;;;4660:57:11;;5776:2:14;4660:57:11;;;5758:21:14;5815:2;5795:18;;;5788:30;5854:34;5834:18;;;5827:62;-1:-1:-1;;;5905:18:14;;;5898:31;5946:19;;4660:57:11;5574:397:14;4660:57:11;929:10:5;-1:-1:-1;;;;;4749:21:11;;;;:62;;-1:-1:-1;4774:37:11;4791:5;929:10:5;5496:162:11;:::i;4774:37::-;4728:165;;;;-1:-1:-1;;;4728:165:11;;6178:2:14;4728:165:11;;;6160:21:14;6217:2;6197:18;;;6190:30;6256:34;6236:18;;;6229:62;6327:26;6307:18;;;6300:54;6371:19;;4728:165:11;5976:420:14;4728:165:11;4904:21;4913:2;4917:7;4904:8;:21::i;:::-;4589:343;4519:413;;:::o;2629:117::-;2681:7;2720:19;;2707:10;;:32;;;;:::i;:::-;2700:39;;2629:117;:::o;5720:330::-;5909:41;929:10:5;5942:7:11;5909:18;:41::i;:::-;5901:103;;;;-1:-1:-1;;;5901:103:11;;;;;;;:::i;:::-;6015:28;6025:4;6031:2;6035:7;6015:9;:28::i;6116:179::-;6249:39;6266:4;6272:2;6276:7;6249:39;;;;;;;;;;;;:16;:39::i;2908:205::-;2980:7;-1:-1:-1;;;;;3007:19:11;;2999:74;;;;-1:-1:-1;;;2999:74:11;;7286:2:14;2999:74:11;;;7268:21:14;7325:2;7305:18;;;7298:30;7364:34;7344:18;;;7337:62;-1:-1:-1;;;7415:18:14;;;7408:40;7465:19;;2999:74:11;7084:406:14;2999:74:11;-1:-1:-1;;;;;;3090:16:11;;;;;:9;:16;;;;;;;2908:205::o;3631:102::-;3687:13;3719:7;3712:14;;;;;:::i;5277:153::-;5371:52;929:10:5;5404:8:11;5414;5371:18;:52::i;:::-;5277:153;;:::o;6361:320::-;6530:41;929:10:5;6563:7:11;6530:18;:41::i;:::-;6522:103;;;;-1:-1:-1;;;6522:103:11;;;;;;;:::i;:::-;6635:39;6649:4;6655:2;6659:7;6668:5;6635:13;:39::i;:::-;6361:320;;;;:::o;3799:329::-;8218:4;8241:16;;;:7;:16;;;;;;3872:13;;-1:-1:-1;;;;;8241:16:11;3897:76;;;;-1:-1:-1;;;3897:76:11;;7697:2:14;3897:76:11;;;7679:21:14;7736:2;7716:18;;;7709:30;7775:34;7755:18;;;7748:62;-1:-1:-1;;;7826:18:14;;;7819:45;7881:19;;3897:76:11;7495:411:14;3897:76:11;3984:21;4008:10;4446:9;;;;;;;;;-1:-1:-1;4446:9:11;;;4370:92;4008:10;3984:34;;4059:1;4041:7;4035:21;:25;:86;;;;;;;;;;;;;;;;;4087:7;4096:18;:7;:16;:18::i;:::-;4070:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4035:86;4028:93;3799:329;-1:-1:-1;;;3799:329:11:o;5496:162::-;-1:-1:-1;;;;;5616:25:11;;;5593:4;5616:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;5496:162::o;14183:183::-;14257:24;;;;:15;:24;;;;;;;;:29;;-1:-1:-1;;;;;;14257:29:11;-1:-1:-1;;;;;14257:29:11;;;;;;;;;3277:7;:16;;;;;;;14301:58;;14257:24;;3277:16;;;;;14301:58;;;14183:183;;:::o;8436:356::-;8529:4;8241:16;;;:7;:16;;;;;;-1:-1:-1;;;;;8241:16:11;8545:73;;;;-1:-1:-1;;;8545:73:11;;8614:2:14;8545:73:11;;;8596:21:14;8653:2;8633:18;;;8626:30;8692:34;8672:18;;;8665:62;-1:-1:-1;;;8743:18:14;;;8736:42;8795:19;;8545:73:11;8412:408:14;8545:73:11;8628:13;3277:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3277:16:11;;;;8697;;;;;:51;;;8741:7;-1:-1:-1;;;;;8717:31:11;:20;8729:7;8717:11;:20::i;:::-;-1:-1:-1;;;;;8717:31:11;;8697:51;:87;;;;8752:32;8769:5;8776:7;8752:16;:32::i;:::-;8689:96;8436:356;-1:-1:-1;;;;8436:356:11:o;13455:617::-;3242:7;3277:16;;;:7;:16;;;;;;-1:-1:-1;;;;;13582:43:11;;;3277:16;;13582:43;13574:93;;;;-1:-1:-1;;;13574:93:11;;9027:2:14;13574:93:11;;;9009:21:14;9066:2;9046:18;;;9039:30;9105:34;9085:18;;;9078:62;-1:-1:-1;;;9156:18:14;;;9149:35;9201:19;;13574:93:11;8825:401:14;13574:93:11;-1:-1:-1;;;;;13685:16:11;;13677:65;;;;-1:-1:-1;;;13677:65:11;;9433:2:14;13677:65:11;;;9415:21:14;9472:2;9452:18;;;9445:30;9511:34;9491:18;;;9484:62;-1:-1:-1;;;9562:18:14;;;9555:34;9606:19;;13677:65:11;9231:400:14;13677:65:11;13854:29;13871:1;13875:7;13854:8;:29::i;:::-;-1:-1:-1;;;;;13894:15:11;;;;;;:9;:15;;;;;:20;;13913:1;;13894:15;:20;;13913:1;;13894:20;:::i;:::-;;;;-1:-1:-1;;;;;;;13924:13:11;;;;;;:9;:13;;;;;:18;;13941:1;;13924:13;:18;;13941:1;;13924:18;:::i;:::-;;;;-1:-1:-1;;13952:16:11;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;13952:21:11;-1:-1:-1;;;;;13952:21:11;;;;;;;;;13989:27;;13952:16;;13989:27;;;;;;;4589:343;4519:413;;:::o;14501:307::-;14651:8;-1:-1:-1;;;;;14642:17:11;:5;-1:-1:-1;;;;;14642:17:11;;14634:55;;;;-1:-1:-1;;;14634:55:11;;9968:2:14;14634:55:11;;;9950:21:14;10007:2;9987:18;;;9980:30;10046:27;10026:18;;;10019:55;10091:18;;14634:55:11;9766:349:14;14634:55:11;-1:-1:-1;;;;;14699:25:11;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;14699:46:11;;;;;;;;;;14760:41;;540::14;;;14760::11;;513:18:14;14760:41:11;;;;;;;14501:307;;;:::o;7543:::-;7694:28;7704:4;7710:2;7714:7;7694:9;:28::i;:::-;7740:48;7763:4;7769:2;7773:7;7782:5;7740:22;:48::i;:::-;7732:111;;;;-1:-1:-1;;;7732:111:11;;;;;;;:::i;415:696:9:-;471:13;520:14;537:17;548:5;537:10;:17::i;:::-;557:1;537:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;595:18:9;-1:-1:-1;572:41:9;-1:-1:-1;733:28:9;;;749:2;733:28;788:280;-1:-1:-1;;819:5:9;-1:-1:-1;;;953:2:9;942:14;;937:30;819:5;924:44;1012:2;1003:11;;;-1:-1:-1;1032:21:9;788:280;1032:21;-1:-1:-1;1088:6:9;415:696;-1:-1:-1;;;415:696:9:o;15361:800:11:-;15511:4;-1:-1:-1;;;;;15531:13:11;;1465:19:8;:23;15527:628:11;;15566:83;;-1:-1:-1;;;15566:83:11;;-1:-1:-1;;;;;15566:47:11;;;;;:83;;929:10:5;;15628:4:11;;15634:7;;15643:5;;15566:83;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15566:83:11;;;;;;;;-1:-1:-1;;15566:83:11;;;;;;;;;;;;:::i;:::-;;;15562:541;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15827:6;:13;15844:1;15827:18;15823:266;;15869:60;;-1:-1:-1;;;15869:60:11;;;;;;;:::i;15823:266::-;16041:6;16035:13;16026:6;16022:2;16018:15;16011:38;15562:541;-1:-1:-1;;;;;;15699:62:11;-1:-1:-1;;;15699:62:11;;-1:-1:-1;15692:69:11;;15527:628;-1:-1:-1;16140:4:11;15361:800;;;;;;:::o;9889:890:10:-;9942:7;;-1:-1:-1;;;10017:15:10;;10013:99;;-1:-1:-1;;;10052:15:10;;;-1:-1:-1;10095:2:10;10085:12;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;-1:-1:-1;10207:2:10;10197:12;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;-1:-1:-1;10319:2:10;10309:12;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;-1:-1:-1;10429:1:10;10419:11;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;-1:-1:-1;10538:1:10;10528:11;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;-1:-1:-1;10647:1:10;10637:11;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;10766:6;9889:890;-1:-1:-1;;9889:890:10:o;14:131:14:-;-1:-1:-1;;;;;;88:32:14;;78:43;;68:71;;135:1;132;125:12;68:71;14:131;:::o;150:245::-;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:14;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:14;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:14:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:14;;1348:180;-1:-1:-1;1348:180:14:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:14;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:14:o;2360:328::-;2437:6;2445;2453;2506:2;2494:9;2485:7;2481:23;2477:32;2474:52;;;2522:1;2519;2512:12;2474:52;2545:29;2564:9;2545:29;:::i;:::-;2535:39;;2593:38;2627:2;2616:9;2612:18;2593:38;:::i;:::-;2583:48;;2678:2;2667:9;2663:18;2650:32;2640:42;;2360:328;;;;;:::o;2693:186::-;2752:6;2805:2;2793:9;2784:7;2780:23;2776:32;2773:52;;;2821:1;2818;2811:12;2773:52;2844:29;2863:9;2844:29;:::i;2884:347::-;2949:6;2957;3010:2;2998:9;2989:7;2985:23;2981:32;2978:52;;;3026:1;3023;3016:12;2978:52;3049:29;3068:9;3049:29;:::i;:::-;3039:39;;3128:2;3117:9;3113:18;3100:32;3175:5;3168:13;3161:21;3154:5;3151:32;3141:60;;3197:1;3194;3187:12;3141:60;3220:5;3210:15;;;2884:347;;;;;:::o;3236:127::-;3297:10;3292:3;3288:20;3285:1;3278:31;3328:4;3325:1;3318:15;3352:4;3349:1;3342:15;3368:1138;3463:6;3471;3479;3487;3540:3;3528:9;3519:7;3515:23;3511:33;3508:53;;;3557:1;3554;3547:12;3508:53;3580:29;3599:9;3580:29;:::i;:::-;3570:39;;3628:38;3662:2;3651:9;3647:18;3628:38;:::i;:::-;3618:48;;3713:2;3702:9;3698:18;3685:32;3675:42;;3768:2;3757:9;3753:18;3740:32;3791:18;3832:2;3824:6;3821:14;3818:34;;;3848:1;3845;3838:12;3818:34;3886:6;3875:9;3871:22;3861:32;;3931:7;3924:4;3920:2;3916:13;3912:27;3902:55;;3953:1;3950;3943:12;3902:55;3989:2;3976:16;4011:2;4007;4004:10;4001:36;;;4017:18;;:::i;:::-;4092:2;4086:9;4060:2;4146:13;;-1:-1:-1;;4142:22:14;;;4166:2;4138:31;4134:40;4122:53;;;4190:18;;;4210:22;;;4187:46;4184:72;;;4236:18;;:::i;:::-;4276:10;4272:2;4265:22;4311:2;4303:6;4296:18;4351:7;4346:2;4341;4337;4333:11;4329:20;4326:33;4323:53;;;4372:1;4369;4362:12;4323:53;4428:2;4423;4419;4415:11;4410:2;4402:6;4398:15;4385:46;4473:1;4468:2;4463;4455:6;4451:15;4447:24;4440:35;4494:6;4484:16;;;;;;;3368:1138;;;;;;;:::o;4511:260::-;4579:6;4587;4640:2;4628:9;4619:7;4615:23;4611:32;4608:52;;;4656:1;4653;4646:12;4608:52;4679:29;4698:9;4679:29;:::i;:::-;4669:39;;4727:38;4761:2;4750:9;4746:18;4727:38;:::i;:::-;4717:48;;4511:260;;;;;:::o;4776:380::-;4855:1;4851:12;;;;4898;;;4919:61;;4973:4;4965:6;4961:17;4951:27;;4919:61;5026:2;5018:6;5015:14;4995:18;4992:38;4989:161;;5072:10;5067:3;5063:20;5060:1;5053:31;5107:4;5104:1;5097:15;5135:4;5132:1;5125:15;4989:161;;4776:380;;;:::o;6401:127::-;6462:10;6457:3;6453:20;6450:1;6443:31;6493:4;6490:1;6483:15;6517:4;6514:1;6507:15;6533:128;6600:9;;;6621:11;;;6618:37;;;6635:18;;:::i;6666:413::-;6868:2;6850:21;;;6907:2;6887:18;;;6880:30;6946:34;6941:2;6926:18;;6919:62;-1:-1:-1;;;7012:2:14;6997:18;;6990:47;7069:3;7054:19;;6666:413::o;7911:496::-;8090:3;8128:6;8122:13;8144:66;8203:6;8198:3;8191:4;8183:6;8179:17;8144:66;:::i;:::-;8273:13;;8232:16;;;;8295:70;8273:13;8232:16;8342:4;8330:17;;8295:70;:::i;:::-;8381:20;;7911:496;-1:-1:-1;;;;7911:496:14:o;9636:125::-;9701:9;;;9722:10;;;9719:36;;;9735:18;;:::i;10120:414::-;10322:2;10304:21;;;10361:2;10341:18;;;10334:30;10400:34;10395:2;10380:18;;10373:62;-1:-1:-1;;;10466:2:14;10451:18;;10444:48;10524:3;10509:19;;10120:414::o;10671:489::-;-1:-1:-1;;;;;10940:15:14;;;10922:34;;10992:15;;10987:2;10972:18;;10965:43;11039:2;11024:18;;11017:34;;;11087:3;11082:2;11067:18;;11060:31;;;10865:4;;11108:46;;11134:19;;11126:6;11108:46;:::i;:::-;11100:54;10671:489;-1:-1:-1;;;;;;10671:489:14:o;11165:249::-;11234:6;11287:2;11275:9;11266:7;11262:23;11258:32;11255:52;;;11303:1;11300;11293:12;11255:52;11335:9;11329:16;11354:30;11378:5;11354:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"921200","executionCost":"955","totalCost":"922155"},"external":{"approve(address,uint256)":"33390","balanceOf(address)":"2634","getApproved(uint256)":"4760","isApprovedForAll(address,address)":"infinite","maxSupply()":"2358","name()":"infinite","ownerOf(uint256)":"2500","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26772","supportsInterface(bytes4)":"534","symbol()":"infinite","tokenURI(uint256)":"infinite","totalSupply()":"4538","transferFrom(address,address,uint256)":"infinite"},"internal":{"__ERC721r_init(string memory,string memory,uint256)":"infinite","__ERC721r_init_unchained(string memory,string memory,uint256)":"infinite","_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,uint256)":"28431","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"infinite","_isApprovedOrOwner(address,uint256)":"infinite","_mintAtIndex(address,uint256)":"infinite","_mintIdWithoutBalanceUpdate(address,uint256)":"infinite","_mintRandom(address,uint256)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite","getAvailableTokenAtIndex(uint256,uint256)":"infinite","getRandomAvailableTokenId(address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","maxSupply()":"d5abeb01","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension. This does random batch minting.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721rUpgradeable.sol\":\"ERC721rUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ERC721rUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension. This does random batch minting.\\n */\\ncontract ERC721rUpgradeable is ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n    \\n    mapping(uint => uint) private _availableTokens;\\n    uint256 private _numAvailableTokens;\\n    uint256 private _maxSupply;\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721r_init(string memory name_, string memory symbol_, uint maxSupply_) internal onlyInitializing {\\n        __ERC721r_init_unchained(name_, symbol_, maxSupply_);\\n    }\\n\\n    function __ERC721r_init_unchained(string memory name_, string memory symbol_, uint maxSupply_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _maxSupply = maxSupply_;\\n        _numAvailableTokens = maxSupply_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n    \\n    function totalSupply() public view virtual returns (uint256) {\\n        return _maxSupply - _numAvailableTokens;\\n    }\\n    \\n    function maxSupply() public view virtual returns (uint256) {\\n        return _maxSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        //require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721rUpgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721rUpgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mintIdWithoutBalanceUpdate(address to, uint256 tokenId) private {\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n        \\n        _owners[tokenId] = to;\\n        \\n        emit Transfer(address(0), to, tokenId);\\n        \\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    function _mintRandom(address to, uint _numToMint) internal virtual returns(uint[] memory){\\n        require(_msgSender() == tx.origin, \\\"Contracts cannot mint\\\");\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(_numToMint > 0, \\\"ERC721r: need to mint at least one token\\\");\\n        \\n        // TODO: Probably don't need this as it will underflow and revert automatically in this case\\n        require(_numAvailableTokens >= _numToMint, \\\"ERC721r: minting more tokens than available\\\");\\n        \\n        uint updatedNumAvailableTokens = _numAvailableTokens;\\n        uint[] memory res = new uint[](_numToMint);\\n        for (uint256 i; i < _numToMint; ++i) { // Do this ++ unchecked?\\n            uint256 tokenId = getRandomAvailableTokenId(to, updatedNumAvailableTokens);\\n            res[i] = tokenId;\\n            _mintIdWithoutBalanceUpdate(to, tokenId);\\n            \\n            --updatedNumAvailableTokens;\\n        }\\n        \\n        _numAvailableTokens = updatedNumAvailableTokens;\\n        _balances[to] += _numToMint;\\n        return res;\\n    }\\n        \\n    function getRandomAvailableTokenId(address to, uint updatedNumAvailableTokens)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 randomNum = uint256(\\n            keccak256(\\n                abi.encode(\\n                    to,\\n                    tx.gasprice,\\n                    block.number,\\n                    block.timestamp,\\n                    block.difficulty,\\n                    blockhash(block.number - 1),\\n                    address(this),\\n                    updatedNumAvailableTokens\\n                )\\n            )\\n        );\\n        uint256 randomIndex = randomNum % updatedNumAvailableTokens;\\n        return getAvailableTokenAtIndex(randomIndex, updatedNumAvailableTokens);\\n    }\\n\\n    // Implements https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle. Code taken from CryptoPhunksV2\\n    function getAvailableTokenAtIndex(uint256 indexToUse, uint updatedNumAvailableTokens)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 valAtIndex = _availableTokens[indexToUse];\\n        uint256 result;\\n        if (valAtIndex == 0) {\\n            // This means the index itself is still an available token\\n            result = indexToUse;\\n        } else {\\n            // This means the index itself is not an available token, but the val at that index is.\\n            result = valAtIndex;\\n        }\\n\\n        uint256 lastIndex = updatedNumAvailableTokens - 1;\\n        uint256 lastValInArray = _availableTokens[lastIndex];\\n        if (indexToUse != lastIndex) {\\n            // Replace the value at indexToUse, now that it's been used.\\n            // Replace it with the data from the last index in the array, since we are going to decrease the array size afterwards.\\n            if (lastValInArray == 0) {\\n                // This means the index itself is still an available token\\n                _availableTokens[indexToUse] = lastIndex;\\n            } else {\\n                // This means the index itself is not an available token, but the val at that index is.\\n                _availableTokens[indexToUse] = lastValInArray;\\n            }\\n        }\\n        if (lastValInArray != 0) {\\n            // Gas refund courtsey of @dievardump\\n            delete _availableTokens[lastIndex];\\n        }\\n        \\n        return result;\\n    }\\n    \\n    // Not as good as minting a specific tokenId, but will behave the same at the start\\n    // allowing you to explicitly mint some tokens at launch.\\n    function _mintAtIndex(address to, uint index) internal virtual {\\n        require(_msgSender() == tx.origin, \\\"Contracts cannot mint\\\");\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(_numAvailableTokens >= 1, \\\"ERC721r: minting more tokens than available\\\");\\n        \\n        uint tokenId = getAvailableTokenAtIndex(index, _numAvailableTokens);\\n        --_numAvailableTokens;\\n        \\n        _mintIdWithoutBalanceUpdate(to, tokenId);\\n        \\n        _balances[to] += 1;\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721rUpgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721rUpgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\",\"keccak256\":\"0x358e921923f1cd2a0a986c13f03949f8e1d087b92fcbd169cb426099428d29e6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":9,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":654,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":698,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":2107,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"_name","offset":0,"slot":"101","type":"t_string_storage"},{"astId":2109,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"_symbol","offset":0,"slot":"102","type":"t_string_storage"},{"astId":2113,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"_availableTokens","offset":0,"slot":"103","type":"t_mapping(t_uint256,t_uint256)"},{"astId":2115,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"_numAvailableTokens","offset":0,"slot":"104","type":"t_uint256"},{"astId":2117,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"_maxSupply","offset":0,"slot":"105","type":"t_uint256"},{"astId":2121,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"_owners","offset":0,"slot":"106","type":"t_mapping(t_uint256,t_address)"},{"astId":2125,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"_balances","offset":0,"slot":"107","type":"t_mapping(t_address,t_uint256)"},{"astId":2129,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"_tokenApprovals","offset":0,"slot":"108","type":"t_mapping(t_uint256,t_address)"},{"astId":2135,"contract":"contracts/ERC721rUpgradeable.sol:ERC721rUpgradeable","label":"_operatorApprovals","offset":0,"slot":"109","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/HashPunk.sol":{"HashPunk":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"Hpoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"base","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseMetadataURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getUserToRareIds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"hValue","outputs":[{"internalType":"contract IHValue","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_uri","type":"string"},{"internalType":"address","name":"_hValue","type":"address"},{"internalType":"uint256","name":"_base","type":"uint256"},{"internalType":"uint256","name":"_passIdBase","type":"uint256"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"luckyEnd","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"luckyStart","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"passId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"passIdBase","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_base","type":"uint256"}],"name":"setBase","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"baseUri","type":"string"}],"name":"setBaseUri","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IHValue","name":"_hValue","type":"address"}],"name":"setHValue","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_passIdBase","type":"uint256"}],"name":"setPassIdBase","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"userToRareIds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"voucher","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0x73 SSTORE PUSH2 0x1F4 PUSH1 0x74 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2485 DUP1 PUSH2 0x2B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1FB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x11A JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0xCDDA418C EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0xD5ABEB01 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0xF7E056EE EQ PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3C8 JUMPI DUP1 PUSH4 0xA8A86457 EQ PUSH2 0x3DB JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3EE JUMPI DUP1 PUSH4 0xBFC52443 EQ PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0x9332C9A5 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0xA0BCFC7F EQ PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x80893C17 EQ PUSH2 0x363 JUMPI DUP1 PUSH4 0x83D18F7A EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0x89BE0AD1 EQ PUSH2 0x374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1E214F06 GT PUSH2 0x192 JUMPI DUP1 PUSH4 0x444B7AAF GT PUSH2 0x161 JUMPI DUP1 PUSH4 0x444B7AAF EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x5001F3B5 EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0x5B2BD79E EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1E214F06 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0x38E80F68 EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1CE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0xE471525 EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x1B2EF1CA EQ PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x178F6B9 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x252 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x213 PUSH2 0x20E CALLDATASIZE PUSH1 0x4 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0x460 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x228 PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C5E JUMP JUMPDEST PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x245 PUSH2 0x507 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x234 SWAP2 SWAP1 PUSH2 0x1CCB JUMP JUMPDEST PUSH2 0x265 PUSH2 0x260 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0x599 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x234 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF7 JUMP JUMPDEST PUSH2 0x62E JUMP JUMPDEST PUSH2 0x299 PUSH1 0x73 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x234 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x741 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x2BD CALLDATASIZE PUSH1 0x4 PUSH2 0x1D23 JUMP JUMPDEST PUSH2 0x758 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x2D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0xCBE JUMP JUMPDEST PUSH2 0x213 PUSH2 0x2E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E50 JUMP JUMPDEST PUSH2 0xE56 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0xE87 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E50 JUMP JUMPDEST PUSH2 0xEB6 JUMP JUMPDEST PUSH2 0x299 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x299 PUSH1 0x6F SLOAD DUP2 JUMP JUMPDEST PUSH2 0x245 PUSH2 0xED1 JUMP JUMPDEST PUSH2 0x265 PUSH2 0x335 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CDE JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x35E CALLDATASIZE PUSH1 0x4 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0xF5F JUMP JUMPDEST PUSH2 0x299 PUSH1 0x6E SLOAD DUP2 JUMP JUMPDEST PUSH2 0x299 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x71 SLOAD PUSH2 0x265 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH2 0x265 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x245 PUSH2 0x1015 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x3C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E91 JUMP JUMPDEST PUSH2 0x1024 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x3D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x105E JUMP JUMPDEST PUSH2 0x299 PUSH2 0x3E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF7 JUMP JUMPDEST PUSH2 0x1069 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x3FC CALLDATASIZE PUSH1 0x4 PUSH2 0x1F04 JUMP JUMPDEST PUSH2 0x109A JUMP JUMPDEST PUSH2 0x414 PUSH2 0x40F CALLDATASIZE PUSH1 0x4 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0x10D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x234 SWAP2 SWAP1 PUSH2 0x1F84 JUMP JUMPDEST PUSH2 0x245 PUSH2 0x42F CALLDATASIZE PUSH1 0x4 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0x113E JUMP JUMPDEST PUSH2 0x299 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FC8 JUMP JUMPDEST PUSH2 0x1172 JUMP JUMPDEST PUSH2 0x299 PUSH1 0x74 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x71 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x493 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x70 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x4E6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x501 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x65 DUP1 SLOAD PUSH2 0x516 SWAP1 PUSH2 0x2037 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x542 SWAP1 PUSH2 0x2037 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x58F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x564 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x58F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x572 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x612 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 SWAP1 SUB PUSH2 0x6A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x6C0 JUMPI POP PUSH2 0x6C0 DUP2 CALLER PUSH2 0x1172 JUMP JUMPDEST PUSH2 0x732 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH2 0x73C DUP4 DUP4 PUSH2 0x11A0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x68 SLOAD PUSH1 0x69 SLOAD PUSH2 0x753 SWAP2 SWAP1 PUSH2 0x2087 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST ORIGIN CALLER EQ PUSH2 0x781 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x1 DUP3 EQ DUP1 PUSH2 0x790 JUMPI POP PUSH1 0x2 DUP3 EQ JUMPDEST PUSH2 0x7C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x1A5B9D985B1A59081A59 PUSH1 0xB2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x1 DUP3 SUB PUSH2 0x9B4 JUMPI DUP1 PUSH1 0x6E SLOAD PUSH2 0x7DF SWAP2 SWAP1 PUSH2 0x209A JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x40 MLOAD PUSH3 0x7EEAC7 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH3 0xFDD58E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x82C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x850 SWAP2 SWAP1 PUSH2 0x20B1 JUMP JUMPDEST LT ISZERO PUSH2 0x89E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E74205061737320436172642062616C616E63650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x6E SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF5298ACA SWAP1 CALLER SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x8C6 SWAP1 DUP7 SWAP1 PUSH2 0x209A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x914 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x928 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x936 CALLER DUP3 PUSH2 0x1207 JUMP JUMPDEST POP PUSH1 0x70 SLOAD PUSH1 0x40 MLOAD PUSH4 0x731133E9 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x731133E9 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x998 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x6F SLOAD PUSH2 0x9C2 SWAP2 SWAP1 PUSH2 0x209A JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4C25E11F PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4C25E11F SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA2E SWAP2 SWAP1 PUSH2 0x20B1 JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x40 MLOAD PUSH3 0x7EEAC7 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH3 0xFDD58E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA9F SWAP2 SWAP1 PUSH2 0x20B1 JUMP JUMPDEST PUSH2 0xAA9 SWAP2 SWAP1 PUSH2 0x2087 JUMP JUMPDEST LT ISZERO PUSH2 0xAF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E74204856616C75652062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x6F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF5298ACA SWAP1 CALLER SWAP1 PUSH1 0x2 SWAP1 PUSH2 0xB1F SWAP1 DUP7 SWAP1 PUSH2 0x209A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0xB91 CALLER DUP4 PUSH2 0x1207 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC3F JUMPI PUSH1 0x73 SLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBB4 JUMPI PUSH2 0xBB4 PUSH2 0x20CA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO DUP1 ISZERO PUSH2 0xBE5 JUMPI POP PUSH1 0x74 SLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBDA JUMPI PUSH2 0xBDA PUSH2 0x20CA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO JUMPDEST ISZERO PUSH2 0xC2D JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x75 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 MLOAD DUP4 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xC0D JUMPI PUSH2 0xC0D PUSH2 0x20CA JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD SSTORE JUMPDEST DUP1 PUSH2 0xC37 DUP2 PUSH2 0x20E0 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB96 JUMP JUMPDEST POP PUSH1 0x70 SLOAD PUSH1 0x40 MLOAD PUSH4 0x731133E9 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x731133E9 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0xCDE JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xCF8 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCF8 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xD5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xD7E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0xDC5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x4861736850756E6B PUSH1 0xC0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x485 PUSH1 0xF4 SHL DUP2 MSTORE POP PUSH2 0xBB8 PUSH2 0x1452 JUMP JUMPDEST PUSH1 0x6E DUP3 SWAP1 SSTORE PUSH1 0x6F DUP4 SWAP1 SSTORE PUSH1 0x70 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE PUSH1 0x72 PUSH2 0xDF6 DUP7 DUP3 PUSH2 0x213F JUMP JUMPDEST POP PUSH1 0x71 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xE4F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE60 CALLER DUP3 PUSH2 0x1484 JUMP JUMPDEST PUSH2 0xE7C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x21FF JUMP JUMPDEST PUSH2 0x73C DUP4 DUP4 DUP4 PUSH2 0x1572 JUMP JUMPDEST PUSH1 0x71 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x6F SSTORE JUMP JUMPDEST PUSH2 0x73C DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x109A JUMP JUMPDEST PUSH1 0x72 DUP1 SLOAD PUSH2 0xEDE SWAP1 PUSH2 0x2037 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF0A SWAP1 PUSH2 0x2037 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF57 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF2C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF57 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF3A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xFCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x71 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1010 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x6E SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x66 DUP1 SLOAD PUSH2 0x516 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x71 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x104E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x72 PUSH2 0x105A DUP3 DUP3 PUSH2 0x213F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x105A CALLER DUP4 DUP4 PUSH2 0x170E JUMP JUMPDEST PUSH1 0x75 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1085 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x10A4 CALLER DUP4 PUSH2 0x1484 JUMP JUMPDEST PUSH2 0x10C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x21FF JUMP JUMPDEST PUSH2 0x10CC DUP5 DUP5 DUP5 DUP5 PUSH2 0x17DC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x75 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1132 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x111E JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x72 PUSH2 0x114B DUP4 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x115C SWAP3 SWAP2 SWAP1 PUSH2 0x2250 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x6A SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD SWAP2 MLOAD DUP6 SWAP5 SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP JUMP JUMPDEST PUSH1 0x60 CALLER ORIGIN EQ PUSH2 0x1250 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DBDB9D1C9858DD1CC818D85B9B9BDD081B5A5B9D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x12A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x1307 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231723A206E65656420746F206D696E74206174206C65617374206F PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x3732903A37B5B2B7 PUSH1 0xC1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST DUP2 PUSH1 0x68 SLOAD LT ISZERO PUSH2 0x136D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231723A206D696E74696E67206D6F726520746F6B656E7320746861 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E20617661696C61626C65 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x138B JUMPI PUSH2 0x138B PUSH2 0x1D45 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13B4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1416 JUMPI PUSH1 0x0 PUSH2 0x13CE DUP8 DUP6 PUSH2 0x193B JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x13E3 JUMPI PUSH2 0x13E3 PUSH2 0x20CA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x13F9 DUP8 DUP3 PUSH2 0x19CD JUMP JUMPDEST PUSH2 0x1402 DUP5 PUSH2 0x22D7 JUMP JUMPDEST SWAP4 POP POP DUP1 PUSH2 0x140F SWAP1 PUSH2 0x20E0 JUMP JUMPDEST SWAP1 POP PUSH2 0x13BA JUMP JUMPDEST POP PUSH1 0x68 DUP3 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP7 SWAP3 SWAP1 PUSH2 0x1444 SWAP1 DUP5 SWAP1 PUSH2 0x22EE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1479 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x2301 JUMP JUMPDEST PUSH2 0x73C DUP4 DUP4 DUP4 PUSH2 0x1A26 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1517 JUMPI POP PUSH1 0x1 PUSH2 0x501 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND DUP2 EQ DUP1 PUSH2 0x155A JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x154F DUP5 PUSH2 0x599 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x156A JUMPI POP PUSH2 0x156A DUP2 DUP6 PUSH2 0x1172 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ PUSH2 0x15E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x164B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH2 0x1656 PUSH1 0x0 DUP3 PUSH2 0x11A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x167F SWAP1 DUP5 SWAP1 PUSH2 0x2087 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x16AD SWAP1 DUP5 SWAP1 PUSH2 0x22EE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x176F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x17E7 DUP5 DUP5 DUP5 PUSH2 0x1572 JUMP JUMPDEST PUSH2 0x17F3 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1A73 JUMP JUMPDEST PUSH2 0x10CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x234C JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0x1836 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1860 JUMPI DUP1 PUSH2 0x184A DUP2 PUSH2 0x20E0 JUMP JUMPDEST SWAP2 POP PUSH2 0x1859 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x23B4 JUMP JUMPDEST SWAP2 POP PUSH2 0x183A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x187B JUMPI PUSH2 0x187B PUSH2 0x1D45 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x18A5 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 JUMPDEST DUP6 ISZERO PUSH2 0x1932 JUMPI PUSH2 0x18BB PUSH1 0x1 DUP3 PUSH2 0x2087 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18CA PUSH1 0xA DUP9 PUSH2 0x23B4 JUMP JUMPDEST PUSH2 0x18D5 SWAP1 PUSH1 0xA PUSH2 0x209A JUMP JUMPDEST PUSH2 0x18DF SWAP1 DUP9 PUSH2 0x2087 JUMP JUMPDEST PUSH2 0x18EA SWAP1 PUSH1 0x30 PUSH2 0x23C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xF8 SHL SWAP1 POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1907 JUMPI PUSH2 0x1907 PUSH2 0x20CA JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x1929 PUSH1 0xA DUP10 PUSH2 0x23B4 JUMP JUMPDEST SWAP8 POP POP POP PUSH2 0x18AA JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GASPRICE NUMBER TIMESTAMP DIFFICULTY PUSH2 0x194E PUSH1 0x1 DUP5 PUSH2 0x2087 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND PUSH1 0x20 DUP9 ADD MSTORE DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE BLOCKHASH PUSH1 0xC0 DUP3 ADD MSTORE ADDRESS PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP2 ADD DUP5 SWAP1 MSTORE PUSH2 0x120 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x19B8 DUP5 DUP4 PUSH2 0x23E1 JUMP JUMPDEST SWAP1 POP PUSH2 0x19C4 DUP2 DUP6 PUSH2 0x1B74 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x2301 JUMP JUMPDEST PUSH1 0x65 PUSH2 0x1A59 DUP5 DUP3 PUSH2 0x213F JUMP JUMPDEST POP PUSH1 0x66 PUSH2 0x1A66 DUP4 DUP3 PUSH2 0x213F JUMP JUMPDEST POP PUSH1 0x69 DUP2 SWAP1 SSTORE PUSH1 0x68 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1B69 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1AB7 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x23F5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1AF2 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1AEF SWAP2 DUP2 ADD SWAP1 PUSH2 0x2432 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1B4F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1B20 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1B47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x234C JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x156A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 DUP2 DUP2 SUB PUSH2 0x1B92 JUMPI POP DUP4 PUSH2 0x1B95 JUMP JUMPDEST POP DUP1 JUMPDEST PUSH1 0x0 PUSH2 0x1BA2 PUSH1 0x1 DUP7 PUSH2 0x2087 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP7 DUP3 EQ PUSH2 0x1BEB JUMPI DUP1 PUSH1 0x0 SUB PUSH2 0x1BD9 JUMPI PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 SWAP1 SSTORE PUSH2 0x1BEB JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST DUP1 ISZERO PUSH2 0x1C01 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1C21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1C41 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1C21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1C41 DUP2 PUSH2 0x1C48 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C96 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C7E JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1CB7 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1C7B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1C41 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1C9F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1D15 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x1D76 JUMPI PUSH2 0x1D76 PUSH2 0x1D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1D9E JUMPI PUSH2 0x1D9E PUSH2 0x1D45 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x1DB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1DE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C41 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1D5B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1E07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E2A DUP8 DUP3 DUP9 ADD PUSH2 0x1DD1 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1E3B DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1E70 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1E80 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1EBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156A DUP5 DUP3 DUP6 ADD PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1ED9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1EE4 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1EF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1F1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1F25 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1F35 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x1F69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F78 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1D5B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1FBC JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1FA0 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1FE6 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1EF9 DUP2 PUSH2 0x1C0C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x4861736850756E6B3A2063616C6C6572206973206E6F7420746865206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x204B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x206B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x501 JUMPI PUSH2 0x501 PUSH2 0x2071 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x501 JUMPI PUSH2 0x501 PUSH2 0x2071 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x20F2 JUMPI PUSH2 0x20F2 PUSH2 0x2071 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2120 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9AC JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x212C JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2159 JUMPI PUSH2 0x2159 PUSH2 0x1D45 JUMP JUMPDEST PUSH2 0x216D DUP2 PUSH2 0x2167 DUP5 SLOAD PUSH2 0x2037 JUMP JUMPDEST DUP5 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x21A2 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x218A JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x9AC JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x21D1 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x21B2 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x21EF JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD PUSH2 0x225E DUP2 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x2276 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x228B JUMPI PUSH2 0x22BA JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x22BA JUMP JUMPDEST DUP9 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x22B1 JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x2298 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP POP POP POP DUP4 MLOAD PUSH2 0x22CE DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1C7B JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x22E6 JUMPI PUSH2 0x22E6 PUSH2 0x2071 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x501 JUMPI PUSH2 0x501 PUSH2 0x2071 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x23C3 JUMPI PUSH2 0x23C3 PUSH2 0x239E JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0xFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0x501 JUMPI PUSH2 0x501 PUSH2 0x2071 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x23F0 JUMPI PUSH2 0x23F0 PUSH2 0x239E JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2428 SWAP1 DUP4 ADD DUP5 PUSH2 0x1C9F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2444 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C41 DUP2 PUSH2 0x1C48 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ DIV STATICCALL 0x24 0x2E DUP15 SSTORE CALLDATACOPY SSTORE 0xD8 0xF6 CREATE 0xFB PUSH13 0xF1B866A83F18800DBAC1C43EFA BYTE MOD 0x2E SWAP7 RETURNDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"125:3451:12:-:0;;;1055:1:13;1012:44;;1105:3;1062:46;;125:3451:12;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@Hpoint_3670":{"entryPoint":null,"id":3670,"parameterSlots":0,"returnSlots":0},"@__ERC721r_init_2154":{"entryPoint":5202,"id":2154,"parameterSlots":3,"returnSlots":0},"@__ERC721r_init_unchained_2182":{"entryPoint":6694,"id":2182,"parameterSlots":3,"returnSlots":0},"@_afterTokenTransfer_3153":{"entryPoint":null,"id":3153,"parameterSlots":3,"returnSlots":0},"@_approve_3037":{"entryPoint":4512,"id":3037,"parameterSlots":2,"returnSlots":0},"@_beforeTokenTransfer_3142":{"entryPoint":null,"id":3142,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_3131":{"entryPoint":6771,"id":3131,"parameterSlots":4,"returnSlots":1},"@_exists_2566":{"entryPoint":null,"id":2566,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_3598":{"entryPoint":5252,"id":3598,"parameterSlots":2,"returnSlots":1},"@_mintIdWithoutBalanceUpdate_2648":{"entryPoint":6605,"id":2648,"parameterSlots":2,"returnSlots":0},"@_mintRandom_2751":{"entryPoint":4615,"id":2751,"parameterSlots":2,"returnSlots":1},"@_msgSender_640":{"entryPoint":null,"id":640,"parameterSlots":0,"returnSlots":1},"@_safeTransfer_2548":{"entryPoint":6108,"id":2548,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_3069":{"entryPoint":5902,"id":3069,"parameterSlots":3,"returnSlots":0},"@_transfer_3013":{"entryPoint":5490,"id":3013,"parameterSlots":3,"returnSlots":0},"@_uint2str_3546":{"entryPoint":6159,"id":3546,"parameterSlots":1,"returnSlots":1},"@approve_2387":{"entryPoint":1582,"id":2387,"parameterSlots":2,"returnSlots":0},"@balanceOf_2255":{"entryPoint":3935,"id":2255,"parameterSlots":1,"returnSlots":1},"@baseMetadataURI_3684":{"entryPoint":3793,"id":3684,"parameterSlots":0,"returnSlots":0},"@base_3677":{"entryPoint":null,"id":3677,"parameterSlots":0,"returnSlots":0},"@getApproved_2408":{"entryPoint":1433,"id":2408,"parameterSlots":1,"returnSlots":1},"@getAvailableTokenAtIndex_2883":{"entryPoint":7028,"id":2883,"parameterSlots":2,"returnSlots":1},"@getRandomAvailableTokenId_2803":{"entryPoint":6459,"id":2803,"parameterSlots":2,"returnSlots":1},"@getUserToRareIds_3611":{"entryPoint":4306,"id":3611,"parameterSlots":1,"returnSlots":1},"@hValue_3680":{"entryPoint":null,"id":3680,"parameterSlots":0,"returnSlots":0},"@initialize_3205":{"entryPoint":3262,"id":3205,"parameterSlots":4,"returnSlots":0},"@isApprovedForAll_2443":{"entryPoint":4466,"id":2443,"parameterSlots":2,"returnSlots":1},"@isContract_347":{"entryPoint":null,"id":347,"parameterSlots":1,"returnSlots":1},"@isContract_729":{"entryPoint":null,"id":729,"parameterSlots":1,"returnSlots":1},"@luckyEnd_3690":{"entryPoint":null,"id":3690,"parameterSlots":0,"returnSlots":0},"@luckyStart_3687":{"entryPoint":null,"id":3687,"parameterSlots":0,"returnSlots":0},"@maxSupply_2231":{"entryPoint":null,"id":2231,"parameterSlots":0,"returnSlots":1},"@mint_3380":{"entryPoint":1880,"id":3380,"parameterSlots":2,"returnSlots":0},"@name_2283":{"entryPoint":1287,"id":2283,"parameterSlots":0,"returnSlots":1},"@ownerOf_2273":{"entryPoint":null,"id":2273,"parameterSlots":1,"returnSlots":1},"@owner_3682":{"entryPoint":null,"id":3682,"parameterSlots":0,"returnSlots":0},"@passIdBase_3675":{"entryPoint":null,"id":3675,"parameterSlots":0,"returnSlots":0},"@passId_3667":{"entryPoint":null,"id":3667,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_2489":{"entryPoint":3766,"id":2489,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_2519":{"entryPoint":4250,"id":2519,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_2425":{"entryPoint":4190,"id":2425,"parameterSlots":2,"returnSlots":0},"@setBaseUri_3393":{"entryPoint":4132,"id":3393,"parameterSlots":1,"returnSlots":0},"@setBase_3438":{"entryPoint":3719,"id":3438,"parameterSlots":1,"returnSlots":0},"@setHValue_3451":{"entryPoint":1120,"id":3451,"parameterSlots":1,"returnSlots":0},"@setPassIdBase_3426":{"entryPoint":4070,"id":3426,"parameterSlots":1,"returnSlots":0},"@supportsInterface_2213":{"entryPoint":1205,"id":2213,"parameterSlots":1,"returnSlots":1},"@supportsInterface_693":{"entryPoint":null,"id":693,"parameterSlots":1,"returnSlots":1},"@symbol_2293":{"entryPoint":4117,"id":2293,"parameterSlots":0,"returnSlots":1},"@tokenURI_3414":{"entryPoint":4414,"id":3414,"parameterSlots":1,"returnSlots":1},"@totalSupply_2223":{"entryPoint":1857,"id":2223,"parameterSlots":0,"returnSlots":1},"@transferFrom_2470":{"entryPoint":3670,"id":2470,"parameterSlots":3,"returnSlots":0},"@userToRareIds_3695":{"entryPoint":4201,"id":3695,"parameterSlots":0,"returnSlots":0},"@voucher_3673":{"entryPoint":null,"id":3673,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_string":{"entryPoint":7515,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_string":{"entryPoint":7633,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":8136,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":7760,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":7940,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":7878,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":7415,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":7262,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":9266,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IHValue_$3664":{"entryPoint":7204,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":7825,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_addresst_uint256t_uint256":{"entryPoint":7665,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint256":{"entryPoint":7390,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":8369,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":7459,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_string":{"entryPoint":7327,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8784,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9205,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_bytes32_t_address_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_bytes32_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":9,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8068,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IHValue_$3664__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7371,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9036,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2c270178c73806a8dbbf8aad0f9eb77e61abe0b7a93239d42f99fae572eed526__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_32a53888ca69a743bbaa97a0e7d9316f442fadccf6d37bbebbe9ab28e7024e3e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_71947446ca525a6f47b4c26e39d45a716107b5eb5547cf11856e8d61c0fa00ba__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8182,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8dab769bb3e1b4a60276b85ee01ccc68a7073052ca1cb5124502172cc6982bf4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ffa3719eede42d3318b3817081dd67bc4c18fb5a15d06600fb820769c5c8571__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_bb31380de390e4e0627ca842496a815f4aa25ce62aeb0a04ee78aed6e6c12b62__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8703,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8961,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc7e415b4d71800746fd56cd2e9f99a70019c07d161e9e43d2fe64c358808e78__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":8942,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint8":{"entryPoint":9160,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":9140,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":8346,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":8327,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":8441,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":8511,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":7291,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":8919,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":8247,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":8416,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":9185,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":8305,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":9118,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":8394,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7493,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":7240,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_contract_IHValue":{"entryPoint":7180,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:24450:14","statements":[{"nodeType":"YulBlock","src":"6:3:14","statements":[]},{"body":{"nodeType":"YulBlock","src":"68:86:14","statements":[{"body":{"nodeType":"YulBlock","src":"132:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"141:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"144:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"134:6:14"},"nodeType":"YulFunctionCall","src":"134:12:14"},"nodeType":"YulExpressionStatement","src":"134:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"91:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"102:5:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"117:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"122:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"113:3:14"},"nodeType":"YulFunctionCall","src":"113:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"126:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"109:3:14"},"nodeType":"YulFunctionCall","src":"109:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"98:3:14"},"nodeType":"YulFunctionCall","src":"98:31:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"88:2:14"},"nodeType":"YulFunctionCall","src":"88:42:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"81:6:14"},"nodeType":"YulFunctionCall","src":"81:50:14"},"nodeType":"YulIf","src":"78:70:14"}]},"name":"validator_revert_contract_IHValue","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"57:5:14","type":""}],"src":"14:140:14"},{"body":{"nodeType":"YulBlock","src":"245:186:14","statements":[{"body":{"nodeType":"YulBlock","src":"291:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"300:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"303:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"293:6:14"},"nodeType":"YulFunctionCall","src":"293:12:14"},"nodeType":"YulExpressionStatement","src":"293:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"266:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"275:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"262:3:14"},"nodeType":"YulFunctionCall","src":"262:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"287:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"258:3:14"},"nodeType":"YulFunctionCall","src":"258:32:14"},"nodeType":"YulIf","src":"255:52:14"},{"nodeType":"YulVariableDeclaration","src":"316:36:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"342:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"329:12:14"},"nodeType":"YulFunctionCall","src":"329:23:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"320:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"395:5:14"}],"functionName":{"name":"validator_revert_contract_IHValue","nodeType":"YulIdentifier","src":"361:33:14"},"nodeType":"YulFunctionCall","src":"361:40:14"},"nodeType":"YulExpressionStatement","src":"361:40:14"},{"nodeType":"YulAssignment","src":"410:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"420:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"410:6:14"}]}]},"name":"abi_decode_tuple_t_contract$_IHValue_$3664","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"211:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"222:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"234:6:14","type":""}],"src":"159:272:14"},{"body":{"nodeType":"YulBlock","src":"480:87:14","statements":[{"body":{"nodeType":"YulBlock","src":"545:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"554:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"557:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"547:6:14"},"nodeType":"YulFunctionCall","src":"547:12:14"},"nodeType":"YulExpressionStatement","src":"547:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"503:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"514:5:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"525:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"530:10:14","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"521:3:14"},"nodeType":"YulFunctionCall","src":"521:20:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"510:3:14"},"nodeType":"YulFunctionCall","src":"510:32:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"500:2:14"},"nodeType":"YulFunctionCall","src":"500:43:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"493:6:14"},"nodeType":"YulFunctionCall","src":"493:51:14"},"nodeType":"YulIf","src":"490:71:14"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"469:5:14","type":""}],"src":"436:131:14"},{"body":{"nodeType":"YulBlock","src":"641:176:14","statements":[{"body":{"nodeType":"YulBlock","src":"687:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"696:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"699:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"689:6:14"},"nodeType":"YulFunctionCall","src":"689:12:14"},"nodeType":"YulExpressionStatement","src":"689:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"662:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"671:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"658:3:14"},"nodeType":"YulFunctionCall","src":"658:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"683:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"654:3:14"},"nodeType":"YulFunctionCall","src":"654:32:14"},"nodeType":"YulIf","src":"651:52:14"},{"nodeType":"YulVariableDeclaration","src":"712:36:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"738:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"725:12:14"},"nodeType":"YulFunctionCall","src":"725:23:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"716:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"781:5:14"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"757:23:14"},"nodeType":"YulFunctionCall","src":"757:30:14"},"nodeType":"YulExpressionStatement","src":"757:30:14"},{"nodeType":"YulAssignment","src":"796:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"806:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"796:6:14"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"607:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"618:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"630:6:14","type":""}],"src":"572:245:14"},{"body":{"nodeType":"YulBlock","src":"917:92:14","statements":[{"nodeType":"YulAssignment","src":"927:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"939:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"950:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"935:3:14"},"nodeType":"YulFunctionCall","src":"935:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"927:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"969:9:14"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"994:6:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"987:6:14"},"nodeType":"YulFunctionCall","src":"987:14:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"980:6:14"},"nodeType":"YulFunctionCall","src":"980:22:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"962:6:14"},"nodeType":"YulFunctionCall","src":"962:41:14"},"nodeType":"YulExpressionStatement","src":"962:41:14"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"886:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"897:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"908:4:14","type":""}],"src":"822:187:14"},{"body":{"nodeType":"YulBlock","src":"1080:184:14","statements":[{"nodeType":"YulVariableDeclaration","src":"1090:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"1099:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1094:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"1159:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1184:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"1189:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1180:3:14"},"nodeType":"YulFunctionCall","src":"1180:11:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1203:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"1208:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1199:3:14"},"nodeType":"YulFunctionCall","src":"1199:11:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1193:5:14"},"nodeType":"YulFunctionCall","src":"1193:18:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1173:6:14"},"nodeType":"YulFunctionCall","src":"1173:39:14"},"nodeType":"YulExpressionStatement","src":"1173:39:14"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1120:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"1123:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1117:2:14"},"nodeType":"YulFunctionCall","src":"1117:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1131:19:14","statements":[{"nodeType":"YulAssignment","src":"1133:15:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1142:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"1145:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1138:3:14"},"nodeType":"YulFunctionCall","src":"1138:10:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1133:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"1113:3:14","statements":[]},"src":"1109:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1242:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"1247:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1238:3:14"},"nodeType":"YulFunctionCall","src":"1238:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"1256:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1231:6:14"},"nodeType":"YulFunctionCall","src":"1231:27:14"},"nodeType":"YulExpressionStatement","src":"1231:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1058:3:14","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1063:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"1068:6:14","type":""}],"src":"1014:250:14"},{"body":{"nodeType":"YulBlock","src":"1319:221:14","statements":[{"nodeType":"YulVariableDeclaration","src":"1329:26:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1349:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1343:5:14"},"nodeType":"YulFunctionCall","src":"1343:12:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1333:6:14","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1371:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"1376:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1364:6:14"},"nodeType":"YulFunctionCall","src":"1364:19:14"},"nodeType":"YulExpressionStatement","src":"1364:19:14"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1431:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"1438:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1427:3:14"},"nodeType":"YulFunctionCall","src":"1427:16:14"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1449:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"1454:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1445:3:14"},"nodeType":"YulFunctionCall","src":"1445:14:14"},{"name":"length","nodeType":"YulIdentifier","src":"1461:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1392:34:14"},"nodeType":"YulFunctionCall","src":"1392:76:14"},"nodeType":"YulExpressionStatement","src":"1392:76:14"},{"nodeType":"YulAssignment","src":"1477:57:14","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1492:3:14"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1505:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"1513:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1501:3:14"},"nodeType":"YulFunctionCall","src":"1501:15:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1522:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1518:3:14"},"nodeType":"YulFunctionCall","src":"1518:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1497:3:14"},"nodeType":"YulFunctionCall","src":"1497:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1488:3:14"},"nodeType":"YulFunctionCall","src":"1488:39:14"},{"kind":"number","nodeType":"YulLiteral","src":"1529:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1484:3:14"},"nodeType":"YulFunctionCall","src":"1484:50:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1477:3:14"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1296:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1303:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1311:3:14","type":""}],"src":"1269:271:14"},{"body":{"nodeType":"YulBlock","src":"1666:99:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1683:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1694:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1676:6:14"},"nodeType":"YulFunctionCall","src":"1676:21:14"},"nodeType":"YulExpressionStatement","src":"1676:21:14"},{"nodeType":"YulAssignment","src":"1706:53:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1732:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1744:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1755:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1740:3:14"},"nodeType":"YulFunctionCall","src":"1740:18:14"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1714:17:14"},"nodeType":"YulFunctionCall","src":"1714:45:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1706:4:14"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1635:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1646:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1657:4:14","type":""}],"src":"1545:220:14"},{"body":{"nodeType":"YulBlock","src":"1840:110:14","statements":[{"body":{"nodeType":"YulBlock","src":"1886:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1895:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1898:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1888:6:14"},"nodeType":"YulFunctionCall","src":"1888:12:14"},"nodeType":"YulExpressionStatement","src":"1888:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1861:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"1870:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1857:3:14"},"nodeType":"YulFunctionCall","src":"1857:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"1882:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1853:3:14"},"nodeType":"YulFunctionCall","src":"1853:32:14"},"nodeType":"YulIf","src":"1850:52:14"},{"nodeType":"YulAssignment","src":"1911:33:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1934:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1921:12:14"},"nodeType":"YulFunctionCall","src":"1921:23:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1911:6:14"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1806:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1817:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1829:6:14","type":""}],"src":"1770:180:14"},{"body":{"nodeType":"YulBlock","src":"2056:102:14","statements":[{"nodeType":"YulAssignment","src":"2066:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2078:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2089:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2074:3:14"},"nodeType":"YulFunctionCall","src":"2074:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2066:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2108:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2123:6:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2139:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2144:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2135:3:14"},"nodeType":"YulFunctionCall","src":"2135:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"2148:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2131:3:14"},"nodeType":"YulFunctionCall","src":"2131:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2119:3:14"},"nodeType":"YulFunctionCall","src":"2119:32:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2101:6:14"},"nodeType":"YulFunctionCall","src":"2101:51:14"},"nodeType":"YulExpressionStatement","src":"2101:51:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2025:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2036:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2047:4:14","type":""}],"src":"1955:203:14"},{"body":{"nodeType":"YulBlock","src":"2250:237:14","statements":[{"body":{"nodeType":"YulBlock","src":"2296:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2305:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2308:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2298:6:14"},"nodeType":"YulFunctionCall","src":"2298:12:14"},"nodeType":"YulExpressionStatement","src":"2298:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2271:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"2280:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2267:3:14"},"nodeType":"YulFunctionCall","src":"2267:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"2292:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2263:3:14"},"nodeType":"YulFunctionCall","src":"2263:32:14"},"nodeType":"YulIf","src":"2260:52:14"},{"nodeType":"YulVariableDeclaration","src":"2321:36:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2347:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2334:12:14"},"nodeType":"YulFunctionCall","src":"2334:23:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2325:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2400:5:14"}],"functionName":{"name":"validator_revert_contract_IHValue","nodeType":"YulIdentifier","src":"2366:33:14"},"nodeType":"YulFunctionCall","src":"2366:40:14"},"nodeType":"YulExpressionStatement","src":"2366:40:14"},{"nodeType":"YulAssignment","src":"2415:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"2425:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2415:6:14"}]},{"nodeType":"YulAssignment","src":"2439:42:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2466:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2477:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2462:3:14"},"nodeType":"YulFunctionCall","src":"2462:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2449:12:14"},"nodeType":"YulFunctionCall","src":"2449:32:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2439:6:14"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2208:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2219:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2231:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2239:6:14","type":""}],"src":"2163:324:14"},{"body":{"nodeType":"YulBlock","src":"2593:76:14","statements":[{"nodeType":"YulAssignment","src":"2603:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2615:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2626:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2611:3:14"},"nodeType":"YulFunctionCall","src":"2611:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2603:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2645:9:14"},{"name":"value0","nodeType":"YulIdentifier","src":"2656:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2638:6:14"},"nodeType":"YulFunctionCall","src":"2638:25:14"},"nodeType":"YulExpressionStatement","src":"2638:25:14"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2562:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2573:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2584:4:14","type":""}],"src":"2492:177:14"},{"body":{"nodeType":"YulBlock","src":"2761:161:14","statements":[{"body":{"nodeType":"YulBlock","src":"2807:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2816:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2819:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2809:6:14"},"nodeType":"YulFunctionCall","src":"2809:12:14"},"nodeType":"YulExpressionStatement","src":"2809:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2782:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"2791:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2778:3:14"},"nodeType":"YulFunctionCall","src":"2778:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"2803:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2774:3:14"},"nodeType":"YulFunctionCall","src":"2774:32:14"},"nodeType":"YulIf","src":"2771:52:14"},{"nodeType":"YulAssignment","src":"2832:33:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2855:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2842:12:14"},"nodeType":"YulFunctionCall","src":"2842:23:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2832:6:14"}]},{"nodeType":"YulAssignment","src":"2874:42:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2901:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2912:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2897:3:14"},"nodeType":"YulFunctionCall","src":"2897:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2884:12:14"},"nodeType":"YulFunctionCall","src":"2884:32:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2874:6:14"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2719:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2730:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2742:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2750:6:14","type":""}],"src":"2674:248:14"},{"body":{"nodeType":"YulBlock","src":"2959:95:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2976:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2983:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2988:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2979:3:14"},"nodeType":"YulFunctionCall","src":"2979:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2969:6:14"},"nodeType":"YulFunctionCall","src":"2969:31:14"},"nodeType":"YulExpressionStatement","src":"2969:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3016:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3019:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3009:6:14"},"nodeType":"YulFunctionCall","src":"3009:15:14"},"nodeType":"YulExpressionStatement","src":"3009:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3040:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3043:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3033:6:14"},"nodeType":"YulFunctionCall","src":"3033:15:14"},"nodeType":"YulExpressionStatement","src":"3033:15:14"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2927:127:14"},{"body":{"nodeType":"YulBlock","src":"3134:557:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3144:28:14","value":{"kind":"number","nodeType":"YulLiteral","src":"3154:18:14","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3148:2:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3199:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3201:16:14"},"nodeType":"YulFunctionCall","src":"3201:18:14"},"nodeType":"YulExpressionStatement","src":"3201:18:14"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3187:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"3195:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3184:2:14"},"nodeType":"YulFunctionCall","src":"3184:14:14"},"nodeType":"YulIf","src":"3181:40:14"},{"nodeType":"YulVariableDeclaration","src":"3230:17:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3244:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3240:3:14"},"nodeType":"YulFunctionCall","src":"3240:7:14"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3234:2:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3256:23:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3276:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3270:5:14"},"nodeType":"YulFunctionCall","src":"3270:9:14"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3260:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3288:73:14","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3310:6:14"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3334:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"3342:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3330:3:14"},"nodeType":"YulFunctionCall","src":"3330:15:14"},{"name":"_2","nodeType":"YulIdentifier","src":"3347:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3326:3:14"},"nodeType":"YulFunctionCall","src":"3326:24:14"},{"kind":"number","nodeType":"YulLiteral","src":"3352:2:14","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3322:3:14"},"nodeType":"YulFunctionCall","src":"3322:33:14"},{"name":"_2","nodeType":"YulIdentifier","src":"3357:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3318:3:14"},"nodeType":"YulFunctionCall","src":"3318:42:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3306:3:14"},"nodeType":"YulFunctionCall","src":"3306:55:14"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3292:10:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3420:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3422:16:14"},"nodeType":"YulFunctionCall","src":"3422:18:14"},"nodeType":"YulExpressionStatement","src":"3422:18:14"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3379:10:14"},{"name":"_1","nodeType":"YulIdentifier","src":"3391:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3376:2:14"},"nodeType":"YulFunctionCall","src":"3376:18:14"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3399:10:14"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3411:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3396:2:14"},"nodeType":"YulFunctionCall","src":"3396:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3373:2:14"},"nodeType":"YulFunctionCall","src":"3373:46:14"},"nodeType":"YulIf","src":"3370:72:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3458:2:14","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3462:10:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3451:6:14"},"nodeType":"YulFunctionCall","src":"3451:22:14"},"nodeType":"YulExpressionStatement","src":"3451:22:14"},{"nodeType":"YulAssignment","src":"3482:15:14","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3491:6:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3482:5:14"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3513:6:14"},{"name":"length","nodeType":"YulIdentifier","src":"3521:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3506:6:14"},"nodeType":"YulFunctionCall","src":"3506:22:14"},"nodeType":"YulExpressionStatement","src":"3506:22:14"},{"body":{"nodeType":"YulBlock","src":"3566:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3575:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3578:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3568:6:14"},"nodeType":"YulFunctionCall","src":"3568:12:14"},"nodeType":"YulExpressionStatement","src":"3568:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3547:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"3552:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3543:3:14"},"nodeType":"YulFunctionCall","src":"3543:16:14"},{"name":"end","nodeType":"YulIdentifier","src":"3561:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3540:2:14"},"nodeType":"YulFunctionCall","src":"3540:25:14"},"nodeType":"YulIf","src":"3537:45:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3608:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"3616:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3604:3:14"},"nodeType":"YulFunctionCall","src":"3604:17:14"},{"name":"src","nodeType":"YulIdentifier","src":"3623:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"3628:6:14"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3591:12:14"},"nodeType":"YulFunctionCall","src":"3591:44:14"},"nodeType":"YulExpressionStatement","src":"3591:44:14"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3659:6:14"},{"name":"length","nodeType":"YulIdentifier","src":"3667:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3655:3:14"},"nodeType":"YulFunctionCall","src":"3655:19:14"},{"kind":"number","nodeType":"YulLiteral","src":"3676:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3651:3:14"},"nodeType":"YulFunctionCall","src":"3651:30:14"},{"kind":"number","nodeType":"YulLiteral","src":"3683:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3644:6:14"},"nodeType":"YulFunctionCall","src":"3644:41:14"},"nodeType":"YulExpressionStatement","src":"3644:41:14"}]},"name":"abi_decode_available_length_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3103:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"3108:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"3116:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3124:5:14","type":""}],"src":"3059:632:14"},{"body":{"nodeType":"YulBlock","src":"3749:169:14","statements":[{"body":{"nodeType":"YulBlock","src":"3798:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3807:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3810:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3800:6:14"},"nodeType":"YulFunctionCall","src":"3800:12:14"},"nodeType":"YulExpressionStatement","src":"3800:12:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3777:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"3785:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3773:3:14"},"nodeType":"YulFunctionCall","src":"3773:17:14"},{"name":"end","nodeType":"YulIdentifier","src":"3792:3:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3769:3:14"},"nodeType":"YulFunctionCall","src":"3769:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3762:6:14"},"nodeType":"YulFunctionCall","src":"3762:35:14"},"nodeType":"YulIf","src":"3759:55:14"},{"nodeType":"YulAssignment","src":"3823:89:14","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3871:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"3879:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3867:3:14"},"nodeType":"YulFunctionCall","src":"3867:17:14"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3899:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3886:12:14"},"nodeType":"YulFunctionCall","src":"3886:20:14"},{"name":"end","nodeType":"YulIdentifier","src":"3908:3:14"}],"functionName":{"name":"abi_decode_available_length_string","nodeType":"YulIdentifier","src":"3832:34:14"},"nodeType":"YulFunctionCall","src":"3832:80:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3823:5:14"}]}]},"name":"abi_decode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3723:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"3731:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3739:5:14","type":""}],"src":"3696:222:14"},{"body":{"nodeType":"YulBlock","src":"4054:472:14","statements":[{"body":{"nodeType":"YulBlock","src":"4101:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4110:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4113:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4103:6:14"},"nodeType":"YulFunctionCall","src":"4103:12:14"},"nodeType":"YulExpressionStatement","src":"4103:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4075:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"4084:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4071:3:14"},"nodeType":"YulFunctionCall","src":"4071:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4096:3:14","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4067:3:14"},"nodeType":"YulFunctionCall","src":"4067:33:14"},"nodeType":"YulIf","src":"4064:53:14"},{"nodeType":"YulVariableDeclaration","src":"4126:37:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4153:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4140:12:14"},"nodeType":"YulFunctionCall","src":"4140:23:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4130:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"4206:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4215:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4218:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4208:6:14"},"nodeType":"YulFunctionCall","src":"4208:12:14"},"nodeType":"YulExpressionStatement","src":"4208:12:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4178:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4186:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4175:2:14"},"nodeType":"YulFunctionCall","src":"4175:30:14"},"nodeType":"YulIf","src":"4172:50:14"},{"nodeType":"YulAssignment","src":"4231:60:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4263:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"4274:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4259:3:14"},"nodeType":"YulFunctionCall","src":"4259:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4283:7:14"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"4241:17:14"},"nodeType":"YulFunctionCall","src":"4241:50:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4231:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"4300:45:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4330:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4341:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4326:3:14"},"nodeType":"YulFunctionCall","src":"4326:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4313:12:14"},"nodeType":"YulFunctionCall","src":"4313:32:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4304:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4388:5:14"}],"functionName":{"name":"validator_revert_contract_IHValue","nodeType":"YulIdentifier","src":"4354:33:14"},"nodeType":"YulFunctionCall","src":"4354:40:14"},"nodeType":"YulExpressionStatement","src":"4354:40:14"},{"nodeType":"YulAssignment","src":"4403:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"4413:5:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4403:6:14"}]},{"nodeType":"YulAssignment","src":"4427:42:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4454:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4465:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4450:3:14"},"nodeType":"YulFunctionCall","src":"4450:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4437:12:14"},"nodeType":"YulFunctionCall","src":"4437:32:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4427:6:14"}]},{"nodeType":"YulAssignment","src":"4478:42:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4505:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4516:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4501:3:14"},"nodeType":"YulFunctionCall","src":"4501:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4488:12:14"},"nodeType":"YulFunctionCall","src":"4488:32:14"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4478:6:14"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_addresst_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3996:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4007:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4019:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4027:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4035:6:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4043:6:14","type":""}],"src":"3923:603:14"},{"body":{"nodeType":"YulBlock","src":"4635:370:14","statements":[{"body":{"nodeType":"YulBlock","src":"4681:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4690:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4693:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4683:6:14"},"nodeType":"YulFunctionCall","src":"4683:12:14"},"nodeType":"YulExpressionStatement","src":"4683:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4656:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"4665:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4652:3:14"},"nodeType":"YulFunctionCall","src":"4652:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4677:2:14","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4648:3:14"},"nodeType":"YulFunctionCall","src":"4648:32:14"},"nodeType":"YulIf","src":"4645:52:14"},{"nodeType":"YulVariableDeclaration","src":"4706:36:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4732:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4719:12:14"},"nodeType":"YulFunctionCall","src":"4719:23:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4710:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4785:5:14"}],"functionName":{"name":"validator_revert_contract_IHValue","nodeType":"YulIdentifier","src":"4751:33:14"},"nodeType":"YulFunctionCall","src":"4751:40:14"},"nodeType":"YulExpressionStatement","src":"4751:40:14"},{"nodeType":"YulAssignment","src":"4800:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"4810:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4800:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"4824:47:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4856:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4867:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4852:3:14"},"nodeType":"YulFunctionCall","src":"4852:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4839:12:14"},"nodeType":"YulFunctionCall","src":"4839:32:14"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"4828:7:14","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4914:7:14"}],"functionName":{"name":"validator_revert_contract_IHValue","nodeType":"YulIdentifier","src":"4880:33:14"},"nodeType":"YulFunctionCall","src":"4880:42:14"},"nodeType":"YulExpressionStatement","src":"4880:42:14"},{"nodeType":"YulAssignment","src":"4931:17:14","value":{"name":"value_1","nodeType":"YulIdentifier","src":"4941:7:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4931:6:14"}]},{"nodeType":"YulAssignment","src":"4957:42:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4984:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4995:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4980:3:14"},"nodeType":"YulFunctionCall","src":"4980:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4967:12:14"},"nodeType":"YulFunctionCall","src":"4967:32:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4957:6:14"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4585:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4596:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4608:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4616:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4624:6:14","type":""}],"src":"4531:474:14"},{"body":{"nodeType":"YulBlock","src":"5080:186:14","statements":[{"body":{"nodeType":"YulBlock","src":"5126:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5135:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5138:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5128:6:14"},"nodeType":"YulFunctionCall","src":"5128:12:14"},"nodeType":"YulExpressionStatement","src":"5128:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5101:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"5110:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5097:3:14"},"nodeType":"YulFunctionCall","src":"5097:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"5122:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5093:3:14"},"nodeType":"YulFunctionCall","src":"5093:32:14"},"nodeType":"YulIf","src":"5090:52:14"},{"nodeType":"YulVariableDeclaration","src":"5151:36:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5177:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5164:12:14"},"nodeType":"YulFunctionCall","src":"5164:23:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5155:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5230:5:14"}],"functionName":{"name":"validator_revert_contract_IHValue","nodeType":"YulIdentifier","src":"5196:33:14"},"nodeType":"YulFunctionCall","src":"5196:40:14"},"nodeType":"YulExpressionStatement","src":"5196:40:14"},{"nodeType":"YulAssignment","src":"5245:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"5255:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5245:6:14"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5046:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5057:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5069:6:14","type":""}],"src":"5010:256:14"},{"body":{"nodeType":"YulBlock","src":"5388:102:14","statements":[{"nodeType":"YulAssignment","src":"5398:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5410:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5421:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5406:3:14"},"nodeType":"YulFunctionCall","src":"5406:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5398:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5440:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5455:6:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5471:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5476:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5467:3:14"},"nodeType":"YulFunctionCall","src":"5467:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"5480:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5463:3:14"},"nodeType":"YulFunctionCall","src":"5463:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5451:3:14"},"nodeType":"YulFunctionCall","src":"5451:32:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5433:6:14"},"nodeType":"YulFunctionCall","src":"5433:51:14"},"nodeType":"YulExpressionStatement","src":"5433:51:14"}]},"name":"abi_encode_tuple_t_contract$_IHValue_$3664__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5357:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5368:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5379:4:14","type":""}],"src":"5271:219:14"},{"body":{"nodeType":"YulBlock","src":"5575:242:14","statements":[{"body":{"nodeType":"YulBlock","src":"5621:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5630:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5633:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5623:6:14"},"nodeType":"YulFunctionCall","src":"5623:12:14"},"nodeType":"YulExpressionStatement","src":"5623:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5596:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"5605:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5592:3:14"},"nodeType":"YulFunctionCall","src":"5592:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"5617:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5588:3:14"},"nodeType":"YulFunctionCall","src":"5588:32:14"},"nodeType":"YulIf","src":"5585:52:14"},{"nodeType":"YulVariableDeclaration","src":"5646:37:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5673:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5660:12:14"},"nodeType":"YulFunctionCall","src":"5660:23:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5650:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"5726:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5735:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5738:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5728:6:14"},"nodeType":"YulFunctionCall","src":"5728:12:14"},"nodeType":"YulExpressionStatement","src":"5728:12:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5698:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"5706:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5695:2:14"},"nodeType":"YulFunctionCall","src":"5695:30:14"},"nodeType":"YulIf","src":"5692:50:14"},{"nodeType":"YulAssignment","src":"5751:60:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5783:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5794:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5779:3:14"},"nodeType":"YulFunctionCall","src":"5779:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5803:7:14"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"5761:17:14"},"nodeType":"YulFunctionCall","src":"5761:50:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5751:6:14"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5541:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5552:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5564:6:14","type":""}],"src":"5495:322:14"},{"body":{"nodeType":"YulBlock","src":"5906:341:14","statements":[{"body":{"nodeType":"YulBlock","src":"5952:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5961:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5964:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5954:6:14"},"nodeType":"YulFunctionCall","src":"5954:12:14"},"nodeType":"YulExpressionStatement","src":"5954:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5927:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"5936:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5923:3:14"},"nodeType":"YulFunctionCall","src":"5923:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"5948:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5919:3:14"},"nodeType":"YulFunctionCall","src":"5919:32:14"},"nodeType":"YulIf","src":"5916:52:14"},{"nodeType":"YulVariableDeclaration","src":"5977:36:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6003:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5990:12:14"},"nodeType":"YulFunctionCall","src":"5990:23:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5981:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6056:5:14"}],"functionName":{"name":"validator_revert_contract_IHValue","nodeType":"YulIdentifier","src":"6022:33:14"},"nodeType":"YulFunctionCall","src":"6022:40:14"},"nodeType":"YulExpressionStatement","src":"6022:40:14"},{"nodeType":"YulAssignment","src":"6071:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"6081:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6071:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"6095:47:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6127:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6138:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6123:3:14"},"nodeType":"YulFunctionCall","src":"6123:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6110:12:14"},"nodeType":"YulFunctionCall","src":"6110:32:14"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"6099:7:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"6199:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6208:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6211:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6201:6:14"},"nodeType":"YulFunctionCall","src":"6201:12:14"},"nodeType":"YulExpressionStatement","src":"6201:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6164:7:14"},{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6187:7:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6180:6:14"},"nodeType":"YulFunctionCall","src":"6180:15:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6173:6:14"},"nodeType":"YulFunctionCall","src":"6173:23:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6161:2:14"},"nodeType":"YulFunctionCall","src":"6161:36:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6154:6:14"},"nodeType":"YulFunctionCall","src":"6154:44:14"},"nodeType":"YulIf","src":"6151:64:14"},{"nodeType":"YulAssignment","src":"6224:17:14","value":{"name":"value_1","nodeType":"YulIdentifier","src":"6234:7:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6224:6:14"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5864:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5875:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5887:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5895:6:14","type":""}],"src":"5822:425:14"},{"body":{"nodeType":"YulBlock","src":"6382:683:14","statements":[{"body":{"nodeType":"YulBlock","src":"6429:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6438:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6441:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6431:6:14"},"nodeType":"YulFunctionCall","src":"6431:12:14"},"nodeType":"YulExpressionStatement","src":"6431:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6403:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"6412:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6399:3:14"},"nodeType":"YulFunctionCall","src":"6399:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"6424:3:14","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6395:3:14"},"nodeType":"YulFunctionCall","src":"6395:33:14"},"nodeType":"YulIf","src":"6392:53:14"},{"nodeType":"YulVariableDeclaration","src":"6454:36:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6480:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6467:12:14"},"nodeType":"YulFunctionCall","src":"6467:23:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6458:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6533:5:14"}],"functionName":{"name":"validator_revert_contract_IHValue","nodeType":"YulIdentifier","src":"6499:33:14"},"nodeType":"YulFunctionCall","src":"6499:40:14"},"nodeType":"YulExpressionStatement","src":"6499:40:14"},{"nodeType":"YulAssignment","src":"6548:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"6558:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6548:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"6572:47:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6604:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6615:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6600:3:14"},"nodeType":"YulFunctionCall","src":"6600:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6587:12:14"},"nodeType":"YulFunctionCall","src":"6587:32:14"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"6576:7:14","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6662:7:14"}],"functionName":{"name":"validator_revert_contract_IHValue","nodeType":"YulIdentifier","src":"6628:33:14"},"nodeType":"YulFunctionCall","src":"6628:42:14"},"nodeType":"YulExpressionStatement","src":"6628:42:14"},{"nodeType":"YulAssignment","src":"6679:17:14","value":{"name":"value_1","nodeType":"YulIdentifier","src":"6689:7:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6679:6:14"}]},{"nodeType":"YulAssignment","src":"6705:42:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6732:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6743:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6728:3:14"},"nodeType":"YulFunctionCall","src":"6728:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6715:12:14"},"nodeType":"YulFunctionCall","src":"6715:32:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6705:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"6756:46:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6787:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6798:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6783:3:14"},"nodeType":"YulFunctionCall","src":"6783:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6770:12:14"},"nodeType":"YulFunctionCall","src":"6770:32:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6760:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"6845:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6854:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6857:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6847:6:14"},"nodeType":"YulFunctionCall","src":"6847:12:14"},"nodeType":"YulExpressionStatement","src":"6847:12:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6817:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"6825:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6814:2:14"},"nodeType":"YulFunctionCall","src":"6814:30:14"},"nodeType":"YulIf","src":"6811:50:14"},{"nodeType":"YulVariableDeclaration","src":"6870:32:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6884:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"6895:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6880:3:14"},"nodeType":"YulFunctionCall","src":"6880:22:14"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6874:2:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"6950:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6959:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6962:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6952:6:14"},"nodeType":"YulFunctionCall","src":"6952:12:14"},"nodeType":"YulExpressionStatement","src":"6952:12:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6929:2:14"},{"kind":"number","nodeType":"YulLiteral","src":"6933:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6925:3:14"},"nodeType":"YulFunctionCall","src":"6925:13:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6940:7:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6921:3:14"},"nodeType":"YulFunctionCall","src":"6921:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6914:6:14"},"nodeType":"YulFunctionCall","src":"6914:35:14"},"nodeType":"YulIf","src":"6911:55:14"},{"nodeType":"YulAssignment","src":"6975:84:14","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7024:2:14"},{"kind":"number","nodeType":"YulLiteral","src":"7028:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7020:3:14"},"nodeType":"YulFunctionCall","src":"7020:11:14"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7046:2:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7033:12:14"},"nodeType":"YulFunctionCall","src":"7033:16:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7051:7:14"}],"functionName":{"name":"abi_decode_available_length_string","nodeType":"YulIdentifier","src":"6985:34:14"},"nodeType":"YulFunctionCall","src":"6985:74:14"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6975:6:14"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6324:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6335:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6347:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6355:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6363:6:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6371:6:14","type":""}],"src":"6252:813:14"},{"body":{"nodeType":"YulBlock","src":"7221:481:14","statements":[{"nodeType":"YulVariableDeclaration","src":"7231:12:14","value":{"kind":"number","nodeType":"YulLiteral","src":"7241:2:14","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7235:2:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7252:32:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7270:9:14"},{"name":"_1","nodeType":"YulIdentifier","src":"7281:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7266:3:14"},"nodeType":"YulFunctionCall","src":"7266:18:14"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"7256:6:14","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7300:9:14"},{"name":"_1","nodeType":"YulIdentifier","src":"7311:2:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7293:6:14"},"nodeType":"YulFunctionCall","src":"7293:21:14"},"nodeType":"YulExpressionStatement","src":"7293:21:14"},{"nodeType":"YulVariableDeclaration","src":"7323:17:14","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"7334:6:14"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"7327:3:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7349:27:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7369:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7363:5:14"},"nodeType":"YulFunctionCall","src":"7363:13:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7353:6:14","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7392:6:14"},{"name":"length","nodeType":"YulIdentifier","src":"7400:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7385:6:14"},"nodeType":"YulFunctionCall","src":"7385:22:14"},"nodeType":"YulExpressionStatement","src":"7385:22:14"},{"nodeType":"YulAssignment","src":"7416:25:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7427:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7438:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7423:3:14"},"nodeType":"YulFunctionCall","src":"7423:18:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7416:3:14"}]},{"nodeType":"YulVariableDeclaration","src":"7450:29:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7468:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"7476:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7464:3:14"},"nodeType":"YulFunctionCall","src":"7464:15:14"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7454:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7488:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"7497:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7492:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"7556:120:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7577:3:14"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7588:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7582:5:14"},"nodeType":"YulFunctionCall","src":"7582:13:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7570:6:14"},"nodeType":"YulFunctionCall","src":"7570:26:14"},"nodeType":"YulExpressionStatement","src":"7570:26:14"},{"nodeType":"YulAssignment","src":"7609:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7620:3:14"},{"name":"_1","nodeType":"YulIdentifier","src":"7625:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7616:3:14"},"nodeType":"YulFunctionCall","src":"7616:12:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7609:3:14"}]},{"nodeType":"YulAssignment","src":"7641:25:14","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7655:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"7663:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7651:3:14"},"nodeType":"YulFunctionCall","src":"7651:15:14"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7641:6:14"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7518:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"7521:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7515:2:14"},"nodeType":"YulFunctionCall","src":"7515:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7529:18:14","statements":[{"nodeType":"YulAssignment","src":"7531:14:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7540:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"7543:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7536:3:14"},"nodeType":"YulFunctionCall","src":"7536:9:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7531:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"7511:3:14","statements":[]},"src":"7507:169:14"},{"nodeType":"YulAssignment","src":"7685:11:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"7693:3:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7685:4:14"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7190:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7201:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7212:4:14","type":""}],"src":"7070:632:14"},{"body":{"nodeType":"YulBlock","src":"7794:319:14","statements":[{"body":{"nodeType":"YulBlock","src":"7840:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7849:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7852:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7842:6:14"},"nodeType":"YulFunctionCall","src":"7842:12:14"},"nodeType":"YulExpressionStatement","src":"7842:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7815:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"7824:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7811:3:14"},"nodeType":"YulFunctionCall","src":"7811:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"7836:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7807:3:14"},"nodeType":"YulFunctionCall","src":"7807:32:14"},"nodeType":"YulIf","src":"7804:52:14"},{"nodeType":"YulVariableDeclaration","src":"7865:36:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7891:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7878:12:14"},"nodeType":"YulFunctionCall","src":"7878:23:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7869:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7944:5:14"}],"functionName":{"name":"validator_revert_contract_IHValue","nodeType":"YulIdentifier","src":"7910:33:14"},"nodeType":"YulFunctionCall","src":"7910:40:14"},"nodeType":"YulExpressionStatement","src":"7910:40:14"},{"nodeType":"YulAssignment","src":"7959:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"7969:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7959:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"7983:47:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8015:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8026:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8011:3:14"},"nodeType":"YulFunctionCall","src":"8011:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7998:12:14"},"nodeType":"YulFunctionCall","src":"7998:32:14"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"7987:7:14","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"8073:7:14"}],"functionName":{"name":"validator_revert_contract_IHValue","nodeType":"YulIdentifier","src":"8039:33:14"},"nodeType":"YulFunctionCall","src":"8039:42:14"},"nodeType":"YulExpressionStatement","src":"8039:42:14"},{"nodeType":"YulAssignment","src":"8090:17:14","value":{"name":"value_1","nodeType":"YulIdentifier","src":"8100:7:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8090:6:14"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7752:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7763:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7775:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7783:6:14","type":""}],"src":"7707:406:14"},{"body":{"nodeType":"YulBlock","src":"8292:223:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8309:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8320:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8302:6:14"},"nodeType":"YulFunctionCall","src":"8302:21:14"},"nodeType":"YulExpressionStatement","src":"8302:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8343:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8354:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8339:3:14"},"nodeType":"YulFunctionCall","src":"8339:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"8359:2:14","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8332:6:14"},"nodeType":"YulFunctionCall","src":"8332:30:14"},"nodeType":"YulExpressionStatement","src":"8332:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8382:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8393:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8378:3:14"},"nodeType":"YulFunctionCall","src":"8378:18:14"},{"hexValue":"4861736850756e6b3a2063616c6c6572206973206e6f7420746865206f776e65","kind":"string","nodeType":"YulLiteral","src":"8398:34:14","type":"","value":"HashPunk: caller is not the owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8371:6:14"},"nodeType":"YulFunctionCall","src":"8371:62:14"},"nodeType":"YulExpressionStatement","src":"8371:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8453:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8464:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8449:3:14"},"nodeType":"YulFunctionCall","src":"8449:18:14"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"8469:3:14","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8442:6:14"},"nodeType":"YulFunctionCall","src":"8442:31:14"},"nodeType":"YulExpressionStatement","src":"8442:31:14"},{"nodeType":"YulAssignment","src":"8482:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8494:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8505:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8490:3:14"},"nodeType":"YulFunctionCall","src":"8490:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8482:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_71947446ca525a6f47b4c26e39d45a716107b5eb5547cf11856e8d61c0fa00ba__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8269:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8283:4:14","type":""}],"src":"8118:397:14"},{"body":{"nodeType":"YulBlock","src":"8575:325:14","statements":[{"nodeType":"YulAssignment","src":"8585:22:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8599:1:14","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"8602:4:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8595:3:14"},"nodeType":"YulFunctionCall","src":"8595:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8585:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"8616:38:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8646:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"8652:1:14","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8642:3:14"},"nodeType":"YulFunctionCall","src":"8642:12:14"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"8620:18:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"8693:31:14","statements":[{"nodeType":"YulAssignment","src":"8695:27:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8709:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8717:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8705:3:14"},"nodeType":"YulFunctionCall","src":"8705:17:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8695:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8673:18:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8666:6:14"},"nodeType":"YulFunctionCall","src":"8666:26:14"},"nodeType":"YulIf","src":"8663:61:14"},{"body":{"nodeType":"YulBlock","src":"8783:111:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8804:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8811:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8816:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8807:3:14"},"nodeType":"YulFunctionCall","src":"8807:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8797:6:14"},"nodeType":"YulFunctionCall","src":"8797:31:14"},"nodeType":"YulExpressionStatement","src":"8797:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8848:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8851:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8841:6:14"},"nodeType":"YulFunctionCall","src":"8841:15:14"},"nodeType":"YulExpressionStatement","src":"8841:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8876:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8879:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8869:6:14"},"nodeType":"YulFunctionCall","src":"8869:15:14"},"nodeType":"YulExpressionStatement","src":"8869:15:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8739:18:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8762:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8770:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8759:2:14"},"nodeType":"YulFunctionCall","src":"8759:14:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8736:2:14"},"nodeType":"YulFunctionCall","src":"8736:38:14"},"nodeType":"YulIf","src":"8733:161:14"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"8555:4:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8564:6:14","type":""}],"src":"8520:380:14"},{"body":{"nodeType":"YulBlock","src":"9079:234:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9096:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9107:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9089:6:14"},"nodeType":"YulFunctionCall","src":"9089:21:14"},"nodeType":"YulExpressionStatement","src":"9089:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9130:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9141:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9126:3:14"},"nodeType":"YulFunctionCall","src":"9126:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"9146:2:14","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9119:6:14"},"nodeType":"YulFunctionCall","src":"9119:30:14"},"nodeType":"YulExpressionStatement","src":"9119:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9169:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9180:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9165:3:14"},"nodeType":"YulFunctionCall","src":"9165:18:14"},{"hexValue":"4552433732313a20617070726f76656420717565727920666f72206e6f6e6578","kind":"string","nodeType":"YulLiteral","src":"9185:34:14","type":"","value":"ERC721: approved query for nonex"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9158:6:14"},"nodeType":"YulFunctionCall","src":"9158:62:14"},"nodeType":"YulExpressionStatement","src":"9158:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9240:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9251:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9236:3:14"},"nodeType":"YulFunctionCall","src":"9236:18:14"},{"hexValue":"697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"9256:14:14","type":"","value":"istent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9229:6:14"},"nodeType":"YulFunctionCall","src":"9229:42:14"},"nodeType":"YulExpressionStatement","src":"9229:42:14"},{"nodeType":"YulAssignment","src":"9280:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9292:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9303:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9288:3:14"},"nodeType":"YulFunctionCall","src":"9288:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9280:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9056:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9070:4:14","type":""}],"src":"8905:408:14"},{"body":{"nodeType":"YulBlock","src":"9492:223:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9509:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9520:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9502:6:14"},"nodeType":"YulFunctionCall","src":"9502:21:14"},"nodeType":"YulExpressionStatement","src":"9502:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9543:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9554:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9539:3:14"},"nodeType":"YulFunctionCall","src":"9539:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"9559:2:14","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9532:6:14"},"nodeType":"YulFunctionCall","src":"9532:30:14"},"nodeType":"YulExpressionStatement","src":"9532:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9582:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9593:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9578:3:14"},"nodeType":"YulFunctionCall","src":"9578:18:14"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"9598:34:14","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9571:6:14"},"nodeType":"YulFunctionCall","src":"9571:62:14"},"nodeType":"YulExpressionStatement","src":"9571:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9653:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9664:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9649:3:14"},"nodeType":"YulFunctionCall","src":"9649:18:14"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"9669:3:14","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9642:6:14"},"nodeType":"YulFunctionCall","src":"9642:31:14"},"nodeType":"YulExpressionStatement","src":"9642:31:14"},{"nodeType":"YulAssignment","src":"9682:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9694:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9705:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9690:3:14"},"nodeType":"YulFunctionCall","src":"9690:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9682:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9469:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9483:4:14","type":""}],"src":"9318:397:14"},{"body":{"nodeType":"YulBlock","src":"9894:246:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9911:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9922:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9904:6:14"},"nodeType":"YulFunctionCall","src":"9904:21:14"},"nodeType":"YulExpressionStatement","src":"9904:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9945:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9956:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9941:3:14"},"nodeType":"YulFunctionCall","src":"9941:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"9961:2:14","type":"","value":"56"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9934:6:14"},"nodeType":"YulFunctionCall","src":"9934:30:14"},"nodeType":"YulExpressionStatement","src":"9934:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9984:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9995:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9980:3:14"},"nodeType":"YulFunctionCall","src":"9980:18:14"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f74206f77","kind":"string","nodeType":"YulLiteral","src":"10000:34:14","type":"","value":"ERC721: approve caller is not ow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9973:6:14"},"nodeType":"YulFunctionCall","src":"9973:62:14"},"nodeType":"YulExpressionStatement","src":"9973:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10055:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10066:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10051:3:14"},"nodeType":"YulFunctionCall","src":"10051:18:14"},{"hexValue":"6e6572206e6f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"10071:26:14","type":"","value":"ner nor approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10044:6:14"},"nodeType":"YulFunctionCall","src":"10044:54:14"},"nodeType":"YulExpressionStatement","src":"10044:54:14"},{"nodeType":"YulAssignment","src":"10107:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10119:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10130:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10115:3:14"},"nodeType":"YulFunctionCall","src":"10115:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10107:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9871:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9885:4:14","type":""}],"src":"9720:420:14"},{"body":{"nodeType":"YulBlock","src":"10177:95:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10194:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10201:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"10206:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10197:3:14"},"nodeType":"YulFunctionCall","src":"10197:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10187:6:14"},"nodeType":"YulFunctionCall","src":"10187:31:14"},"nodeType":"YulExpressionStatement","src":"10187:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10234:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10237:4:14","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10227:6:14"},"nodeType":"YulFunctionCall","src":"10227:15:14"},"nodeType":"YulExpressionStatement","src":"10227:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10258:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10261:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10251:6:14"},"nodeType":"YulFunctionCall","src":"10251:15:14"},"nodeType":"YulExpressionStatement","src":"10251:15:14"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10145:127:14"},{"body":{"nodeType":"YulBlock","src":"10326:79:14","statements":[{"nodeType":"YulAssignment","src":"10336:17:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10348:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"10351:1:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10344:3:14"},"nodeType":"YulFunctionCall","src":"10344:9:14"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"10336:4:14"}]},{"body":{"nodeType":"YulBlock","src":"10377:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10379:16:14"},"nodeType":"YulFunctionCall","src":"10379:18:14"},"nodeType":"YulExpressionStatement","src":"10379:18:14"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"10368:4:14"},{"name":"x","nodeType":"YulIdentifier","src":"10374:1:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10365:2:14"},"nodeType":"YulFunctionCall","src":"10365:11:14"},"nodeType":"YulIf","src":"10362:37:14"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10308:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"10311:1:14","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"10317:4:14","type":""}],"src":"10277:128:14"},{"body":{"nodeType":"YulBlock","src":"10584:110:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10601:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10612:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10594:6:14"},"nodeType":"YulFunctionCall","src":"10594:21:14"},"nodeType":"YulExpressionStatement","src":"10594:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10635:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10646:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10631:3:14"},"nodeType":"YulFunctionCall","src":"10631:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"10651:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10624:6:14"},"nodeType":"YulFunctionCall","src":"10624:29:14"},"nodeType":"YulExpressionStatement","src":"10624:29:14"},{"nodeType":"YulAssignment","src":"10662:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10674:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10685:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10670:3:14"},"nodeType":"YulFunctionCall","src":"10670:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10662:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10561:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10575:4:14","type":""}],"src":"10410:284:14"},{"body":{"nodeType":"YulBlock","src":"10873:160:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10890:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10901:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10883:6:14"},"nodeType":"YulFunctionCall","src":"10883:21:14"},"nodeType":"YulExpressionStatement","src":"10883:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10924:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10935:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10920:3:14"},"nodeType":"YulFunctionCall","src":"10920:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"10940:2:14","type":"","value":"10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10913:6:14"},"nodeType":"YulFunctionCall","src":"10913:30:14"},"nodeType":"YulExpressionStatement","src":"10913:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10963:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10974:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10959:3:14"},"nodeType":"YulFunctionCall","src":"10959:18:14"},{"hexValue":"696e76616c6964206964","kind":"string","nodeType":"YulLiteral","src":"10979:12:14","type":"","value":"invalid id"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10952:6:14"},"nodeType":"YulFunctionCall","src":"10952:40:14"},"nodeType":"YulExpressionStatement","src":"10952:40:14"},{"nodeType":"YulAssignment","src":"11001:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11013:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11024:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11009:3:14"},"nodeType":"YulFunctionCall","src":"11009:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11001:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_2c270178c73806a8dbbf8aad0f9eb77e61abe0b7a93239d42f99fae572eed526__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10850:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10864:4:14","type":""}],"src":"10699:334:14"},{"body":{"nodeType":"YulBlock","src":"11090:116:14","statements":[{"nodeType":"YulAssignment","src":"11100:20:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11115:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"11118:1:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11111:3:14"},"nodeType":"YulFunctionCall","src":"11111:9:14"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"11100:7:14"}]},{"body":{"nodeType":"YulBlock","src":"11178:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11180:16:14"},"nodeType":"YulFunctionCall","src":"11180:18:14"},"nodeType":"YulExpressionStatement","src":"11180:18:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11149:1:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11142:6:14"},"nodeType":"YulFunctionCall","src":"11142:9:14"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11156:1:14"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"11163:7:14"},{"name":"x","nodeType":"YulIdentifier","src":"11172:1:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"11159:3:14"},"nodeType":"YulFunctionCall","src":"11159:15:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11153:2:14"},"nodeType":"YulFunctionCall","src":"11153:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"11139:2:14"},"nodeType":"YulFunctionCall","src":"11139:37:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11132:6:14"},"nodeType":"YulFunctionCall","src":"11132:45:14"},"nodeType":"YulIf","src":"11129:71:14"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11069:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"11072:1:14","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"11078:7:14","type":""}],"src":"11038:168:14"},{"body":{"nodeType":"YulBlock","src":"11340:145:14","statements":[{"nodeType":"YulAssignment","src":"11350:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11362:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11373:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11358:3:14"},"nodeType":"YulFunctionCall","src":"11358:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11350:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11392:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11407:6:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11423:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11428:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11419:3:14"},"nodeType":"YulFunctionCall","src":"11419:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"11432:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11415:3:14"},"nodeType":"YulFunctionCall","src":"11415:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11403:3:14"},"nodeType":"YulFunctionCall","src":"11403:32:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11385:6:14"},"nodeType":"YulFunctionCall","src":"11385:51:14"},"nodeType":"YulExpressionStatement","src":"11385:51:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11456:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11467:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11452:3:14"},"nodeType":"YulFunctionCall","src":"11452:18:14"},{"name":"value1","nodeType":"YulIdentifier","src":"11472:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11445:6:14"},"nodeType":"YulFunctionCall","src":"11445:34:14"},"nodeType":"YulExpressionStatement","src":"11445:34:14"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11301:9:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11312:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11320:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11331:4:14","type":""}],"src":"11211:274:14"},{"body":{"nodeType":"YulBlock","src":"11571:103:14","statements":[{"body":{"nodeType":"YulBlock","src":"11617:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11626:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11629:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11619:6:14"},"nodeType":"YulFunctionCall","src":"11619:12:14"},"nodeType":"YulExpressionStatement","src":"11619:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11592:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"11601:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11588:3:14"},"nodeType":"YulFunctionCall","src":"11588:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"11613:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11584:3:14"},"nodeType":"YulFunctionCall","src":"11584:32:14"},"nodeType":"YulIf","src":"11581:52:14"},{"nodeType":"YulAssignment","src":"11642:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11658:9:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11652:5:14"},"nodeType":"YulFunctionCall","src":"11652:16:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11642:6:14"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11537:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11548:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11560:6:14","type":""}],"src":"11490:184:14"},{"body":{"nodeType":"YulBlock","src":"11853:180:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11870:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11881:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11863:6:14"},"nodeType":"YulFunctionCall","src":"11863:21:14"},"nodeType":"YulExpressionStatement","src":"11863:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11904:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11915:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11900:3:14"},"nodeType":"YulFunctionCall","src":"11900:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"11920:2:14","type":"","value":"30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11893:6:14"},"nodeType":"YulFunctionCall","src":"11893:30:14"},"nodeType":"YulExpressionStatement","src":"11893:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11943:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11954:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11939:3:14"},"nodeType":"YulFunctionCall","src":"11939:18:14"},{"hexValue":"696e73756666696369656e74205061737320436172642062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"11959:32:14","type":"","value":"insufficient Pass Card balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11932:6:14"},"nodeType":"YulFunctionCall","src":"11932:60:14"},"nodeType":"YulExpressionStatement","src":"11932:60:14"},{"nodeType":"YulAssignment","src":"12001:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12013:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12024:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12009:3:14"},"nodeType":"YulFunctionCall","src":"12009:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12001:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc7e415b4d71800746fd56cd2e9f99a70019c07d161e9e43d2fe64c358808e78__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11830:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11844:4:14","type":""}],"src":"11679:354:14"},{"body":{"nodeType":"YulBlock","src":"12195:188:14","statements":[{"nodeType":"YulAssignment","src":"12205:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12217:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12228:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12213:3:14"},"nodeType":"YulFunctionCall","src":"12213:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12205:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12247:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12262:6:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12278:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12283:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12274:3:14"},"nodeType":"YulFunctionCall","src":"12274:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"12287:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12270:3:14"},"nodeType":"YulFunctionCall","src":"12270:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12258:3:14"},"nodeType":"YulFunctionCall","src":"12258:32:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12240:6:14"},"nodeType":"YulFunctionCall","src":"12240:51:14"},"nodeType":"YulExpressionStatement","src":"12240:51:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12311:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12322:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12307:3:14"},"nodeType":"YulFunctionCall","src":"12307:18:14"},{"name":"value1","nodeType":"YulIdentifier","src":"12327:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12300:6:14"},"nodeType":"YulFunctionCall","src":"12300:34:14"},"nodeType":"YulExpressionStatement","src":"12300:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12354:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12365:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12350:3:14"},"nodeType":"YulFunctionCall","src":"12350:18:14"},{"name":"value2","nodeType":"YulIdentifier","src":"12370:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12343:6:14"},"nodeType":"YulFunctionCall","src":"12343:34:14"},"nodeType":"YulExpressionStatement","src":"12343:34:14"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12148:9:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12159:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12167:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12175:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12186:4:14","type":""}],"src":"12038:345:14"},{"body":{"nodeType":"YulBlock","src":"12653:268:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12670:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12685:6:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12701:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12706:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12697:3:14"},"nodeType":"YulFunctionCall","src":"12697:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"12710:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12693:3:14"},"nodeType":"YulFunctionCall","src":"12693:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12681:3:14"},"nodeType":"YulFunctionCall","src":"12681:32:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12663:6:14"},"nodeType":"YulFunctionCall","src":"12663:51:14"},"nodeType":"YulExpressionStatement","src":"12663:51:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12734:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12745:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12730:3:14"},"nodeType":"YulFunctionCall","src":"12730:18:14"},{"name":"value1","nodeType":"YulIdentifier","src":"12750:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12723:6:14"},"nodeType":"YulFunctionCall","src":"12723:34:14"},"nodeType":"YulExpressionStatement","src":"12723:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12777:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12788:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12773:3:14"},"nodeType":"YulFunctionCall","src":"12773:18:14"},{"name":"value2","nodeType":"YulIdentifier","src":"12793:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12766:6:14"},"nodeType":"YulFunctionCall","src":"12766:34:14"},"nodeType":"YulExpressionStatement","src":"12766:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12820:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12831:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12816:3:14"},"nodeType":"YulFunctionCall","src":"12816:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"12836:3:14","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12809:6:14"},"nodeType":"YulFunctionCall","src":"12809:31:14"},"nodeType":"YulExpressionStatement","src":"12809:31:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12860:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12871:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12856:3:14"},"nodeType":"YulFunctionCall","src":"12856:19:14"},{"kind":"number","nodeType":"YulLiteral","src":"12877:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12849:6:14"},"nodeType":"YulFunctionCall","src":"12849:30:14"},"nodeType":"YulExpressionStatement","src":"12849:30:14"},{"nodeType":"YulAssignment","src":"12888:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12900:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12911:3:14","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12896:3:14"},"nodeType":"YulFunctionCall","src":"12896:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12888:4:14"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12606:9:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12617:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12625:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12633:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12644:4:14","type":""}],"src":"12388:533:14"},{"body":{"nodeType":"YulBlock","src":"13100:177:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13117:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13128:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13110:6:14"},"nodeType":"YulFunctionCall","src":"13110:21:14"},"nodeType":"YulExpressionStatement","src":"13110:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13151:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13162:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13147:3:14"},"nodeType":"YulFunctionCall","src":"13147:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"13167:2:14","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13140:6:14"},"nodeType":"YulFunctionCall","src":"13140:30:14"},"nodeType":"YulExpressionStatement","src":"13140:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13190:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13201:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13186:3:14"},"nodeType":"YulFunctionCall","src":"13186:18:14"},{"hexValue":"696e73756666696369656e74204856616c75652062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"13206:29:14","type":"","value":"insufficient HValue balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13179:6:14"},"nodeType":"YulFunctionCall","src":"13179:57:14"},"nodeType":"YulExpressionStatement","src":"13179:57:14"},{"nodeType":"YulAssignment","src":"13245:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13257:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13268:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13253:3:14"},"nodeType":"YulFunctionCall","src":"13253:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13245:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_8dab769bb3e1b4a60276b85ee01ccc68a7073052ca1cb5124502172cc6982bf4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13077:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13091:4:14","type":""}],"src":"12926:351:14"},{"body":{"nodeType":"YulBlock","src":"13314:95:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13331:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13338:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13343:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13334:3:14"},"nodeType":"YulFunctionCall","src":"13334:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13324:6:14"},"nodeType":"YulFunctionCall","src":"13324:31:14"},"nodeType":"YulExpressionStatement","src":"13324:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13371:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13374:4:14","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13364:6:14"},"nodeType":"YulFunctionCall","src":"13364:15:14"},"nodeType":"YulExpressionStatement","src":"13364:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13395:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13398:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13388:6:14"},"nodeType":"YulFunctionCall","src":"13388:15:14"},"nodeType":"YulExpressionStatement","src":"13388:15:14"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"13282:127:14"},{"body":{"nodeType":"YulBlock","src":"13461:88:14","statements":[{"body":{"nodeType":"YulBlock","src":"13492:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13494:16:14"},"nodeType":"YulFunctionCall","src":"13494:18:14"},"nodeType":"YulExpressionStatement","src":"13494:18:14"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13477:5:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13488:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13484:3:14"},"nodeType":"YulFunctionCall","src":"13484:6:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13474:2:14"},"nodeType":"YulFunctionCall","src":"13474:17:14"},"nodeType":"YulIf","src":"13471:43:14"},{"nodeType":"YulAssignment","src":"13523:20:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13534:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"13541:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13530:3:14"},"nodeType":"YulFunctionCall","src":"13530:13:14"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13523:3:14"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13443:5:14","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13453:3:14","type":""}],"src":"13414:135:14"},{"body":{"nodeType":"YulBlock","src":"13728:236:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13745:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13756:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13738:6:14"},"nodeType":"YulFunctionCall","src":"13738:21:14"},"nodeType":"YulExpressionStatement","src":"13738:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13779:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13790:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13775:3:14"},"nodeType":"YulFunctionCall","src":"13775:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"13795:2:14","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13768:6:14"},"nodeType":"YulFunctionCall","src":"13768:30:14"},"nodeType":"YulExpressionStatement","src":"13768:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13818:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13829:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13814:3:14"},"nodeType":"YulFunctionCall","src":"13814:18:14"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"13834:34:14","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13807:6:14"},"nodeType":"YulFunctionCall","src":"13807:62:14"},"nodeType":"YulExpressionStatement","src":"13807:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13889:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13900:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13885:3:14"},"nodeType":"YulFunctionCall","src":"13885:18:14"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"13905:16:14","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13878:6:14"},"nodeType":"YulFunctionCall","src":"13878:44:14"},"nodeType":"YulExpressionStatement","src":"13878:44:14"},{"nodeType":"YulAssignment","src":"13931:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13943:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13954:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13939:3:14"},"nodeType":"YulFunctionCall","src":"13939:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13931:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13705:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13719:4:14","type":""}],"src":"13554:410:14"},{"body":{"nodeType":"YulBlock","src":"14025:65:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14042:1:14","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"14045:3:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14035:6:14"},"nodeType":"YulFunctionCall","src":"14035:14:14"},"nodeType":"YulExpressionStatement","src":"14035:14:14"},{"nodeType":"YulAssignment","src":"14058:26:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14076:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14079:4:14","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"14066:9:14"},"nodeType":"YulFunctionCall","src":"14066:18:14"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"14058:4:14"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"14008:3:14","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"14016:4:14","type":""}],"src":"13969:121:14"},{"body":{"nodeType":"YulBlock","src":"14176:464:14","statements":[{"body":{"nodeType":"YulBlock","src":"14209:425:14","statements":[{"nodeType":"YulVariableDeclaration","src":"14223:11:14","value":{"kind":"number","nodeType":"YulLiteral","src":"14233:1:14","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14227:2:14","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"14254:2:14"},{"name":"array","nodeType":"YulIdentifier","src":"14258:5:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14247:6:14"},"nodeType":"YulFunctionCall","src":"14247:17:14"},"nodeType":"YulExpressionStatement","src":"14247:17:14"},{"nodeType":"YulVariableDeclaration","src":"14277:31:14","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"14299:2:14"},{"kind":"number","nodeType":"YulLiteral","src":"14303:4:14","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"14289:9:14"},"nodeType":"YulFunctionCall","src":"14289:19:14"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"14281:4:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14321:57:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14344:4:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14354:1:14","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"14361:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"14373:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14357:3:14"},"nodeType":"YulFunctionCall","src":"14357:19:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"14350:3:14"},"nodeType":"YulFunctionCall","src":"14350:27:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14340:3:14"},"nodeType":"YulFunctionCall","src":"14340:38:14"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"14325:11:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"14415:23:14","statements":[{"nodeType":"YulAssignment","src":"14417:19:14","value":{"name":"data","nodeType":"YulIdentifier","src":"14432:4:14"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"14417:11:14"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"14397:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"14409:4:14","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14394:2:14"},"nodeType":"YulFunctionCall","src":"14394:20:14"},"nodeType":"YulIf","src":"14391:47:14"},{"nodeType":"YulVariableDeclaration","src":"14451:41:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14465:4:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14475:1:14","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"14482:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"14487:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14478:3:14"},"nodeType":"YulFunctionCall","src":"14478:12:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"14471:3:14"},"nodeType":"YulFunctionCall","src":"14471:20:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14461:3:14"},"nodeType":"YulFunctionCall","src":"14461:31:14"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"14455:2:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14505:24:14","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"14518:11:14"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"14509:5:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"14603:21:14","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14612:5:14"},{"name":"_1","nodeType":"YulIdentifier","src":"14619:2:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"14605:6:14"},"nodeType":"YulFunctionCall","src":"14605:17:14"},"nodeType":"YulExpressionStatement","src":"14605:17:14"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14553:5:14"},{"name":"_2","nodeType":"YulIdentifier","src":"14560:2:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14550:2:14"},"nodeType":"YulFunctionCall","src":"14550:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14564:26:14","statements":[{"nodeType":"YulAssignment","src":"14566:22:14","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14579:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"14586:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14575:3:14"},"nodeType":"YulFunctionCall","src":"14575:13:14"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"14566:5:14"}]}]},"pre":{"nodeType":"YulBlock","src":"14546:3:14","statements":[]},"src":"14542:82:14"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"14192:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"14197:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14189:2:14"},"nodeType":"YulFunctionCall","src":"14189:11:14"},"nodeType":"YulIf","src":"14186:448:14"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"14148:5:14","type":""},{"name":"len","nodeType":"YulTypedName","src":"14155:3:14","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"14160:10:14","type":""}],"src":"14095:545:14"},{"body":{"nodeType":"YulBlock","src":"14730:81:14","statements":[{"nodeType":"YulAssignment","src":"14740:65:14","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14755:4:14"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14773:1:14","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"14776:3:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14769:3:14"},"nodeType":"YulFunctionCall","src":"14769:11:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14786:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14782:3:14"},"nodeType":"YulFunctionCall","src":"14782:6:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"14765:3:14"},"nodeType":"YulFunctionCall","src":"14765:24:14"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14761:3:14"},"nodeType":"YulFunctionCall","src":"14761:29:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14751:3:14"},"nodeType":"YulFunctionCall","src":"14751:40:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14797:1:14","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"14800:3:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14793:3:14"},"nodeType":"YulFunctionCall","src":"14793:11:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"14748:2:14"},"nodeType":"YulFunctionCall","src":"14748:57:14"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"14740:4:14"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"14707:4:14","type":""},{"name":"len","nodeType":"YulTypedName","src":"14713:3:14","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"14721:4:14","type":""}],"src":"14645:166:14"},{"body":{"nodeType":"YulBlock","src":"14912:1256:14","statements":[{"nodeType":"YulVariableDeclaration","src":"14922:24:14","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14942:3:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14936:5:14"},"nodeType":"YulFunctionCall","src":"14936:10:14"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"14926:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"14989:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"14991:16:14"},"nodeType":"YulFunctionCall","src":"14991:18:14"},"nodeType":"YulExpressionStatement","src":"14991:18:14"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"14961:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"14969:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14958:2:14"},"nodeType":"YulFunctionCall","src":"14958:30:14"},"nodeType":"YulIf","src":"14955:56:14"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15064:4:14"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15102:4:14"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"15096:5:14"},"nodeType":"YulFunctionCall","src":"15096:11:14"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"15070:25:14"},"nodeType":"YulFunctionCall","src":"15070:38:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"15110:6:14"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"15020:43:14"},"nodeType":"YulFunctionCall","src":"15020:97:14"},"nodeType":"YulExpressionStatement","src":"15020:97:14"},{"nodeType":"YulVariableDeclaration","src":"15126:18:14","value":{"kind":"number","nodeType":"YulLiteral","src":"15143:1:14","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"15130:9:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15153:23:14","value":{"kind":"number","nodeType":"YulLiteral","src":"15172:4:14","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"15157:11:14","type":""}]},{"nodeType":"YulAssignment","src":"15185:24:14","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"15198:11:14"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"15185:9:14"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"15255:656:14","statements":[{"nodeType":"YulVariableDeclaration","src":"15269:35:14","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"15288:6:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15300:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15296:3:14"},"nodeType":"YulFunctionCall","src":"15296:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15284:3:14"},"nodeType":"YulFunctionCall","src":"15284:20:14"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"15273:7:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15317:49:14","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15361:4:14"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"15331:29:14"},"nodeType":"YulFunctionCall","src":"15331:35:14"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"15321:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15379:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"15388:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"15383:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"15466:172:14","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"15491:6:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15509:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"15514:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15505:3:14"},"nodeType":"YulFunctionCall","src":"15505:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15499:5:14"},"nodeType":"YulFunctionCall","src":"15499:26:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"15484:6:14"},"nodeType":"YulFunctionCall","src":"15484:42:14"},"nodeType":"YulExpressionStatement","src":"15484:42:14"},{"nodeType":"YulAssignment","src":"15543:24:14","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"15557:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"15565:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15553:3:14"},"nodeType":"YulFunctionCall","src":"15553:14:14"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"15543:6:14"}]},{"nodeType":"YulAssignment","src":"15584:40:14","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"15601:9:14"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"15612:11:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15597:3:14"},"nodeType":"YulFunctionCall","src":"15597:27:14"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"15584:9:14"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15413:1:14"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"15416:7:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15410:2:14"},"nodeType":"YulFunctionCall","src":"15410:14:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15425:28:14","statements":[{"nodeType":"YulAssignment","src":"15427:24:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15436:1:14"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"15439:11:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15432:3:14"},"nodeType":"YulFunctionCall","src":"15432:19:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"15427:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"15406:3:14","statements":[]},"src":"15402:236:14"},{"body":{"nodeType":"YulBlock","src":"15686:166:14","statements":[{"nodeType":"YulVariableDeclaration","src":"15704:43:14","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15731:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"15736:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15727:3:14"},"nodeType":"YulFunctionCall","src":"15727:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15721:5:14"},"nodeType":"YulFunctionCall","src":"15721:26:14"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"15708:9:14","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"15771:6:14"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"15783:9:14"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15810:1:14","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"15813:6:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15806:3:14"},"nodeType":"YulFunctionCall","src":"15806:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"15822:3:14","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15802:3:14"},"nodeType":"YulFunctionCall","src":"15802:24:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15832:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15828:3:14"},"nodeType":"YulFunctionCall","src":"15828:6:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15798:3:14"},"nodeType":"YulFunctionCall","src":"15798:37:14"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15794:3:14"},"nodeType":"YulFunctionCall","src":"15794:42:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15779:3:14"},"nodeType":"YulFunctionCall","src":"15779:58:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"15764:6:14"},"nodeType":"YulFunctionCall","src":"15764:74:14"},"nodeType":"YulExpressionStatement","src":"15764:74:14"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"15657:7:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"15666:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15654:2:14"},"nodeType":"YulFunctionCall","src":"15654:19:14"},"nodeType":"YulIf","src":"15651:201:14"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15872:4:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15886:1:14","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"15889:6:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15882:3:14"},"nodeType":"YulFunctionCall","src":"15882:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"15898:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15878:3:14"},"nodeType":"YulFunctionCall","src":"15878:22:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"15865:6:14"},"nodeType":"YulFunctionCall","src":"15865:36:14"},"nodeType":"YulExpressionStatement","src":"15865:36:14"}]},"nodeType":"YulCase","src":"15248:663:14","value":{"kind":"number","nodeType":"YulLiteral","src":"15253:1:14","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"15928:234:14","statements":[{"nodeType":"YulVariableDeclaration","src":"15942:14:14","value":{"kind":"number","nodeType":"YulLiteral","src":"15955:1:14","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15946:5:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"15991:67:14","statements":[{"nodeType":"YulAssignment","src":"16009:35:14","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16028:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16033:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16024:3:14"},"nodeType":"YulFunctionCall","src":"16024:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16018:5:14"},"nodeType":"YulFunctionCall","src":"16018:26:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16009:5:14"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"15972:6:14"},"nodeType":"YulIf","src":"15969:89:14"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16078:4:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16137:5:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"16144:6:14"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"16084:52:14"},"nodeType":"YulFunctionCall","src":"16084:67:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16071:6:14"},"nodeType":"YulFunctionCall","src":"16071:81:14"},"nodeType":"YulExpressionStatement","src":"16071:81:14"}]},"nodeType":"YulCase","src":"15920:242:14","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"15228:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"15236:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15225:2:14"},"nodeType":"YulFunctionCall","src":"15225:14:14"},"nodeType":"YulSwitch","src":"15218:944:14"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"14897:4:14","type":""},{"name":"src","nodeType":"YulTypedName","src":"14903:3:14","type":""}],"src":"14816:1352:14"},{"body":{"nodeType":"YulBlock","src":"16280:87:14","statements":[{"nodeType":"YulAssignment","src":"16290:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16302:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"16313:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16298:3:14"},"nodeType":"YulFunctionCall","src":"16298:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16290:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16332:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16347:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"16355:4:14","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16343:3:14"},"nodeType":"YulFunctionCall","src":"16343:17:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16325:6:14"},"nodeType":"YulFunctionCall","src":"16325:36:14"},"nodeType":"YulExpressionStatement","src":"16325:36:14"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16249:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16260:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16271:4:14","type":""}],"src":"16173:194:14"},{"body":{"nodeType":"YulBlock","src":"16546:239:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16563:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"16574:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16556:6:14"},"nodeType":"YulFunctionCall","src":"16556:21:14"},"nodeType":"YulExpressionStatement","src":"16556:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16597:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"16608:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16593:3:14"},"nodeType":"YulFunctionCall","src":"16593:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"16613:2:14","type":"","value":"49"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16586:6:14"},"nodeType":"YulFunctionCall","src":"16586:30:14"},"nodeType":"YulExpressionStatement","src":"16586:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16636:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"16647:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16632:3:14"},"nodeType":"YulFunctionCall","src":"16632:18:14"},{"hexValue":"4552433732313a207472616e736665722063616c6c6572206973206e6f74206f","kind":"string","nodeType":"YulLiteral","src":"16652:34:14","type":"","value":"ERC721: transfer caller is not o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16625:6:14"},"nodeType":"YulFunctionCall","src":"16625:62:14"},"nodeType":"YulExpressionStatement","src":"16625:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16707:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"16718:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16703:3:14"},"nodeType":"YulFunctionCall","src":"16703:18:14"},{"hexValue":"776e6572206e6f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"16723:19:14","type":"","value":"wner nor approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16696:6:14"},"nodeType":"YulFunctionCall","src":"16696:47:14"},"nodeType":"YulExpressionStatement","src":"16696:47:14"},{"nodeType":"YulAssignment","src":"16752:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16764:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"16775:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16760:3:14"},"nodeType":"YulFunctionCall","src":"16760:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16752:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16523:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16537:4:14","type":""}],"src":"16372:413:14"},{"body":{"nodeType":"YulBlock","src":"16964:232:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16981:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"16992:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16974:6:14"},"nodeType":"YulFunctionCall","src":"16974:21:14"},"nodeType":"YulExpressionStatement","src":"16974:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17015:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"17026:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17011:3:14"},"nodeType":"YulFunctionCall","src":"17011:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"17031:2:14","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17004:6:14"},"nodeType":"YulFunctionCall","src":"17004:30:14"},"nodeType":"YulExpressionStatement","src":"17004:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17054:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"17065:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17050:3:14"},"nodeType":"YulFunctionCall","src":"17050:18:14"},{"hexValue":"4552433732313a2062616c616e636520717565727920666f7220746865207a65","kind":"string","nodeType":"YulLiteral","src":"17070:34:14","type":"","value":"ERC721: balance query for the ze"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17043:6:14"},"nodeType":"YulFunctionCall","src":"17043:62:14"},"nodeType":"YulExpressionStatement","src":"17043:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17125:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"17136:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17121:3:14"},"nodeType":"YulFunctionCall","src":"17121:18:14"},{"hexValue":"726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"17141:12:14","type":"","value":"ro address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17114:6:14"},"nodeType":"YulFunctionCall","src":"17114:40:14"},"nodeType":"YulExpressionStatement","src":"17114:40:14"},{"nodeType":"YulAssignment","src":"17163:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17175:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"17186:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17171:3:14"},"nodeType":"YulFunctionCall","src":"17171:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17163:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16941:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16955:4:14","type":""}],"src":"16790:406:14"},{"body":{"nodeType":"YulBlock","src":"17385:836:14","statements":[{"nodeType":"YulVariableDeclaration","src":"17395:12:14","value":{"kind":"number","nodeType":"YulLiteral","src":"17406:1:14","type":"","value":"0"},"variables":[{"name":"ret","nodeType":"YulTypedName","src":"17399:3:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17416:30:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17439:6:14"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"17433:5:14"},"nodeType":"YulFunctionCall","src":"17433:13:14"},"variables":[{"name":"slotValue","nodeType":"YulTypedName","src":"17420:9:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17455:50:14","value":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"17495:9:14"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"17469:25:14"},"nodeType":"YulFunctionCall","src":"17469:36:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17459:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17514:11:14","value":{"kind":"number","nodeType":"YulLiteral","src":"17524:1:14","type":"","value":"1"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"17518:2:14","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"17575:126:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17596:3:14"},{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"17605:9:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17620:3:14","type":"","value":"255"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17616:3:14"},"nodeType":"YulFunctionCall","src":"17616:8:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17601:3:14"},"nodeType":"YulFunctionCall","src":"17601:24:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17589:6:14"},"nodeType":"YulFunctionCall","src":"17589:37:14"},"nodeType":"YulExpressionStatement","src":"17589:37:14"},{"nodeType":"YulAssignment","src":"17639:52:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17650:3:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17659:6:14"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17681:6:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17674:6:14"},"nodeType":"YulFunctionCall","src":"17674:14:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17667:6:14"},"nodeType":"YulFunctionCall","src":"17667:22:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"17655:3:14"},"nodeType":"YulFunctionCall","src":"17655:35:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17646:3:14"},"nodeType":"YulFunctionCall","src":"17646:45:14"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"17639:3:14"}]}]},"nodeType":"YulCase","src":"17568:133:14","value":{"kind":"number","nodeType":"YulLiteral","src":"17573:1:14","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"17717:349:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17738:1:14","type":"","value":"0"},{"name":"value0","nodeType":"YulIdentifier","src":"17741:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17731:6:14"},"nodeType":"YulFunctionCall","src":"17731:17:14"},"nodeType":"YulExpressionStatement","src":"17731:17:14"},{"nodeType":"YulVariableDeclaration","src":"17761:14:14","value":{"kind":"number","nodeType":"YulLiteral","src":"17771:4:14","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"17765:2:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17788:31:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17813:1:14","type":"","value":"0"},{"name":"_2","nodeType":"YulIdentifier","src":"17816:2:14"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"17803:9:14"},"nodeType":"YulFunctionCall","src":"17803:16:14"},"variables":[{"name":"dataPos","nodeType":"YulTypedName","src":"17792:7:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17832:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"17841:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"17836:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"17909:111:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17938:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"17943:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17934:3:14"},"nodeType":"YulFunctionCall","src":"17934:11:14"},{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"17953:7:14"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"17947:5:14"},"nodeType":"YulFunctionCall","src":"17947:14:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17927:6:14"},"nodeType":"YulFunctionCall","src":"17927:35:14"},"nodeType":"YulExpressionStatement","src":"17927:35:14"},{"nodeType":"YulAssignment","src":"17979:27:14","value":{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"17994:7:14"},{"name":"_1","nodeType":"YulIdentifier","src":"18003:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17990:3:14"},"nodeType":"YulFunctionCall","src":"17990:16:14"},"variableNames":[{"name":"dataPos","nodeType":"YulIdentifier","src":"17979:7:14"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"17866:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"17869:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17863:2:14"},"nodeType":"YulFunctionCall","src":"17863:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17877:19:14","statements":[{"nodeType":"YulAssignment","src":"17879:15:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"17888:1:14"},{"name":"_2","nodeType":"YulIdentifier","src":"17891:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17884:3:14"},"nodeType":"YulFunctionCall","src":"17884:10:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"17879:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"17859:3:14","statements":[]},"src":"17855:165:14"},{"nodeType":"YulAssignment","src":"18033:23:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18044:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"18049:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18040:3:14"},"nodeType":"YulFunctionCall","src":"18040:16:14"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"18033:3:14"}]}]},"nodeType":"YulCase","src":"17710:356:14","value":{"kind":"number","nodeType":"YulLiteral","src":"17715:1:14","type":"","value":"1"}}],"expression":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"17545:9:14"},{"name":"_1","nodeType":"YulIdentifier","src":"17556:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17541:3:14"},"nodeType":"YulFunctionCall","src":"17541:18:14"},"nodeType":"YulSwitch","src":"17534:532:14"},{"nodeType":"YulVariableDeclaration","src":"18075:29:14","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18097:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18091:5:14"},"nodeType":"YulFunctionCall","src":"18091:13:14"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"18079:8:14","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18152:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"18160:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18148:3:14"},"nodeType":"YulFunctionCall","src":"18148:17:14"},{"name":"ret","nodeType":"YulIdentifier","src":"18167:3:14"},{"name":"length_1","nodeType":"YulIdentifier","src":"18172:8:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"18113:34:14"},"nodeType":"YulFunctionCall","src":"18113:68:14"},"nodeType":"YulExpressionStatement","src":"18113:68:14"},{"nodeType":"YulAssignment","src":"18190:25:14","value":{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"18201:3:14"},{"name":"length_1","nodeType":"YulIdentifier","src":"18206:8:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18197:3:14"},"nodeType":"YulFunctionCall","src":"18197:18:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18190:3:14"}]}]},"name":"abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17353:3:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17358:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17366:6:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17377:3:14","type":""}],"src":"17201:1020:14"},{"body":{"nodeType":"YulBlock","src":"18400:171:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18417:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"18428:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18410:6:14"},"nodeType":"YulFunctionCall","src":"18410:21:14"},"nodeType":"YulExpressionStatement","src":"18410:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18451:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"18462:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18447:3:14"},"nodeType":"YulFunctionCall","src":"18447:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"18467:2:14","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18440:6:14"},"nodeType":"YulFunctionCall","src":"18440:30:14"},"nodeType":"YulExpressionStatement","src":"18440:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18490:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"18501:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18486:3:14"},"nodeType":"YulFunctionCall","src":"18486:18:14"},{"hexValue":"436f6e7472616374732063616e6e6f74206d696e74","kind":"string","nodeType":"YulLiteral","src":"18506:23:14","type":"","value":"Contracts cannot mint"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18479:6:14"},"nodeType":"YulFunctionCall","src":"18479:51:14"},"nodeType":"YulExpressionStatement","src":"18479:51:14"},{"nodeType":"YulAssignment","src":"18539:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18551:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"18562:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18547:3:14"},"nodeType":"YulFunctionCall","src":"18547:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18539:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_32a53888ca69a743bbaa97a0e7d9316f442fadccf6d37bbebbe9ab28e7024e3e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18377:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18391:4:14","type":""}],"src":"18226:345:14"},{"body":{"nodeType":"YulBlock","src":"18750:182:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18767:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"18778:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18760:6:14"},"nodeType":"YulFunctionCall","src":"18760:21:14"},"nodeType":"YulExpressionStatement","src":"18760:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18801:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"18812:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18797:3:14"},"nodeType":"YulFunctionCall","src":"18797:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"18817:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18790:6:14"},"nodeType":"YulFunctionCall","src":"18790:30:14"},"nodeType":"YulExpressionStatement","src":"18790:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18840:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"18851:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18836:3:14"},"nodeType":"YulFunctionCall","src":"18836:18:14"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"18856:34:14","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18829:6:14"},"nodeType":"YulFunctionCall","src":"18829:62:14"},"nodeType":"YulExpressionStatement","src":"18829:62:14"},{"nodeType":"YulAssignment","src":"18900:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18912:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"18923:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18908:3:14"},"nodeType":"YulFunctionCall","src":"18908:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18900:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18727:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18741:4:14","type":""}],"src":"18576:356:14"},{"body":{"nodeType":"YulBlock","src":"19111:230:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19128:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19139:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19121:6:14"},"nodeType":"YulFunctionCall","src":"19121:21:14"},"nodeType":"YulExpressionStatement","src":"19121:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19162:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19173:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19158:3:14"},"nodeType":"YulFunctionCall","src":"19158:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"19178:2:14","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19151:6:14"},"nodeType":"YulFunctionCall","src":"19151:30:14"},"nodeType":"YulExpressionStatement","src":"19151:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19201:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19212:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19197:3:14"},"nodeType":"YulFunctionCall","src":"19197:18:14"},{"hexValue":"455243373231723a206e65656420746f206d696e74206174206c65617374206f","kind":"string","nodeType":"YulLiteral","src":"19217:34:14","type":"","value":"ERC721r: need to mint at least o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19190:6:14"},"nodeType":"YulFunctionCall","src":"19190:62:14"},"nodeType":"YulExpressionStatement","src":"19190:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19272:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19283:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19268:3:14"},"nodeType":"YulFunctionCall","src":"19268:18:14"},{"hexValue":"6e6520746f6b656e","kind":"string","nodeType":"YulLiteral","src":"19288:10:14","type":"","value":"ne token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19261:6:14"},"nodeType":"YulFunctionCall","src":"19261:38:14"},"nodeType":"YulExpressionStatement","src":"19261:38:14"},{"nodeType":"YulAssignment","src":"19308:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19320:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19331:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19316:3:14"},"nodeType":"YulFunctionCall","src":"19316:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19308:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_bb31380de390e4e0627ca842496a815f4aa25ce62aeb0a04ee78aed6e6c12b62__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19088:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19102:4:14","type":""}],"src":"18937:404:14"},{"body":{"nodeType":"YulBlock","src":"19520:233:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19537:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19548:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19530:6:14"},"nodeType":"YulFunctionCall","src":"19530:21:14"},"nodeType":"YulExpressionStatement","src":"19530:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19571:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19582:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19567:3:14"},"nodeType":"YulFunctionCall","src":"19567:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"19587:2:14","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19560:6:14"},"nodeType":"YulFunctionCall","src":"19560:30:14"},"nodeType":"YulExpressionStatement","src":"19560:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19610:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19621:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19606:3:14"},"nodeType":"YulFunctionCall","src":"19606:18:14"},{"hexValue":"455243373231723a206d696e74696e67206d6f726520746f6b656e7320746861","kind":"string","nodeType":"YulLiteral","src":"19626:34:14","type":"","value":"ERC721r: minting more tokens tha"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19599:6:14"},"nodeType":"YulFunctionCall","src":"19599:62:14"},"nodeType":"YulExpressionStatement","src":"19599:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19681:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19692:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19677:3:14"},"nodeType":"YulFunctionCall","src":"19677:18:14"},{"hexValue":"6e20617661696c61626c65","kind":"string","nodeType":"YulLiteral","src":"19697:13:14","type":"","value":"n available"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19670:6:14"},"nodeType":"YulFunctionCall","src":"19670:41:14"},"nodeType":"YulExpressionStatement","src":"19670:41:14"},{"nodeType":"YulAssignment","src":"19720:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19732:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"19743:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19728:3:14"},"nodeType":"YulFunctionCall","src":"19728:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19720:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ffa3719eede42d3318b3817081dd67bc4c18fb5a15d06600fb820769c5c8571__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19497:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19511:4:14","type":""}],"src":"19346:407:14"},{"body":{"nodeType":"YulBlock","src":"19805:89:14","statements":[{"body":{"nodeType":"YulBlock","src":"19832:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"19834:16:14"},"nodeType":"YulFunctionCall","src":"19834:18:14"},"nodeType":"YulExpressionStatement","src":"19834:18:14"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19825:5:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19818:6:14"},"nodeType":"YulFunctionCall","src":"19818:13:14"},"nodeType":"YulIf","src":"19815:39:14"},{"nodeType":"YulAssignment","src":"19863:25:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19874:5:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19885:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19881:3:14"},"nodeType":"YulFunctionCall","src":"19881:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19870:3:14"},"nodeType":"YulFunctionCall","src":"19870:18:14"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"19863:3:14"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19787:5:14","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"19797:3:14","type":""}],"src":"19758:136:14"},{"body":{"nodeType":"YulBlock","src":"19947:77:14","statements":[{"nodeType":"YulAssignment","src":"19957:16:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19968:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"19971:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19964:3:14"},"nodeType":"YulFunctionCall","src":"19964:9:14"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"19957:3:14"}]},{"body":{"nodeType":"YulBlock","src":"19996:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"19998:16:14"},"nodeType":"YulFunctionCall","src":"19998:18:14"},"nodeType":"YulExpressionStatement","src":"19998:18:14"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19988:1:14"},{"name":"sum","nodeType":"YulIdentifier","src":"19991:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19985:2:14"},"nodeType":"YulFunctionCall","src":"19985:10:14"},"nodeType":"YulIf","src":"19982:36:14"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"19930:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"19933:1:14","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"19939:3:14","type":""}],"src":"19899:125:14"},{"body":{"nodeType":"YulBlock","src":"20203:233:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20220:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20231:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20213:6:14"},"nodeType":"YulFunctionCall","src":"20213:21:14"},"nodeType":"YulExpressionStatement","src":"20213:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20254:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20265:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20250:3:14"},"nodeType":"YulFunctionCall","src":"20250:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"20270:2:14","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20243:6:14"},"nodeType":"YulFunctionCall","src":"20243:30:14"},"nodeType":"YulExpressionStatement","src":"20243:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20293:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20304:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20289:3:14"},"nodeType":"YulFunctionCall","src":"20289:18:14"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"20309:34:14","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20282:6:14"},"nodeType":"YulFunctionCall","src":"20282:62:14"},"nodeType":"YulExpressionStatement","src":"20282:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20364:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20375:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20360:3:14"},"nodeType":"YulFunctionCall","src":"20360:18:14"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"20380:13:14","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20353:6:14"},"nodeType":"YulFunctionCall","src":"20353:41:14"},"nodeType":"YulExpressionStatement","src":"20353:41:14"},{"nodeType":"YulAssignment","src":"20403:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20415:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20426:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20411:3:14"},"nodeType":"YulFunctionCall","src":"20411:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20403:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20180:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20194:4:14","type":""}],"src":"20029:407:14"},{"body":{"nodeType":"YulBlock","src":"20615:234:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20632:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20643:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20625:6:14"},"nodeType":"YulFunctionCall","src":"20625:21:14"},"nodeType":"YulExpressionStatement","src":"20625:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20666:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20677:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20662:3:14"},"nodeType":"YulFunctionCall","src":"20662:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"20682:2:14","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20655:6:14"},"nodeType":"YulFunctionCall","src":"20655:30:14"},"nodeType":"YulExpressionStatement","src":"20655:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20705:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20716:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20701:3:14"},"nodeType":"YulFunctionCall","src":"20701:18:14"},{"hexValue":"4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578","kind":"string","nodeType":"YulLiteral","src":"20721:34:14","type":"","value":"ERC721: operator query for nonex"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20694:6:14"},"nodeType":"YulFunctionCall","src":"20694:62:14"},"nodeType":"YulExpressionStatement","src":"20694:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20776:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20787:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20772:3:14"},"nodeType":"YulFunctionCall","src":"20772:18:14"},{"hexValue":"697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"20792:14:14","type":"","value":"istent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20765:6:14"},"nodeType":"YulFunctionCall","src":"20765:42:14"},"nodeType":"YulExpressionStatement","src":"20765:42:14"},{"nodeType":"YulAssignment","src":"20816:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20828:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"20839:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20824:3:14"},"nodeType":"YulFunctionCall","src":"20824:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20816:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20592:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20606:4:14","type":""}],"src":"20441:408:14"},{"body":{"nodeType":"YulBlock","src":"21028:227:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21045:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21056:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21038:6:14"},"nodeType":"YulFunctionCall","src":"21038:21:14"},"nodeType":"YulExpressionStatement","src":"21038:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21079:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21090:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21075:3:14"},"nodeType":"YulFunctionCall","src":"21075:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"21095:2:14","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21068:6:14"},"nodeType":"YulFunctionCall","src":"21068:30:14"},"nodeType":"YulExpressionStatement","src":"21068:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21118:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21129:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21114:3:14"},"nodeType":"YulFunctionCall","src":"21114:18:14"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"21134:34:14","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21107:6:14"},"nodeType":"YulFunctionCall","src":"21107:62:14"},"nodeType":"YulExpressionStatement","src":"21107:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21189:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21200:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21185:3:14"},"nodeType":"YulFunctionCall","src":"21185:18:14"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"21205:7:14","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21178:6:14"},"nodeType":"YulFunctionCall","src":"21178:35:14"},"nodeType":"YulExpressionStatement","src":"21178:35:14"},{"nodeType":"YulAssignment","src":"21222:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21234:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21245:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21230:3:14"},"nodeType":"YulFunctionCall","src":"21230:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21222:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21005:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21019:4:14","type":""}],"src":"20854:401:14"},{"body":{"nodeType":"YulBlock","src":"21434:226:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21451:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21462:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21444:6:14"},"nodeType":"YulFunctionCall","src":"21444:21:14"},"nodeType":"YulExpressionStatement","src":"21444:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21485:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21496:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21481:3:14"},"nodeType":"YulFunctionCall","src":"21481:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"21501:2:14","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21474:6:14"},"nodeType":"YulFunctionCall","src":"21474:30:14"},"nodeType":"YulExpressionStatement","src":"21474:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21524:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21535:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21520:3:14"},"nodeType":"YulFunctionCall","src":"21520:18:14"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"21540:34:14","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21513:6:14"},"nodeType":"YulFunctionCall","src":"21513:62:14"},"nodeType":"YulExpressionStatement","src":"21513:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21595:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21606:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21591:3:14"},"nodeType":"YulFunctionCall","src":"21591:18:14"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"21611:6:14","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21584:6:14"},"nodeType":"YulFunctionCall","src":"21584:34:14"},"nodeType":"YulExpressionStatement","src":"21584:34:14"},{"nodeType":"YulAssignment","src":"21627:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21639:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21650:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21635:3:14"},"nodeType":"YulFunctionCall","src":"21635:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21627:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21411:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21425:4:14","type":""}],"src":"21260:400:14"},{"body":{"nodeType":"YulBlock","src":"21839:175:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21856:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21867:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21849:6:14"},"nodeType":"YulFunctionCall","src":"21849:21:14"},"nodeType":"YulExpressionStatement","src":"21849:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21890:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21901:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21886:3:14"},"nodeType":"YulFunctionCall","src":"21886:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"21906:2:14","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21879:6:14"},"nodeType":"YulFunctionCall","src":"21879:30:14"},"nodeType":"YulExpressionStatement","src":"21879:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21929:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"21940:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21925:3:14"},"nodeType":"YulFunctionCall","src":"21925:18:14"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"21945:27:14","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21918:6:14"},"nodeType":"YulFunctionCall","src":"21918:55:14"},"nodeType":"YulExpressionStatement","src":"21918:55:14"},{"nodeType":"YulAssignment","src":"21982:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21994:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"22005:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21990:3:14"},"nodeType":"YulFunctionCall","src":"21990:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21982:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21816:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21830:4:14","type":""}],"src":"21665:349:14"},{"body":{"nodeType":"YulBlock","src":"22193:240:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22210:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"22221:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22203:6:14"},"nodeType":"YulFunctionCall","src":"22203:21:14"},"nodeType":"YulExpressionStatement","src":"22203:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22244:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"22255:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22240:3:14"},"nodeType":"YulFunctionCall","src":"22240:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"22260:2:14","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22233:6:14"},"nodeType":"YulFunctionCall","src":"22233:30:14"},"nodeType":"YulExpressionStatement","src":"22233:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22283:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"22294:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22279:3:14"},"nodeType":"YulFunctionCall","src":"22279:18:14"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"22299:34:14","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22272:6:14"},"nodeType":"YulFunctionCall","src":"22272:62:14"},"nodeType":"YulExpressionStatement","src":"22272:62:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22354:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"22365:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22350:3:14"},"nodeType":"YulFunctionCall","src":"22350:18:14"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"22370:20:14","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22343:6:14"},"nodeType":"YulFunctionCall","src":"22343:48:14"},"nodeType":"YulExpressionStatement","src":"22343:48:14"},{"nodeType":"YulAssignment","src":"22400:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22412:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"22423:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22408:3:14"},"nodeType":"YulFunctionCall","src":"22408:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22400:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22170:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22184:4:14","type":""}],"src":"22019:414:14"},{"body":{"nodeType":"YulBlock","src":"22470:95:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22487:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22494:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"22499:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22490:3:14"},"nodeType":"YulFunctionCall","src":"22490:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22480:6:14"},"nodeType":"YulFunctionCall","src":"22480:31:14"},"nodeType":"YulExpressionStatement","src":"22480:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22527:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"22530:4:14","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22520:6:14"},"nodeType":"YulFunctionCall","src":"22520:15:14"},"nodeType":"YulExpressionStatement","src":"22520:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22551:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22554:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22544:6:14"},"nodeType":"YulFunctionCall","src":"22544:15:14"},"nodeType":"YulExpressionStatement","src":"22544:15:14"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"22438:127:14"},{"body":{"nodeType":"YulBlock","src":"22616:74:14","statements":[{"body":{"nodeType":"YulBlock","src":"22639:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"22641:16:14"},"nodeType":"YulFunctionCall","src":"22641:18:14"},"nodeType":"YulExpressionStatement","src":"22641:18:14"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"22636:1:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22629:6:14"},"nodeType":"YulFunctionCall","src":"22629:9:14"},"nodeType":"YulIf","src":"22626:35:14"},{"nodeType":"YulAssignment","src":"22670:14:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22679:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"22682:1:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"22675:3:14"},"nodeType":"YulFunctionCall","src":"22675:9:14"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"22670:1:14"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"22601:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"22604:1:14","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"22610:1:14","type":""}],"src":"22570:120:14"},{"body":{"nodeType":"YulBlock","src":"22741:102:14","statements":[{"nodeType":"YulAssignment","src":"22751:38:14","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22766:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"22769:4:14","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22762:3:14"},"nodeType":"YulFunctionCall","src":"22762:12:14"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"22780:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"22783:4:14","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22776:3:14"},"nodeType":"YulFunctionCall","src":"22776:12:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22758:3:14"},"nodeType":"YulFunctionCall","src":"22758:31:14"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"22751:3:14"}]},{"body":{"nodeType":"YulBlock","src":"22815:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22817:16:14"},"nodeType":"YulFunctionCall","src":"22817:18:14"},"nodeType":"YulExpressionStatement","src":"22817:18:14"}]},"condition":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"22804:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"22809:4:14","type":"","value":"0xff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22801:2:14"},"nodeType":"YulFunctionCall","src":"22801:13:14"},"nodeType":"YulIf","src":"22798:39:14"}]},"name":"checked_add_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"22724:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"22727:1:14","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"22733:3:14","type":""}],"src":"22695:148:14"},{"body":{"nodeType":"YulBlock","src":"23145:438:14","statements":[{"nodeType":"YulAssignment","src":"23155:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23167:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"23178:3:14","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23163:3:14"},"nodeType":"YulFunctionCall","src":"23163:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23155:4:14"}]},{"nodeType":"YulVariableDeclaration","src":"23191:29:14","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23209:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"23214:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23205:3:14"},"nodeType":"YulFunctionCall","src":"23205:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"23218:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23201:3:14"},"nodeType":"YulFunctionCall","src":"23201:19:14"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"23195:2:14","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23236:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23251:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"23259:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23247:3:14"},"nodeType":"YulFunctionCall","src":"23247:15:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23229:6:14"},"nodeType":"YulFunctionCall","src":"23229:34:14"},"nodeType":"YulExpressionStatement","src":"23229:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23283:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"23294:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23279:3:14"},"nodeType":"YulFunctionCall","src":"23279:18:14"},{"name":"value1","nodeType":"YulIdentifier","src":"23299:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23272:6:14"},"nodeType":"YulFunctionCall","src":"23272:34:14"},"nodeType":"YulExpressionStatement","src":"23272:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23326:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"23337:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23322:3:14"},"nodeType":"YulFunctionCall","src":"23322:18:14"},{"name":"value2","nodeType":"YulIdentifier","src":"23342:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23315:6:14"},"nodeType":"YulFunctionCall","src":"23315:34:14"},"nodeType":"YulExpressionStatement","src":"23315:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23369:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"23380:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23365:3:14"},"nodeType":"YulFunctionCall","src":"23365:18:14"},{"name":"value3","nodeType":"YulIdentifier","src":"23385:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23358:6:14"},"nodeType":"YulFunctionCall","src":"23358:34:14"},"nodeType":"YulExpressionStatement","src":"23358:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23412:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"23423:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23408:3:14"},"nodeType":"YulFunctionCall","src":"23408:19:14"},{"name":"value4","nodeType":"YulIdentifier","src":"23429:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23401:6:14"},"nodeType":"YulFunctionCall","src":"23401:35:14"},"nodeType":"YulExpressionStatement","src":"23401:35:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23456:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"23467:3:14","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23452:3:14"},"nodeType":"YulFunctionCall","src":"23452:19:14"},{"name":"value5","nodeType":"YulIdentifier","src":"23473:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23445:6:14"},"nodeType":"YulFunctionCall","src":"23445:35:14"},"nodeType":"YulExpressionStatement","src":"23445:35:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23500:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"23511:3:14","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23496:3:14"},"nodeType":"YulFunctionCall","src":"23496:19:14"},{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"23521:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"23529:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23517:3:14"},"nodeType":"YulFunctionCall","src":"23517:15:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23489:6:14"},"nodeType":"YulFunctionCall","src":"23489:44:14"},"nodeType":"YulExpressionStatement","src":"23489:44:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23553:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"23564:3:14","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23549:3:14"},"nodeType":"YulFunctionCall","src":"23549:19:14"},{"name":"value7","nodeType":"YulIdentifier","src":"23570:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23542:6:14"},"nodeType":"YulFunctionCall","src":"23542:35:14"},"nodeType":"YulExpressionStatement","src":"23542:35:14"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_bytes32_t_address_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_bytes32_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23058:9:14","type":""},{"name":"value7","nodeType":"YulTypedName","src":"23069:6:14","type":""},{"name":"value6","nodeType":"YulTypedName","src":"23077:6:14","type":""},{"name":"value5","nodeType":"YulTypedName","src":"23085:6:14","type":""},{"name":"value4","nodeType":"YulTypedName","src":"23093:6:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"23101:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23109:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23117:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23125:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23136:4:14","type":""}],"src":"22848:735:14"},{"body":{"nodeType":"YulBlock","src":"23626:74:14","statements":[{"body":{"nodeType":"YulBlock","src":"23649:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"23651:16:14"},"nodeType":"YulFunctionCall","src":"23651:18:14"},"nodeType":"YulExpressionStatement","src":"23651:18:14"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23646:1:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23639:6:14"},"nodeType":"YulFunctionCall","src":"23639:9:14"},"nodeType":"YulIf","src":"23636:35:14"},{"nodeType":"YulAssignment","src":"23680:14:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23689:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"23692:1:14"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"23685:3:14"},"nodeType":"YulFunctionCall","src":"23685:9:14"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"23680:1:14"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"23611:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"23614:1:14","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"23620:1:14","type":""}],"src":"23588:112:14"},{"body":{"nodeType":"YulBlock","src":"23908:286:14","statements":[{"nodeType":"YulVariableDeclaration","src":"23918:29:14","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23936:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"23941:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23932:3:14"},"nodeType":"YulFunctionCall","src":"23932:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"23945:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23928:3:14"},"nodeType":"YulFunctionCall","src":"23928:19:14"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"23922:2:14","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23963:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23978:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"23986:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23974:3:14"},"nodeType":"YulFunctionCall","src":"23974:15:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23956:6:14"},"nodeType":"YulFunctionCall","src":"23956:34:14"},"nodeType":"YulExpressionStatement","src":"23956:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24010:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"24021:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24006:3:14"},"nodeType":"YulFunctionCall","src":"24006:18:14"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24030:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"24038:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24026:3:14"},"nodeType":"YulFunctionCall","src":"24026:15:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23999:6:14"},"nodeType":"YulFunctionCall","src":"23999:43:14"},"nodeType":"YulExpressionStatement","src":"23999:43:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24062:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"24073:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24058:3:14"},"nodeType":"YulFunctionCall","src":"24058:18:14"},{"name":"value2","nodeType":"YulIdentifier","src":"24078:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24051:6:14"},"nodeType":"YulFunctionCall","src":"24051:34:14"},"nodeType":"YulExpressionStatement","src":"24051:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24105:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"24116:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24101:3:14"},"nodeType":"YulFunctionCall","src":"24101:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"24121:3:14","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24094:6:14"},"nodeType":"YulFunctionCall","src":"24094:31:14"},"nodeType":"YulExpressionStatement","src":"24094:31:14"},{"nodeType":"YulAssignment","src":"24134:54:14","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"24160:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24172:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"24183:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24168:3:14"},"nodeType":"YulFunctionCall","src":"24168:19:14"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"24142:17:14"},"nodeType":"YulFunctionCall","src":"24142:46:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24134:4:14"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23853:9:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"23864:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23872:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23880:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23888:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23899:4:14","type":""}],"src":"23705:489:14"},{"body":{"nodeType":"YulBlock","src":"24279:169:14","statements":[{"body":{"nodeType":"YulBlock","src":"24325:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24334:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24337:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24327:6:14"},"nodeType":"YulFunctionCall","src":"24327:12:14"},"nodeType":"YulExpressionStatement","src":"24327:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"24300:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"24309:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24296:3:14"},"nodeType":"YulFunctionCall","src":"24296:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"24321:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24292:3:14"},"nodeType":"YulFunctionCall","src":"24292:32:14"},"nodeType":"YulIf","src":"24289:52:14"},{"nodeType":"YulVariableDeclaration","src":"24350:29:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24369:9:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24363:5:14"},"nodeType":"YulFunctionCall","src":"24363:16:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"24354:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24412:5:14"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"24388:23:14"},"nodeType":"YulFunctionCall","src":"24388:30:14"},"nodeType":"YulExpressionStatement","src":"24388:30:14"},{"nodeType":"YulAssignment","src":"24427:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"24437:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24427:6:14"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24245:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"24256:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"24268:6:14","type":""}],"src":"24199:249:14"}]},"contents":"{\n    { }\n    function validator_revert_contract_IHValue(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IHValue_$3664(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IHValue(value)\n        value0 := value\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IHValue(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_contract_IHValue(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IHValue(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_IHValue(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IHValue(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_IHValue_$3664__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IHValue(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IHValue(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_IHValue(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IHValue(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_IHValue(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_stringliteral_71947446ca525a6f47b4c26e39d45a716107b5eb5547cf11856e8d61c0fa00ba__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"HashPunk: caller is not the owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: approved query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not ow\")\n        mstore(add(headStart, 96), \"ner nor approved for all\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 0)\n        tail := add(headStart, 64)\n    }\n    function abi_encode_tuple_t_stringliteral_2c270178c73806a8dbbf8aad0f9eb77e61abe0b7a93239d42f99fae572eed526__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"invalid id\")\n        tail := add(headStart, 96)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_fc7e415b4d71800746fd56cd2e9f99a70019c07d161e9e43d2fe64c358808e78__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"insufficient Pass Card balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_8dab769bb3e1b4a60276b85ee01ccc68a7073052ca1cb5124502172cc6982bf4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"insufficient HValue balance\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"ERC721: transfer caller is not o\")\n        mstore(add(headStart, 96), \"wner nor approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC721: balance query for the ze\")\n        mstore(add(headStart, 96), \"ro address\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := extract_byte_array_length(slotValue)\n        let _1 := 1\n        switch and(slotValue, _1)\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            mstore(0, value0)\n            let _2 := 0x20\n            let dataPos := keccak256(0, _2)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), ret, length_1)\n        end := add(ret, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_32a53888ca69a743bbaa97a0e7d9316f442fadccf6d37bbebbe9ab28e7024e3e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Contracts cannot mint\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bb31380de390e4e0627ca842496a815f4aa25ce62aeb0a04ee78aed6e6c12b62__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC721r: need to mint at least o\")\n        mstore(add(headStart, 96), \"ne token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ffa3719eede42d3318b3817081dd67bc4c18fb5a15d06600fb820769c5c8571__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"ERC721r: minting more tokens tha\")\n        mstore(add(headStart, 96), \"n available\")\n        tail := add(headStart, 128)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: operator query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_add_t_uint8(x, y) -> sum\n    {\n        sum := add(and(x, 0xff), and(y, 0xff))\n        if gt(sum, 0xff) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_bytes32_t_address_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_bytes32_t_address_t_uint256__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 256)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), and(value6, _1))\n        mstore(add(headStart, 224), value7)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101fb5760003560e01c806370a082311161011a578063a22cb465116100ad578063c87b56dd1161007c578063c87b56dd14610421578063cdda418c14610434578063d5abeb011461043c578063e985e9c514610444578063f7e056ee1461045757600080fd5b8063a22cb465146103c8578063a8a86457146103db578063b88d4fde146103ee578063bfc524431461040157600080fd5b80638da5cb5b116100e95780638da5cb5b146103875780639332c9a51461039a57806395d89b41146103ad578063a0bcfc7f146103b557600080fd5b806370a082311461035057806380893c171461036357806383d18f7a1461036c57806389be0ad11461037457600080fd5b80631e214f0611610192578063444b7aaf11610161578063444b7aaf1461030e5780635001f3b5146103165780635b2bd79e1461031f5780636352211e1461032757600080fd5b80631e214f06146102c257806323b872dd146102d557806338e80f68146102e857806342842e0e146102fb57600080fd5b8063095ea7b3116101ce578063095ea7b31461027d5780630e4715251461029057806318160ddd146102a75780631b2ef1ca146102af57600080fd5b80630178f6b91461020057806301ffc9a71461021557806306fdde031461023d578063081812fc14610252575b600080fd5b61021361020e366004611c24565b610460565b005b610228610223366004611c5e565b6104b5565b60405190151581526020015b60405180910390f35b610245610507565b6040516102349190611ccb565b610265610260366004611cde565b610599565b6040516001600160a01b039091168152602001610234565b61021361028b366004611cf7565b61062e565b61029960735481565b604051908152602001610234565b610299610741565b6102136102bd366004611d23565b610758565b6102136102d0366004611df1565b610cbe565b6102136102e3366004611e50565b610e56565b6102136102f6366004611cde565b610e87565b610213610309366004611e50565b610eb6565b610299600181565b610299606f5481565b610245610ed1565b610265610335366004611cde565b6000908152606a60205260409020546001600160a01b031690565b61029961035e366004611c24565b610f5f565b610299606e5481565b610299600281565b610213610382366004611cde565b610fe6565b607154610265906001600160a01b031681565b607054610265906001600160a01b031681565b610245611015565b6102136103c3366004611e91565b611024565b6102136103d6366004611ec6565b61105e565b6102996103e9366004611cf7565b611069565b6102136103fc366004611f04565b61109a565b61041461040f366004611c24565b6110d2565b6040516102349190611f84565b61024561042f366004611cde565b61113e565b610299600381565b606954610299565b610228610452366004611fc8565b611172565b61029960745481565b6071546001600160a01b031633146104935760405162461bcd60e51b815260040161048a90611ff6565b60405180910390fd5b607080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166380ac58cd60e01b14806104e657506001600160e01b03198216635b5e139f60e01b145b8061050157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606065805461051690612037565b80601f016020809104026020016040519081016040528092919081815260200182805461054290612037565b801561058f5780601f106105645761010080835404028352916020019161058f565b820191906000526020600020905b81548152906001019060200180831161057257829003601f168201915b5050505050905090565b6000818152606a60205260408120546001600160a01b03166106125760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161048a565b506000908152606c60205260409020546001600160a01b031690565b6000818152606a60205260409020546001600160a01b039081169083168190036106a45760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161048a565b336001600160a01b03821614806106c057506106c08133611172565b6107325760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161048a565b61073c83836111a0565b505050565b60006068546069546107539190612087565b905090565b3233146107815760405162461bcd60e51b8152602060048201526000602482015260440161048a565b60018214806107905750600282145b6107c95760405162461bcd60e51b815260206004820152600a6024820152691a5b9d985b1a59081a5960b21b604482015260640161048a565b600182036109b45780606e546107df919061209a565b607054604051627eeac760e11b8152336004820152600160248201526001600160a01b039091169062fdd58e90604401602060405180830381865afa15801561082c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085091906120b1565b101561089e5760405162461bcd60e51b815260206004820152601e60248201527f696e73756666696369656e74205061737320436172642062616c616e63650000604482015260640161048a565b607054606e546001600160a01b039091169063f5298aca9033906001906108c690869061209a565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b15801561091457600080fd5b505af1158015610928573d6000803e3d6000fd5b505050506109363382611207565b5060705460405163731133e960e01b8152336004820152600360248201526001604482015260806064820152600060848201526001600160a01b039091169063731133e99060a401600060405180830381600087803b15801561099857600080fd5b505af11580156109ac573d6000803e3d6000fd5b505050505050565b80606f546109c2919061209a565b607054604051634c25e11f60e01b81523360048201526001600160a01b0390911690634c25e11f90602401602060405180830381865afa158015610a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2e91906120b1565b607054604051627eeac760e11b8152336004820152600260248201526001600160a01b039091169062fdd58e90604401602060405180830381865afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f91906120b1565b610aa99190612087565b1015610af75760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204856616c75652062616c616e63650000000000604482015260640161048a565b607054606f546001600160a01b039091169063f5298aca903390600290610b1f90869061209a565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610b6d57600080fd5b505af1158015610b81573d6000803e3d6000fd5b505050506000610b913383611207565b905060005b8151811015610c3f57607354828281518110610bb457610bb46120ca565b602002602001015110158015610be55750607454828281518110610bda57610bda6120ca565b602002602001015111155b15610c2d573360009081526075602052604090208251839083908110610c0d57610c0d6120ca565b602090810291909101810151825460018101845560009384529190922001555b80610c37816120e0565b915050610b96565b5060705460405163731133e960e01b8152336004820152600360248201526001604482015260806064820152600060848201526001600160a01b039091169063731133e99060a401600060405180830381600087803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b50505050505050565b600054610100900460ff1615808015610cde5750600054600160ff909116105b80610cf85750303b158015610cf8575060005460ff166001145b610d5b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161048a565b6000805460ff191660011790558015610d7e576000805461ff0019166101001790555b610dc5604051806040016040528060088152602001674861736850756e6b60c01b81525060405180604001604052806002815260200161048560f41b815250610bb8611452565b606e829055606f839055607080546001600160a01b0319166001600160a01b0386161790556072610df6868261213f565b50607180546001600160a01b031916331790558015610e4f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b610e603382611484565b610e7c5760405162461bcd60e51b815260040161048a906121ff565b61073c838383611572565b6071546001600160a01b03163314610eb15760405162461bcd60e51b815260040161048a90611ff6565b606f55565b61073c8383836040518060200160405280600081525061109a565b60728054610ede90612037565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0a90612037565b8015610f575780601f10610f2c57610100808354040283529160200191610f57565b820191906000526020600020905b815481529060010190602001808311610f3a57829003601f168201915b505050505081565b60006001600160a01b038216610fca5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161048a565b506001600160a01b03166000908152606b602052604090205490565b6071546001600160a01b031633146110105760405162461bcd60e51b815260040161048a90611ff6565b606e55565b60606066805461051690612037565b6071546001600160a01b0316331461104e5760405162461bcd60e51b815260040161048a90611ff6565b607261105a828261213f565b5050565b61105a33838361170e565b6075602052816000526040600020818154811061108557600080fd5b90600052602060002001600091509150505481565b6110a43383611484565b6110c05760405162461bcd60e51b815260040161048a906121ff565b6110cc848484846117dc565b50505050565b6001600160a01b03811660009081526075602090815260409182902080548351818402810184019094528084526060939283018282801561113257602002820191906000526020600020905b81548152602001906001019080831161111e575b50505050509050919050565b6060607261114b8361180f565b60405160200161115c929190612250565b6040516020818303038152906040529050919050565b6001600160a01b039182166000908152606d6020908152604080832093909416825291909152205460ff1690565b6000818152606c6020908152604080832080546001600160a01b0319166001600160a01b03878116918217909255606a909352818420549151859492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b60603332146112505760405162461bcd60e51b815260206004820152601560248201527410dbdb9d1c9858dd1cc818d85b9b9bdd081b5a5b9d605a1b604482015260640161048a565b6001600160a01b0383166112a65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161048a565b600082116113075760405162461bcd60e51b815260206004820152602860248201527f455243373231723a206e65656420746f206d696e74206174206c65617374206f6044820152673732903a37b5b2b760c11b606482015260840161048a565b81606854101561136d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231723a206d696e74696e67206d6f726520746f6b656e732074686160448201526a6e20617661696c61626c6560a81b606482015260840161048a565b60685460008367ffffffffffffffff81111561138b5761138b611d45565b6040519080825280602002602001820160405280156113b4578160200160208202803683370190505b50905060005b848110156114165760006113ce878561193b565b9050808383815181106113e3576113e36120ca565b6020026020010181815250506113f987826119cd565b611402846122d7565b9350508061140f906120e0565b90506113ba565b5060688290556001600160a01b0385166000908152606b6020526040812080548692906114449084906122ee565b909155509095945050505050565b600054610100900460ff166114795760405162461bcd60e51b815260040161048a90612301565b61073c838383611a26565b6000818152606a60205260408120546001600160a01b03166114fd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161048a565b6070546001600160a01b0316330361151757506001610501565b6000828152606a60205260409020546001600160a01b0390811690841681148061155a5750836001600160a01b031661154f84610599565b6001600160a01b0316145b8061156a575061156a8185611172565b949350505050565b6000818152606a60205260409020546001600160a01b038481169116146115e95760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161048a565b6001600160a01b03821661164b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161048a565b6116566000826111a0565b6001600160a01b0383166000908152606b6020526040812080546001929061167f908490612087565b90915550506001600160a01b0382166000908152606b602052604081208054600192906116ad9084906122ee565b90915550506000818152606a602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b03160361176f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161048a565b6001600160a01b038381166000818152606d6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6117e7848484611572565b6117f384848484611a73565b6110cc5760405162461bcd60e51b815260040161048a9061234c565b6060816000036118365750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611860578061184a816120e0565b91506118599050600a836123b4565b915061183a565b60008167ffffffffffffffff81111561187b5761187b611d45565b6040519080825280601f01601f1916602001820160405280156118a5576020820181803683370190505b509050815b8515611932576118bb600182612087565b905060006118ca600a886123b4565b6118d590600a61209a565b6118df9088612087565b6118ea9060306123c8565b905060008160f81b905080848481518110611907576119076120ca565b60200101906001600160f81b031916908160001a905350611929600a896123b4565b975050506118aa565b50949350505050565b600080833a43424461194e600184612087565b604080516001600160a01b0390971660208801528601949094526060850192909252608084015260a08301524060c08201523060e082015261010081018490526101200160408051601f198184030181529190528051602090910120905060006119b884836123e1565b90506119c48185611b74565b95945050505050565b6000818152606a602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff16611a4d5760405162461bcd60e51b815260040161048a90612301565b6065611a59848261213f565b506066611a66838261213f565b5060698190556068555050565b60006001600160a01b0384163b15611b6957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611ab79033908990889088906004016123f5565b6020604051808303816000875af1925050508015611af2575060408051601f3d908101601f19168201909252611aef91810190612432565b60015b611b4f573d808015611b20576040519150601f19603f3d011682016040523d82523d6000602084013e611b25565b606091505b508051600003611b475760405162461bcd60e51b815260040161048a9061234c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061156a565b506001949350505050565b60008281526067602052604081205481818103611b92575083611b95565b50805b6000611ba2600186612087565b600081815260676020526040902054909150868214611beb5780600003611bd9576000878152606760205260409020829055611beb565b60008781526067602052604090208190555b8015611c01576000828152606760205260408120555b509095945050505050565b6001600160a01b0381168114611c2157600080fd5b50565b600060208284031215611c3657600080fd5b8135611c4181611c0c565b9392505050565b6001600160e01b031981168114611c2157600080fd5b600060208284031215611c7057600080fd5b8135611c4181611c48565b60005b83811015611c96578181015183820152602001611c7e565b50506000910152565b60008151808452611cb7816020860160208601611c7b565b601f01601f19169290920160200192915050565b602081526000611c416020830184611c9f565b600060208284031215611cf057600080fd5b5035919050565b60008060408385031215611d0a57600080fd5b8235611d1581611c0c565b946020939093013593505050565b60008060408385031215611d3657600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611d7657611d76611d45565b604051601f8501601f19908116603f01168101908282118183101715611d9e57611d9e611d45565b81604052809350858152868686011115611db757600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611de257600080fd5b611c4183833560208501611d5b565b60008060008060808587031215611e0757600080fd5b843567ffffffffffffffff811115611e1e57600080fd5b611e2a87828801611dd1565b9450506020850135611e3b81611c0c565b93969395505050506040820135916060013590565b600080600060608486031215611e6557600080fd5b8335611e7081611c0c565b92506020840135611e8081611c0c565b929592945050506040919091013590565b600060208284031215611ea357600080fd5b813567ffffffffffffffff811115611eba57600080fd5b61156a84828501611dd1565b60008060408385031215611ed957600080fd5b8235611ee481611c0c565b915060208301358015158114611ef957600080fd5b809150509250929050565b60008060008060808587031215611f1a57600080fd5b8435611f2581611c0c565b93506020850135611f3581611c0c565b925060408501359150606085013567ffffffffffffffff811115611f5857600080fd5b8501601f81018713611f6957600080fd5b611f7887823560208401611d5b565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b81811015611fbc57835183529284019291840191600101611fa0565b50909695505050505050565b60008060408385031215611fdb57600080fd5b8235611fe681611c0c565b91506020830135611ef981611c0c565b60208082526021908201527f4861736850756e6b3a2063616c6c6572206973206e6f7420746865206f776e656040820152603960f91b606082015260800190565b600181811c9082168061204b57607f821691505b60208210810361206b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561050157610501612071565b808202811582820484141761050157610501612071565b6000602082840312156120c357600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016120f2576120f2612071565b5060010190565b601f82111561073c57600081815260208120601f850160051c810160208610156121205750805b601f850160051c820191505b818110156109ac5782815560010161212c565b815167ffffffffffffffff81111561215957612159611d45565b61216d816121678454612037565b846120f9565b602080601f8311600181146121a2576000841561218a5750858301515b600019600386901b1c1916600185901b1785556109ac565b600085815260208120601f198616915b828110156121d1578886015182559484019460019091019084016121b2565b50858210156121ef5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600080845461225e81612037565b60018281168015612276576001811461228b576122ba565b60ff19841687528215158302870194506122ba565b8860005260208060002060005b858110156122b15781548a820152908401908201612298565b50505082870194505b5050505083516122ce818360208801611c7b565b01949350505050565b6000816122e6576122e6612071565b506000190190565b8082018082111561050157610501612071565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6000826123c3576123c361239e565b500490565b60ff818116838216019081111561050157610501612071565b6000826123f0576123f061239e565b500690565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061242890830184611c9f565b9695505050505050565b60006020828403121561244457600080fd5b8151611c4181611c4856fea26469706673582212201404fa242e8e553755d8f6f0fb6cf1b866a83f18800dbac1c43efa1a062e963d64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1FB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x11A JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0xCDDA418C EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0xD5ABEB01 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0xF7E056EE EQ PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3C8 JUMPI DUP1 PUSH4 0xA8A86457 EQ PUSH2 0x3DB JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3EE JUMPI DUP1 PUSH4 0xBFC52443 EQ PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0x9332C9A5 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0xA0BCFC7F EQ PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x80893C17 EQ PUSH2 0x363 JUMPI DUP1 PUSH4 0x83D18F7A EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0x89BE0AD1 EQ PUSH2 0x374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1E214F06 GT PUSH2 0x192 JUMPI DUP1 PUSH4 0x444B7AAF GT PUSH2 0x161 JUMPI DUP1 PUSH4 0x444B7AAF EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x5001F3B5 EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0x5B2BD79E EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1E214F06 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0x38E80F68 EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1CE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0xE471525 EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x1B2EF1CA EQ PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x178F6B9 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x252 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x213 PUSH2 0x20E CALLDATASIZE PUSH1 0x4 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0x460 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x228 PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C5E JUMP JUMPDEST PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x245 PUSH2 0x507 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x234 SWAP2 SWAP1 PUSH2 0x1CCB JUMP JUMPDEST PUSH2 0x265 PUSH2 0x260 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0x599 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x234 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF7 JUMP JUMPDEST PUSH2 0x62E JUMP JUMPDEST PUSH2 0x299 PUSH1 0x73 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x234 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x741 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x2BD CALLDATASIZE PUSH1 0x4 PUSH2 0x1D23 JUMP JUMPDEST PUSH2 0x758 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x2D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0xCBE JUMP JUMPDEST PUSH2 0x213 PUSH2 0x2E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E50 JUMP JUMPDEST PUSH2 0xE56 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0xE87 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E50 JUMP JUMPDEST PUSH2 0xEB6 JUMP JUMPDEST PUSH2 0x299 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x299 PUSH1 0x6F SLOAD DUP2 JUMP JUMPDEST PUSH2 0x245 PUSH2 0xED1 JUMP JUMPDEST PUSH2 0x265 PUSH2 0x335 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CDE JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x35E CALLDATASIZE PUSH1 0x4 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0xF5F JUMP JUMPDEST PUSH2 0x299 PUSH1 0x6E SLOAD DUP2 JUMP JUMPDEST PUSH2 0x299 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x71 SLOAD PUSH2 0x265 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH2 0x265 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x245 PUSH2 0x1015 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x3C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E91 JUMP JUMPDEST PUSH2 0x1024 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x3D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x105E JUMP JUMPDEST PUSH2 0x299 PUSH2 0x3E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF7 JUMP JUMPDEST PUSH2 0x1069 JUMP JUMPDEST PUSH2 0x213 PUSH2 0x3FC CALLDATASIZE PUSH1 0x4 PUSH2 0x1F04 JUMP JUMPDEST PUSH2 0x109A JUMP JUMPDEST PUSH2 0x414 PUSH2 0x40F CALLDATASIZE PUSH1 0x4 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0x10D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x234 SWAP2 SWAP1 PUSH2 0x1F84 JUMP JUMPDEST PUSH2 0x245 PUSH2 0x42F CALLDATASIZE PUSH1 0x4 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0x113E JUMP JUMPDEST PUSH2 0x299 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FC8 JUMP JUMPDEST PUSH2 0x1172 JUMP JUMPDEST PUSH2 0x299 PUSH1 0x74 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x71 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x493 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x70 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x4E6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x501 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x65 DUP1 SLOAD PUSH2 0x516 SWAP1 PUSH2 0x2037 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x542 SWAP1 PUSH2 0x2037 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x58F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x564 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x58F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x572 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x612 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 SWAP1 SUB PUSH2 0x6A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x6C0 JUMPI POP PUSH2 0x6C0 DUP2 CALLER PUSH2 0x1172 JUMP JUMPDEST PUSH2 0x732 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH2 0x73C DUP4 DUP4 PUSH2 0x11A0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x68 SLOAD PUSH1 0x69 SLOAD PUSH2 0x753 SWAP2 SWAP1 PUSH2 0x2087 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST ORIGIN CALLER EQ PUSH2 0x781 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x1 DUP3 EQ DUP1 PUSH2 0x790 JUMPI POP PUSH1 0x2 DUP3 EQ JUMPDEST PUSH2 0x7C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x1A5B9D985B1A59081A59 PUSH1 0xB2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x1 DUP3 SUB PUSH2 0x9B4 JUMPI DUP1 PUSH1 0x6E SLOAD PUSH2 0x7DF SWAP2 SWAP1 PUSH2 0x209A JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x40 MLOAD PUSH3 0x7EEAC7 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH3 0xFDD58E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x82C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x850 SWAP2 SWAP1 PUSH2 0x20B1 JUMP JUMPDEST LT ISZERO PUSH2 0x89E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E74205061737320436172642062616C616E63650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x6E SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF5298ACA SWAP1 CALLER SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x8C6 SWAP1 DUP7 SWAP1 PUSH2 0x209A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x914 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x928 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x936 CALLER DUP3 PUSH2 0x1207 JUMP JUMPDEST POP PUSH1 0x70 SLOAD PUSH1 0x40 MLOAD PUSH4 0x731133E9 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x731133E9 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x998 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x6F SLOAD PUSH2 0x9C2 SWAP2 SWAP1 PUSH2 0x209A JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4C25E11F PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4C25E11F SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA2E SWAP2 SWAP1 PUSH2 0x20B1 JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x40 MLOAD PUSH3 0x7EEAC7 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH3 0xFDD58E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA9F SWAP2 SWAP1 PUSH2 0x20B1 JUMP JUMPDEST PUSH2 0xAA9 SWAP2 SWAP1 PUSH2 0x2087 JUMP JUMPDEST LT ISZERO PUSH2 0xAF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E74204856616C75652062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x6F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF5298ACA SWAP1 CALLER SWAP1 PUSH1 0x2 SWAP1 PUSH2 0xB1F SWAP1 DUP7 SWAP1 PUSH2 0x209A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0xB91 CALLER DUP4 PUSH2 0x1207 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC3F JUMPI PUSH1 0x73 SLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBB4 JUMPI PUSH2 0xBB4 PUSH2 0x20CA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO DUP1 ISZERO PUSH2 0xBE5 JUMPI POP PUSH1 0x74 SLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBDA JUMPI PUSH2 0xBDA PUSH2 0x20CA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO JUMPDEST ISZERO PUSH2 0xC2D JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x75 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 MLOAD DUP4 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xC0D JUMPI PUSH2 0xC0D PUSH2 0x20CA JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD SSTORE JUMPDEST DUP1 PUSH2 0xC37 DUP2 PUSH2 0x20E0 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB96 JUMP JUMPDEST POP PUSH1 0x70 SLOAD PUSH1 0x40 MLOAD PUSH4 0x731133E9 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x731133E9 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0xCDE JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xCF8 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCF8 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xD5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xD7E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0xDC5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x4861736850756E6B PUSH1 0xC0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x485 PUSH1 0xF4 SHL DUP2 MSTORE POP PUSH2 0xBB8 PUSH2 0x1452 JUMP JUMPDEST PUSH1 0x6E DUP3 SWAP1 SSTORE PUSH1 0x6F DUP4 SWAP1 SSTORE PUSH1 0x70 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE PUSH1 0x72 PUSH2 0xDF6 DUP7 DUP3 PUSH2 0x213F JUMP JUMPDEST POP PUSH1 0x71 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xE4F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE60 CALLER DUP3 PUSH2 0x1484 JUMP JUMPDEST PUSH2 0xE7C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x21FF JUMP JUMPDEST PUSH2 0x73C DUP4 DUP4 DUP4 PUSH2 0x1572 JUMP JUMPDEST PUSH1 0x71 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x6F SSTORE JUMP JUMPDEST PUSH2 0x73C DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x109A JUMP JUMPDEST PUSH1 0x72 DUP1 SLOAD PUSH2 0xEDE SWAP1 PUSH2 0x2037 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF0A SWAP1 PUSH2 0x2037 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF57 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF2C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF57 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF3A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xFCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x71 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1010 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x6E SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x66 DUP1 SLOAD PUSH2 0x516 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x71 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x104E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x72 PUSH2 0x105A DUP3 DUP3 PUSH2 0x213F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x105A CALLER DUP4 DUP4 PUSH2 0x170E JUMP JUMPDEST PUSH1 0x75 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1085 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x10A4 CALLER DUP4 PUSH2 0x1484 JUMP JUMPDEST PUSH2 0x10C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x21FF JUMP JUMPDEST PUSH2 0x10CC DUP5 DUP5 DUP5 DUP5 PUSH2 0x17DC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x75 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1132 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x111E JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x72 PUSH2 0x114B DUP4 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x115C SWAP3 SWAP2 SWAP1 PUSH2 0x2250 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x6A SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD SWAP2 MLOAD DUP6 SWAP5 SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP JUMP JUMPDEST PUSH1 0x60 CALLER ORIGIN EQ PUSH2 0x1250 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DBDB9D1C9858DD1CC818D85B9B9BDD081B5A5B9D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x12A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x1307 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231723A206E65656420746F206D696E74206174206C65617374206F PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x3732903A37B5B2B7 PUSH1 0xC1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST DUP2 PUSH1 0x68 SLOAD LT ISZERO PUSH2 0x136D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231723A206D696E74696E67206D6F726520746F6B656E7320746861 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E20617661696C61626C65 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x138B JUMPI PUSH2 0x138B PUSH2 0x1D45 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13B4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1416 JUMPI PUSH1 0x0 PUSH2 0x13CE DUP8 DUP6 PUSH2 0x193B JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x13E3 JUMPI PUSH2 0x13E3 PUSH2 0x20CA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x13F9 DUP8 DUP3 PUSH2 0x19CD JUMP JUMPDEST PUSH2 0x1402 DUP5 PUSH2 0x22D7 JUMP JUMPDEST SWAP4 POP POP DUP1 PUSH2 0x140F SWAP1 PUSH2 0x20E0 JUMP JUMPDEST SWAP1 POP PUSH2 0x13BA JUMP JUMPDEST POP PUSH1 0x68 DUP3 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP7 SWAP3 SWAP1 PUSH2 0x1444 SWAP1 DUP5 SWAP1 PUSH2 0x22EE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1479 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x2301 JUMP JUMPDEST PUSH2 0x73C DUP4 DUP4 DUP4 PUSH2 0x1A26 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1517 JUMPI POP PUSH1 0x1 PUSH2 0x501 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND DUP2 EQ DUP1 PUSH2 0x155A JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x154F DUP5 PUSH2 0x599 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x156A JUMPI POP PUSH2 0x156A DUP2 DUP6 PUSH2 0x1172 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ PUSH2 0x15E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x164B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48A JUMP JUMPDEST PUSH2 0x1656 PUSH1 0x0 DUP3 PUSH2 0x11A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x167F SWAP1 DUP5 SWAP1 PUSH2 0x2087 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x16AD SWAP1 DUP5 SWAP1 PUSH2 0x22EE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x176F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x17E7 DUP5 DUP5 DUP5 PUSH2 0x1572 JUMP JUMPDEST PUSH2 0x17F3 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1A73 JUMP JUMPDEST PUSH2 0x10CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x234C JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0x1836 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1860 JUMPI DUP1 PUSH2 0x184A DUP2 PUSH2 0x20E0 JUMP JUMPDEST SWAP2 POP PUSH2 0x1859 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x23B4 JUMP JUMPDEST SWAP2 POP PUSH2 0x183A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x187B JUMPI PUSH2 0x187B PUSH2 0x1D45 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x18A5 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 JUMPDEST DUP6 ISZERO PUSH2 0x1932 JUMPI PUSH2 0x18BB PUSH1 0x1 DUP3 PUSH2 0x2087 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18CA PUSH1 0xA DUP9 PUSH2 0x23B4 JUMP JUMPDEST PUSH2 0x18D5 SWAP1 PUSH1 0xA PUSH2 0x209A JUMP JUMPDEST PUSH2 0x18DF SWAP1 DUP9 PUSH2 0x2087 JUMP JUMPDEST PUSH2 0x18EA SWAP1 PUSH1 0x30 PUSH2 0x23C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xF8 SHL SWAP1 POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1907 JUMPI PUSH2 0x1907 PUSH2 0x20CA JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x1929 PUSH1 0xA DUP10 PUSH2 0x23B4 JUMP JUMPDEST SWAP8 POP POP POP PUSH2 0x18AA JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GASPRICE NUMBER TIMESTAMP DIFFICULTY PUSH2 0x194E PUSH1 0x1 DUP5 PUSH2 0x2087 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND PUSH1 0x20 DUP9 ADD MSTORE DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE BLOCKHASH PUSH1 0xC0 DUP3 ADD MSTORE ADDRESS PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP2 ADD DUP5 SWAP1 MSTORE PUSH2 0x120 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x19B8 DUP5 DUP4 PUSH2 0x23E1 JUMP JUMPDEST SWAP1 POP PUSH2 0x19C4 DUP2 DUP6 PUSH2 0x1B74 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x2301 JUMP JUMPDEST PUSH1 0x65 PUSH2 0x1A59 DUP5 DUP3 PUSH2 0x213F JUMP JUMPDEST POP PUSH1 0x66 PUSH2 0x1A66 DUP4 DUP3 PUSH2 0x213F JUMP JUMPDEST POP PUSH1 0x69 DUP2 SWAP1 SSTORE PUSH1 0x68 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1B69 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1AB7 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x23F5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1AF2 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1AEF SWAP2 DUP2 ADD SWAP1 PUSH2 0x2432 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1B4F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1B20 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1B47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48A SWAP1 PUSH2 0x234C JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x156A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 DUP2 DUP2 SUB PUSH2 0x1B92 JUMPI POP DUP4 PUSH2 0x1B95 JUMP JUMPDEST POP DUP1 JUMPDEST PUSH1 0x0 PUSH2 0x1BA2 PUSH1 0x1 DUP7 PUSH2 0x2087 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP7 DUP3 EQ PUSH2 0x1BEB JUMPI DUP1 PUSH1 0x0 SUB PUSH2 0x1BD9 JUMPI PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 SWAP1 SSTORE PUSH2 0x1BEB JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST DUP1 ISZERO PUSH2 0x1C01 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1C21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1C41 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1C21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1C41 DUP2 PUSH2 0x1C48 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C96 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C7E JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1CB7 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1C7B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1C41 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1C9F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1D15 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x1D76 JUMPI PUSH2 0x1D76 PUSH2 0x1D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1D9E JUMPI PUSH2 0x1D9E PUSH2 0x1D45 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x1DB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1DE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C41 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1D5B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1E07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E2A DUP8 DUP3 DUP9 ADD PUSH2 0x1DD1 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1E3B DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1E70 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1E80 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1EBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156A DUP5 DUP3 DUP6 ADD PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1ED9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1EE4 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1EF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1F1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1F25 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1F35 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x1F69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F78 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1D5B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1FBC JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1FA0 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1FE6 DUP2 PUSH2 0x1C0C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1EF9 DUP2 PUSH2 0x1C0C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x4861736850756E6B3A2063616C6C6572206973206E6F7420746865206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x204B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x206B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x501 JUMPI PUSH2 0x501 PUSH2 0x2071 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x501 JUMPI PUSH2 0x501 PUSH2 0x2071 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x20F2 JUMPI PUSH2 0x20F2 PUSH2 0x2071 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2120 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9AC JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x212C JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2159 JUMPI PUSH2 0x2159 PUSH2 0x1D45 JUMP JUMPDEST PUSH2 0x216D DUP2 PUSH2 0x2167 DUP5 SLOAD PUSH2 0x2037 JUMP JUMPDEST DUP5 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x21A2 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x218A JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x9AC JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x21D1 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x21B2 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x21EF JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD PUSH2 0x225E DUP2 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x2276 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x228B JUMPI PUSH2 0x22BA JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x22BA JUMP JUMPDEST DUP9 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x22B1 JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x2298 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP POP POP POP DUP4 MLOAD PUSH2 0x22CE DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1C7B JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x22E6 JUMPI PUSH2 0x22E6 PUSH2 0x2071 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x501 JUMPI PUSH2 0x501 PUSH2 0x2071 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x23C3 JUMPI PUSH2 0x23C3 PUSH2 0x239E JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0xFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0x501 JUMPI PUSH2 0x501 PUSH2 0x2071 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x23F0 JUMPI PUSH2 0x23F0 PUSH2 0x239E JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2428 SWAP1 DUP4 ADD DUP5 PUSH2 0x1C9F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2444 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C41 DUP2 PUSH2 0x1C48 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ DIV STATICCALL 0x24 0x2E DUP15 SSTORE CALLDATACOPY SSTORE 0xD8 0xF6 CREATE 0xFB PUSH13 0xF1B866A83F18800DBAC1C43EFA BYTE MOD 0x2E SWAP7 RETURNDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"125:3451:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2359:86;;;;;;:::i;:::-;;:::i;:::-;;2275:344:11;;;;;;:::i;:::-;;:::i;:::-;;;987:14:14;;980:22;962:41;;950:2;935:18;2275:344:11;;;;;;;;3469:98;;;:::i;:::-;;;;;;;:::i;4993:217::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2119:32:14;;;2101:51;;2089:2;2074:18;4993:217:11;1955:203:14;4519:413:11;;;;;;:::i;:::-;;:::i;1012:44:13:-;;;;;;;;;2638:25:14;;;2626:2;2611:18;1012:44:13;2492:177:14;2629:117:11;;;:::i;705:1012:12:-;;;;;;:::i;:::-;;:::i;189:356::-;;;;;;:::i;:::-;;:::i;5720:330:11:-;;;;;;:::i;:::-;;:::i;2275:78:12:-;;;;;;:::i;:::-;;:::i;6116:179:11:-;;;;;;:::i;:::-;;:::i;699:35:13:-;;733:1;699:35;;862:28;;;;;;967:39;;;:::i;3170:237:11:-;;;;;;:::i;:::-;3242:7;3277:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3277:16:11;;3170:237;2908:205;;;;;;:::i;:::-;;:::i;822:34:13:-;;;;;;740:35;;774:1;740:35;;2167:102:12;;;;;;:::i;:::-;;:::i;932:29:13:-;;;;;-1:-1:-1;;;;;932:29:13;;;896:30;;;;;-1:-1:-1;;;;;896:30:13;;;3631:102:11;;;:::i;1774:104:12:-;;;;;;:::i;:::-;;:::i;5277:153:11:-;;;;;;:::i;:::-;;:::i;1114:47:13:-;;;;;;:::i;:::-;;:::i;6361:320:11:-;;;;;;:::i;:::-;;:::i;3455:119:12:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1944:217::-;;;;;;:::i;:::-;;:::i;781:35:13:-;;815:1;781:35;;2756:93:11;2832:10;;2756:93;;5496:162;;;;;;:::i;:::-;;:::i;1062:46:13:-;;;;;;2359:86:12;617:5;;-1:-1:-1;;;;;617:5:12;603:10;:19;582:99;;;;-1:-1:-1;;;582:99:12;;;;;;;:::i;:::-;;;;;;;;;2422:6:::1;:16:::0;;-1:-1:-1;;;;;;2422:16:12::1;-1:-1:-1::0;;;;;2422:16:12;;;::::1;::::0;;;::::1;::::0;;2359:86::o;2275:344:11:-;2399:4;-1:-1:-1;;;;;;2434:51:11;;-1:-1:-1;;;2434:51:11;;:126;;-1:-1:-1;;;;;;;2501:59:11;;-1:-1:-1;;;2501:59:11;2434:126;:178;;;-1:-1:-1;;;;;;;;;;1168:51:6;;;2576:36:11;2415:197;2275:344;-1:-1:-1;;2275:344:11:o;3469:98::-;3523:13;3555:5;3548:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3469:98;:::o;4993:217::-;5069:7;8241:16;;;:7;:16;;;;;;-1:-1:-1;;;;;8241:16:11;5088:73;;;;-1:-1:-1;;;5088:73:11;;9107:2:14;5088:73:11;;;9089:21:14;9146:2;9126:18;;;9119:30;9185:34;9165:18;;;9158:62;-1:-1:-1;;;9236:18:14;;;9229:42;9288:19;;5088:73:11;8905:408:14;5088:73:11;-1:-1:-1;5179:24:11;;;;:15;:24;;;;;;-1:-1:-1;;;;;5179:24:11;;4993:217::o;4519:413::-;4599:13;3277:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3277:16:11;;;;4668:11;;;;;4660:57;;;;-1:-1:-1;;;4660:57:11;;9520:2:14;4660:57:11;;;9502:21:14;9559:2;9539:18;;;9532:30;9598:34;9578:18;;;9571:62;-1:-1:-1;;;9649:18:14;;;9642:31;9690:19;;4660:57:11;9318:397:14;4660:57:11;929:10:5;-1:-1:-1;;;;;4749:21:11;;;;:62;;-1:-1:-1;4774:37:11;4791:5;929:10:5;5496:162:11;:::i;4774:37::-;4728:165;;;;-1:-1:-1;;;4728:165:11;;9922:2:14;4728:165:11;;;9904:21:14;9961:2;9941:18;;;9934:30;10000:34;9980:18;;;9973:62;10071:26;10051:18;;;10044:54;10115:19;;4728:165:11;9720:420:14;4728:165:11;4904:21;4913:2;4917:7;4904:8;:21::i;:::-;4589:343;4519:413;;:::o;2629:117::-;2681:7;2720:19;;2707:10;;:32;;;;:::i;:::-;2700:39;;2629:117;:::o;705:1012:12:-;772:9;785:10;772:23;764:36;;;;-1:-1:-1;;;764:36:12;;10612:2:14;764:36:12;;;10594:21:14;-1:-1:-1;10631:18:14;;;10624:29;10670:18;;764:36:12;10410:284:14;764:36:12;733:1:13;818:2:12;:12;:28;;;;774:1:13;834:2:12;:12;818:28;810:51;;;;-1:-1:-1;;;810:51:12;;10901:2:14;810:51:12;;;10883:21:14;10940:2;10920:18;;;10913:30;-1:-1:-1;;;10959:18:14;;;10952:40;11009:18;;810:51:12;10699:334:14;810:51:12;733:1:13;875:2:12;:12;871:329;;964:6;951:10;;:19;;;;:::i;:::-;911:6;;:36;;-1:-1:-1;;;911:36:12;;928:10;911:36;;;11385:51:14;911:6:12;11452:18:14;;;11445:34;-1:-1:-1;;;;;911:6:12;;;;:16;;11358:18:14;;911:36:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:59;;903:102;;;;-1:-1:-1;;;903:102:12;;11881:2:14;903:102:12;;;11863:21:14;11920:2;11900:18;;;11893:30;11959:32;11939:18;;;11932:60;12009:18;;903:102:12;11679:354:14;903:102:12;1019:6;;1051:10;;-1:-1:-1;;;;;1019:6:12;;;;:11;;1031:10;;1019:6;;1051:19;;1064:6;;1051:19;:::i;:::-;1019:52;;-1:-1:-1;;;;;;1019:52:12;;;;;;;-1:-1:-1;;;;;12258:32:14;;;1019:52:12;;;12240:51:14;12307:18;;;12300:34;;;;12350:18;;;12343:34;12213:18;;1019:52:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1085:31;1097:10;1109:6;1085:11;:31::i;:::-;-1:-1:-1;1130:6:12;;:39;;-1:-1:-1;;;1130:39:12;;1142:10;1130:39;;;12663:51:14;815:1:13;12730:18:14;;;12723:34;1130:6:12;12773:18:14;;;12766:34;12836:3;12816:18;;;12809:31;-1:-1:-1;12856:19:14;;;12849:30;-1:-1:-1;;;;;1130:6:12;;;;:11;;12896:19:14;;1130:39:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;705:1012;;:::o;871:329::-;1298:6;1291:4;;:13;;;;:::i;:::-;1256:6;;:31;;-1:-1:-1;;;1256:31:12;;1276:10;1256:31;;;2101:51:14;-1:-1:-1;;;;;1256:6:12;;;;:19;;2074:18:14;;1256:31:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1217:6;;:36;;-1:-1:-1;;;1217:36:12;;1234:10;1217:36;;;11385:51:14;774:1:13;11452:18:14;;;11445:34;-1:-1:-1;;;;;1217:6:12;;;;:16;;11358:18:14;;1217:36:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:70;;;;:::i;:::-;:87;;1209:127;;;;-1:-1:-1;;;1209:127:12;;13128:2:14;1209:127:12;;;13110:21:14;13167:2;13147:18;;;13140:30;13206:29;13186:18;;;13179:57;13253:18;;1209:127:12;12926:351:14;1209:127:12;1346:6;;1378:4;;-1:-1:-1;;;;;1346:6:12;;;;:11;;1358:10;;774:1:13;;1378:13:12;;1385:6;;1378:13;:::i;:::-;1346:46;;-1:-1:-1;;;;;;1346:46:12;;;;;;;-1:-1:-1;;;;;12258:32:14;;;1346:46:12;;;12240:51:14;12307:18;;;12300:34;;;;12350:18;;;12343:34;12213:18;;1346:46:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1402:22;1427:31;1439:10;1451:6;1427:11;:31::i;:::-;1402:56;;1472:6;1468:194;1488:8;:15;1484:1;:19;1468:194;;;1540:10;;1527:8;1536:1;1527:11;;;;;;;;:::i;:::-;;;;;;;:23;;:48;;;;;1567:8;;1554;1563:1;1554:11;;;;;;;;:::i;:::-;;;;;;;:21;;1527:48;1524:128;;;1608:10;1594:25;;;;:13;:25;;;;;1625:11;;:8;;1634:1;;1625:11;;;;;;:::i;:::-;;;;;;;;;;;;1594:43;;;;;;;-1:-1:-1;1594:43:12;;;;;;;;;1524:128;1505:3;;;;:::i;:::-;;;;1468:194;;;-1:-1:-1;1671:6:12;;:39;;-1:-1:-1;;;1671:39:12;;1683:10;1671:39;;;12663:51:14;815:1:13;12730:18:14;;;12723:34;1671:6:12;12773:18:14;;;12766:34;12836:3;12816:18;;;12809:31;-1:-1:-1;12856:19:14;;;12849:30;-1:-1:-1;;;;;1671:6:12;;;;:11;;12896:19:14;;1671:39:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;754:963;705:1012;;:::o;189:356::-;3268:19:0;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:0;;3369:1;3354:12;;;;:16;3336:34;3335:108;;;-1:-1:-1;3415:4:0;1476:19:4;:23;;;3376:66:0;;-1:-1:-1;3425:12:0;;;;;:17;3376:66;3314:201;;;;-1:-1:-1;;;3314:201:0;;13756:2:14;3314:201:0;;;13738:21:14;13795:2;13775:18;;;13768:30;13834:34;13814:18;;;13807:62;-1:-1:-1;;;13885:18:14;;;13878:44;13939:19;;3314:201:0;13554:410:14;3314:201:0;3525:12;:16;;-1:-1:-1;;3525:16:0;3540:1;3525:16;;;3551:65;;;;3585:13;:20;;-1:-1:-1;;3585:20:0;;;;;3551:65;349:38:12::1;;;;;;;;;;;;;;-1:-1:-1::0;;;349:38:12::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;349:38:12::1;;::::0;382:4:::1;349:14;:38::i;:::-;397:10;:24:::0;;;431:4:::1;:12:::0;;;453:6:::1;:25:::0;;-1:-1:-1;;;;;;453:25:12::1;-1:-1:-1::0;;;;;453:25:12;::::1;;::::0;;488:15:::1;:22;506:4:::0;488:15;:22:::1;:::i;:::-;-1:-1:-1::0;520:5:12::1;:18:::0;;-1:-1:-1;;;;;;520:18:12::1;528:10;520:18;::::0;;3636:99:0;;;;3686:5;3670:21;;-1:-1:-1;;3670:21:0;;;3710:14;;-1:-1:-1;16325:36:14;;3710:14:0;;16313:2:14;16298:18;3710:14:0;;;;;;;3636:99;3258:483;189:356:12;;;;:::o;5720:330:11:-;5909:41;929:10:5;5942:7:11;5909:18;:41::i;:::-;5901:103;;;;-1:-1:-1;;;5901:103:11;;;;;;;:::i;:::-;6015:28;6025:4;6031:2;6035:7;6015:9;:28::i;2275:78:12:-;617:5;;-1:-1:-1;;;;;617:5:12;603:10;:19;582:99;;;;-1:-1:-1;;;582:99:12;;;;;;;:::i;:::-;2334:4:::1;:12:::0;2275:78::o;6116:179:11:-;6249:39;6266:4;6272:2;6276:7;6249:39;;;;;;;;;;;;:16;:39::i;967::13:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2908:205:11:-;2980:7;-1:-1:-1;;;;;3007:19:11;;2999:74;;;;-1:-1:-1;;;2999:74:11;;16992:2:14;2999:74:11;;;16974:21:14;17031:2;17011:18;;;17004:30;17070:34;17050:18;;;17043:62;-1:-1:-1;;;17121:18:14;;;17114:40;17171:19;;2999:74:11;16790:406:14;2999:74:11;-1:-1:-1;;;;;;3090:16:11;;;;;:9;:16;;;;;;;2908:205::o;2167:102:12:-;617:5;;-1:-1:-1;;;;;617:5:12;603:10;:19;582:99;;;;-1:-1:-1;;;582:99:12;;;;;;;:::i;:::-;2238:10:::1;:24:::0;2167:102::o;3631::11:-;3687:13;3719:7;3712:14;;;;;:::i;1774:104:12:-;617:5;;-1:-1:-1;;;;;617:5:12;603:10;:19;582:99;;;;-1:-1:-1;;;582:99:12;;;;;;;:::i;:::-;1846:15:::1;:25;1864:7:::0;1846:15;:25:::1;:::i;:::-;;1774:104:::0;:::o;5277:153:11:-;5371:52;929:10:5;5404:8:11;5414;5371:18;:52::i;1114:47:13:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6361:320:11:-;6530:41;929:10:5;6563:7:11;6530:18;:41::i;:::-;6522:103;;;;-1:-1:-1;;;6522:103:11;;;;;;;:::i;:::-;6635:39;6649:4;6655:2;6659:7;6668:5;6635:13;:39::i;:::-;6361:320;;;;:::o;3455:119:12:-;-1:-1:-1;;;;;3548:19:12;;;;;;:13;:19;;;;;;;;;3541:26;;;;;;;;;;;;;;;;;3516:13;;3541:26;;;3548:19;3541:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3455:119;;;:::o;1944:217::-;2057:13;2117:15;2134:18;2144:7;2134:9;:18::i;:::-;2100:53;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2086:68;;1944:217;;;:::o;5496:162:11:-;-1:-1:-1;;;;;5616:25:11;;;5593:4;5616:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;5496:162::o;14183:183::-;14257:24;;;;:15;:24;;;;;;;;:29;;-1:-1:-1;;;;;;14257:29:11;-1:-1:-1;;;;;14257:29:11;;;;;;;;;3277:7;:16;;;;;;;14301:58;;14257:24;;3277:16;;;;;14301:58;;;14183:183;;:::o;9100:1076::-;9175:13;929:10:5;9223:9:11;9207:25;9199:59;;;;-1:-1:-1;;;9199:59:11;;18428:2:14;9199:59:11;;;18410:21:14;18467:2;18447:18;;;18440:30;-1:-1:-1;;;18486:18:14;;;18479:51;18547:18;;9199:59:11;18226:345:14;9199:59:11;-1:-1:-1;;;;;9276:16:11;;9268:61;;;;-1:-1:-1;;;9268:61:11;;18778:2:14;9268:61:11;;;18760:21:14;;;18797:18;;;18790:30;18856:34;18836:18;;;18829:62;18908:18;;9268:61:11;18576:356:14;9268:61:11;9360:1;9347:10;:14;9339:67;;;;-1:-1:-1;;;9339:67:11;;19139:2:14;9339:67:11;;;19121:21:14;19178:2;19158:18;;;19151:30;19217:34;19197:18;;;19190:62;-1:-1:-1;;;19268:18:14;;;19261:38;19316:19;;9339:67:11;18937:404:14;9339:67:11;9557:10;9534:19;;:33;;9526:89;;;;-1:-1:-1;;;9526:89:11;;19548:2:14;9526:89:11;;;19530:21:14;19587:2;19567:18;;;19560:30;19626:34;19606:18;;;19599:62;-1:-1:-1;;;19677:18:14;;;19670:41;19728:19;;9526:89:11;19346:407:14;9526:89:11;9667:19;;9634:30;9727:10;9716:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9716:22:11;;9696:42;;9753:9;9748:299;9768:10;9764:1;:14;9748:299;;;9824:15;9842:56;9868:2;9872:25;9842;:56::i;:::-;9824:74;;9921:7;9912:3;9916:1;9912:6;;;;;;;;:::i;:::-;;;;;;:16;;;;;9942:40;9970:2;9974:7;9942:27;:40::i;:::-;10009:27;;;:::i;:::-;;;9785:262;9780:3;;;;:::i;:::-;;;9748:299;;;-1:-1:-1;10065:19:11;:47;;;-1:-1:-1;;;;;10122:13:11;;;;;;:9;:13;;;;;:27;;10139:10;;10122:13;:27;;10139:10;;10122:27;:::i;:::-;;;;-1:-1:-1;10166:3:11;;9100:1076;-1:-1:-1;;;;;9100:1076:11:o;1769:180::-;5363:13:0;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:0;;;;;;;:::i;:::-;1890:52:11::1;1915:5;1922:7;1931:10;1890:24;:52::i;3013:436:12:-:0;3107:4;8241:16:11;;;:7;:16;;;;;;-1:-1:-1;;;;;8241:16:11;3123:73:12;;;;-1:-1:-1;;;3123:73:12;;20643:2:14;3123:73:12;;;20625:21:14;20682:2;20662:18;;;20655:30;20721:34;20701:18;;;20694:62;-1:-1:-1;;;20772:18:14;;;20765:42;20824:19;;3123:73:12;20441:408:14;3123:73:12;3231:6;;-1:-1:-1;;;;;3231:6:12;3209:10;:29;3206:70;;-1:-1:-1;3261:4:12;3254:11;;3206:70;3285:13;3277:16:11;;;:7;:16;;;;;;-1:-1:-1;;;;;3277:16:11;;;;3354::12;;;;;:51;;;3398:7;-1:-1:-1;;;;;3374:31:12;:20;3386:7;3374:11;:20::i;:::-;-1:-1:-1;;;;;3374:31:12;;3354:51;:87;;;;3409:32;3426:5;3433:7;3409:16;:32::i;:::-;3346:96;3013:436;-1:-1:-1;;;;3013:436:12:o;13455:617:11:-;3242:7;3277:16;;;:7;:16;;;;;;-1:-1:-1;;;;;13582:43:11;;;3277:16;;13582:43;13574:93;;;;-1:-1:-1;;;13574:93:11;;21056:2:14;13574:93:11;;;21038:21:14;21095:2;21075:18;;;21068:30;21134:34;21114:18;;;21107:62;-1:-1:-1;;;21185:18:14;;;21178:35;21230:19;;13574:93:11;20854:401:14;13574:93:11;-1:-1:-1;;;;;13685:16:11;;13677:65;;;;-1:-1:-1;;;13677:65:11;;21462:2:14;13677:65:11;;;21444:21:14;21501:2;21481:18;;;21474:30;21540:34;21520:18;;;21513:62;-1:-1:-1;;;21591:18:14;;;21584:34;21635:19;;13677:65:11;21260:400:14;13677:65:11;13854:29;13871:1;13875:7;13854:8;:29::i;:::-;-1:-1:-1;;;;;13894:15:11;;;;;;:9;:15;;;;;:20;;13913:1;;13894:15;:20;;13913:1;;13894:20;:::i;:::-;;;;-1:-1:-1;;;;;;;13924:13:11;;;;;;:9;:13;;;;;:18;;13941:1;;13924:13;:18;;13941:1;;13924:18;:::i;:::-;;;;-1:-1:-1;;13952:16:11;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;13952:21:11;-1:-1:-1;;;;;13952:21:11;;;;;;;;;13989:27;;13952:16;;13989:27;;;;;;;4589:343;4519:413;;:::o;14501:307::-;14651:8;-1:-1:-1;;;;;14642:17:11;:5;-1:-1:-1;;;;;14642:17:11;;14634:55;;;;-1:-1:-1;;;14634:55:11;;21867:2:14;14634:55:11;;;21849:21:14;21906:2;21886:18;;;21879:30;21945:27;21925:18;;;21918:55;21990:18;;14634:55:11;21665:349:14;14634:55:11;-1:-1:-1;;;;;14699:25:11;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;14699:46:11;;;;;;;;;;14760:41;;962::14;;;14760::11;;935:18:14;14760:41:11;;;;;;;14501:307;;;:::o;7543:::-;7694:28;7704:4;7710:2;7714:7;7694:9;:28::i;:::-;7740:48;7763:4;7769:2;7773:7;7782:5;7740:22;:48::i;:::-;7732:111;;;;-1:-1:-1;;;7732:111:11;;;;;;;:::i;2451:556:12:-;2505:13;2534:2;2540:1;2534:7;2530:48;;-1:-1:-1;;2557:10:12;;;;;;;;;;;;-1:-1:-1;;;2557:10:12;;;;;2451:556::o;2530:48::-;2599:2;2587:9;2632:66;2639:6;;2632:66;;2661:5;;;;:::i;:::-;;-1:-1:-1;2680:7:12;;-1:-1:-1;2685:2:12;2680:7;;:::i;:::-;;;2632:66;;;2707:17;2737:3;2727:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2727:14:12;-1:-1:-1;2707:34:12;-1:-1:-1;2763:3:12;2776:196;2783:7;;2776:196;;2810:5;2814:1;2810;:5;:::i;:::-;2806:9;-1:-1:-1;2829:10:12;2860:7;2865:2;2860;:7;:::i;:::-;2859:14;;2871:2;2859:14;:::i;:::-;2854:19;;:2;:19;:::i;:::-;2843:31;;:2;:31;:::i;:::-;2829:46;;2889:9;2908:4;2901:12;;2889:24;;2937:2;2927:4;2932:1;2927:7;;;;;;;;:::i;:::-;;;;:12;-1:-1:-1;;;;;2927:12:12;;;;;;;;-1:-1:-1;2953:8:12;2959:2;2953:8;;:::i;:::-;;;2792:180;;2776:196;;;-1:-1:-1;2995:4:12;2451:556;-1:-1:-1;;;;2451:556:12:o;10190:710:11:-;10303:7;;10426:2;10450:11;10483:12;10517:15;10554:16;10602;10617:1;10483:12;10602:16;:::i;:::-;10394:325;;;-1:-1:-1;;;;;23247:15:14;;;10394:325:11;;;23229:34:14;23279:18;;23272:34;;;;23322:18;;;23315:34;;;;23365:18;;;23358:34;23408:19;;;23401:35;10592:27:11;23452:19:14;;;23445:35;10649:4:11;23496:19:14;;;23489:44;23549:19;;;23542:35;;;23163:19;;10394:325:11;;;-1:-1:-1;;10394:325:11;;;;;;;;;10367:366;;10394:325;10367:366;;;;;-1:-1:-1;10346:397:11;10775:37;10787:25;10367:366;10775:37;:::i;:::-;10753:59;;10829:64;10854:11;10867:25;10829:24;:64::i;:::-;10822:71;10190:710;-1:-1:-1;;;;;10190:710:11:o;8798:296::-;8946:16;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;8946:21:11;-1:-1:-1;;;;;8946:21:11;;;;;;;;8991:33;;8946:16;;;8991:33;;8946:16;;8991:33;1846:25:12::1;1774:104:::0;:::o;1955:253:11:-;5363:13:0;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:0;;;;;;;:::i;:::-;2086:5:11::1;:13;2094:5:::0;2086;:13:::1;:::i;:::-;-1:-1:-1::0;2109:7:11::1;:17;2119:7:::0;2109;:17:::1;:::i;:::-;-1:-1:-1::0;2136:10:11::1;:23:::0;;;2169:19:::1;:32:::0;-1:-1:-1;;1955:253:11:o;15361:800::-;15511:4;-1:-1:-1;;;;;15531:13:11;;1476:19:4;:23;15527:628:11;;15566:83;;-1:-1:-1;;;15566:83:11;;-1:-1:-1;;;;;15566:47:11;;;;;:83;;929:10:5;;15628:4:11;;15634:7;;15643:5;;15566:83;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15566:83:11;;;;;;;;-1:-1:-1;;15566:83:11;;;;;;;;;;;;:::i;:::-;;;15562:541;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15827:6;:13;15844:1;15827:18;15823:266;;15869:60;;-1:-1:-1;;;15869:60:11;;;;;;;:::i;15823:266::-;16041:6;16035:13;16026:6;16022:2;16018:15;16011:38;15562:541;-1:-1:-1;;;;;;15699:62:11;-1:-1:-1;;;15699:62:11;;-1:-1:-1;15692:69:11;;15527:628;-1:-1:-1;16140:4:11;15361:800;;;;;;:::o;11015:1443::-;11135:7;11179:28;;;:16;:28;;;;;;11135:7;11245:15;;;11241:286;;-1:-1:-1;11356:10:11;11241:286;;;-1:-1:-1;11506:10:11;11241:286;11537:17;11557:29;11585:1;11557:25;:29;:::i;:::-;11596:22;11621:27;;;:16;:27;;;;;;11537:49;;-1:-1:-1;11662:23:11;;;11658:619;;11910:14;11928:1;11910:19;11906:361;;12024:28;;;;:16;:28;;;;;:40;;;11906:361;;;12207:28;;;;:16;:28;;;;;:45;;;11906:361;12290:19;;12286:134;;12382:27;;;;:16;:27;;;;;12375:34;12286:134;-1:-1:-1;12445:6:11;;11015:1443;-1:-1:-1;;;;;11015:1443:11:o;14:140:14:-;-1:-1:-1;;;;;98:31:14;;88:42;;78:70;;144:1;141;134:12;78:70;14:140;:::o;159:272::-;234:6;287:2;275:9;266:7;262:23;258:32;255:52;;;303:1;300;293:12;255:52;342:9;329:23;361:40;395:5;361:40;:::i;:::-;420:5;159:272;-1:-1:-1;;;159:272:14:o;436:131::-;-1:-1:-1;;;;;;510:32:14;;500:43;;490:71;;557:1;554;547:12;572:245;630:6;683:2;671:9;662:7;658:23;654:32;651:52;;;699:1;696;689:12;651:52;738:9;725:23;757:30;781:5;757:30;:::i;1014:250::-;1099:1;1109:113;1123:6;1120:1;1117:13;1109:113;;;1199:11;;;1193:18;1180:11;;;1173:39;1145:2;1138:10;1109:113;;;-1:-1:-1;;1256:1:14;1238:16;;1231:27;1014:250::o;1269:271::-;1311:3;1349:5;1343:12;1376:6;1371:3;1364:19;1392:76;1461:6;1454:4;1449:3;1445:14;1438:4;1431:5;1427:16;1392:76;:::i;:::-;1522:2;1501:15;-1:-1:-1;;1497:29:14;1488:39;;;;1529:4;1484:50;;1269:271;-1:-1:-1;;1269:271:14:o;1545:220::-;1694:2;1683:9;1676:21;1657:4;1714:45;1755:2;1744:9;1740:18;1732:6;1714:45;:::i;1770:180::-;1829:6;1882:2;1870:9;1861:7;1857:23;1853:32;1850:52;;;1898:1;1895;1888:12;1850:52;-1:-1:-1;1921:23:14;;1770:180;-1:-1:-1;1770:180:14:o;2163:324::-;2231:6;2239;2292:2;2280:9;2271:7;2267:23;2263:32;2260:52;;;2308:1;2305;2298:12;2260:52;2347:9;2334:23;2366:40;2400:5;2366:40;:::i;:::-;2425:5;2477:2;2462:18;;;;2449:32;;-1:-1:-1;;;2163:324:14:o;2674:248::-;2742:6;2750;2803:2;2791:9;2782:7;2778:23;2774:32;2771:52;;;2819:1;2816;2809:12;2771:52;-1:-1:-1;;2842:23:14;;;2912:2;2897:18;;;2884:32;;-1:-1:-1;2674:248:14:o;2927:127::-;2988:10;2983:3;2979:20;2976:1;2969:31;3019:4;3016:1;3009:15;3043:4;3040:1;3033:15;3059:632;3124:5;3154:18;3195:2;3187:6;3184:14;3181:40;;;3201:18;;:::i;:::-;3276:2;3270:9;3244:2;3330:15;;-1:-1:-1;;3326:24:14;;;3352:2;3322:33;3318:42;3306:55;;;3376:18;;;3396:22;;;3373:46;3370:72;;;3422:18;;:::i;:::-;3462:10;3458:2;3451:22;3491:6;3482:15;;3521:6;3513;3506:22;3561:3;3552:6;3547:3;3543:16;3540:25;3537:45;;;3578:1;3575;3568:12;3537:45;3628:6;3623:3;3616:4;3608:6;3604:17;3591:44;3683:1;3676:4;3667:6;3659;3655:19;3651:30;3644:41;;;;3059:632;;;;;:::o;3696:222::-;3739:5;3792:3;3785:4;3777:6;3773:17;3769:27;3759:55;;3810:1;3807;3800:12;3759:55;3832:80;3908:3;3899:6;3886:20;3879:4;3871:6;3867:17;3832:80;:::i;3923:603::-;4019:6;4027;4035;4043;4096:3;4084:9;4075:7;4071:23;4067:33;4064:53;;;4113:1;4110;4103:12;4064:53;4153:9;4140:23;4186:18;4178:6;4175:30;4172:50;;;4218:1;4215;4208:12;4172:50;4241;4283:7;4274:6;4263:9;4259:22;4241:50;:::i;:::-;4231:60;;;4341:2;4330:9;4326:18;4313:32;4354:40;4388:5;4354:40;:::i;:::-;3923:603;;4413:5;;-1:-1:-1;;;;4465:2:14;4450:18;;4437:32;;4516:2;4501:18;4488:32;;3923:603::o;4531:474::-;4608:6;4616;4624;4677:2;4665:9;4656:7;4652:23;4648:32;4645:52;;;4693:1;4690;4683:12;4645:52;4732:9;4719:23;4751:40;4785:5;4751:40;:::i;:::-;4810:5;-1:-1:-1;4867:2:14;4852:18;;4839:32;4880:42;4839:32;4880:42;:::i;:::-;4531:474;;4941:7;;-1:-1:-1;;;4995:2:14;4980:18;;;;4967:32;;4531:474::o;5495:322::-;5564:6;5617:2;5605:9;5596:7;5592:23;5588:32;5585:52;;;5633:1;5630;5623:12;5585:52;5673:9;5660:23;5706:18;5698:6;5695:30;5692:50;;;5738:1;5735;5728:12;5692:50;5761;5803:7;5794:6;5783:9;5779:22;5761:50;:::i;5822:425::-;5887:6;5895;5948:2;5936:9;5927:7;5923:23;5919:32;5916:52;;;5964:1;5961;5954:12;5916:52;6003:9;5990:23;6022:40;6056:5;6022:40;:::i;:::-;6081:5;-1:-1:-1;6138:2:14;6123:18;;6110:32;6180:15;;6173:23;6161:36;;6151:64;;6211:1;6208;6201:12;6151:64;6234:7;6224:17;;;5822:425;;;;;:::o;6252:813::-;6347:6;6355;6363;6371;6424:3;6412:9;6403:7;6399:23;6395:33;6392:53;;;6441:1;6438;6431:12;6392:53;6480:9;6467:23;6499:40;6533:5;6499:40;:::i;:::-;6558:5;-1:-1:-1;6615:2:14;6600:18;;6587:32;6628:42;6587:32;6628:42;:::i;:::-;6689:7;-1:-1:-1;6743:2:14;6728:18;;6715:32;;-1:-1:-1;6798:2:14;6783:18;;6770:32;6825:18;6814:30;;6811:50;;;6857:1;6854;6847:12;6811:50;6880:22;;6933:4;6925:13;;6921:27;-1:-1:-1;6911:55:14;;6962:1;6959;6952:12;6911:55;6985:74;7051:7;7046:2;7033:16;7028:2;7024;7020:11;6985:74;:::i;:::-;6975:84;;;6252:813;;;;;;;:::o;7070:632::-;7241:2;7293:21;;;7363:13;;7266:18;;;7385:22;;;7212:4;;7241:2;7464:15;;;;7438:2;7423:18;;;7212:4;7507:169;7521:6;7518:1;7515:13;7507:169;;;7582:13;;7570:26;;7651:15;;;;7616:12;;;;7543:1;7536:9;7507:169;;;-1:-1:-1;7693:3:14;;7070:632;-1:-1:-1;;;;;;7070:632:14:o;7707:406::-;7775:6;7783;7836:2;7824:9;7815:7;7811:23;7807:32;7804:52;;;7852:1;7849;7842:12;7804:52;7891:9;7878:23;7910:40;7944:5;7910:40;:::i;:::-;7969:5;-1:-1:-1;8026:2:14;8011:18;;7998:32;8039:42;7998:32;8039:42;:::i;8118:397::-;8320:2;8302:21;;;8359:2;8339:18;;;8332:30;8398:34;8393:2;8378:18;;8371:62;-1:-1:-1;;;8464:2:14;8449:18;;8442:31;8505:3;8490:19;;8118:397::o;8520:380::-;8599:1;8595:12;;;;8642;;;8663:61;;8717:4;8709:6;8705:17;8695:27;;8663:61;8770:2;8762:6;8759:14;8739:18;8736:38;8733:161;;8816:10;8811:3;8807:20;8804:1;8797:31;8851:4;8848:1;8841:15;8879:4;8876:1;8869:15;8733:161;;8520:380;;;:::o;10145:127::-;10206:10;10201:3;10197:20;10194:1;10187:31;10237:4;10234:1;10227:15;10261:4;10258:1;10251:15;10277:128;10344:9;;;10365:11;;;10362:37;;;10379:18;;:::i;11038:168::-;11111:9;;;11142;;11159:15;;;11153:22;;11139:37;11129:71;;11180:18;;:::i;11490:184::-;11560:6;11613:2;11601:9;11592:7;11588:23;11584:32;11581:52;;;11629:1;11626;11619:12;11581:52;-1:-1:-1;11652:16:14;;11490:184;-1:-1:-1;11490:184:14:o;13282:127::-;13343:10;13338:3;13334:20;13331:1;13324:31;13374:4;13371:1;13364:15;13398:4;13395:1;13388:15;13414:135;13453:3;13474:17;;;13471:43;;13494:18;;:::i;:::-;-1:-1:-1;13541:1:14;13530:13;;13414:135::o;14095:545::-;14197:2;14192:3;14189:11;14186:448;;;14233:1;14258:5;14254:2;14247:17;14303:4;14299:2;14289:19;14373:2;14361:10;14357:19;14354:1;14350:27;14344:4;14340:38;14409:4;14397:10;14394:20;14391:47;;;-1:-1:-1;14432:4:14;14391:47;14487:2;14482:3;14478:12;14475:1;14471:20;14465:4;14461:31;14451:41;;14542:82;14560:2;14553:5;14550:13;14542:82;;;14605:17;;;14586:1;14575:13;14542:82;;14816:1352;14942:3;14936:10;14969:18;14961:6;14958:30;14955:56;;;14991:18;;:::i;:::-;15020:97;15110:6;15070:38;15102:4;15096:11;15070:38;:::i;:::-;15064:4;15020:97;:::i;:::-;15172:4;;15236:2;15225:14;;15253:1;15248:663;;;;15955:1;15972:6;15969:89;;;-1:-1:-1;16024:19:14;;;16018:26;15969:89;-1:-1:-1;;14773:1:14;14769:11;;;14765:24;14761:29;14751:40;14797:1;14793:11;;;14748:57;16071:81;;15218:944;;15248:663;14042:1;14035:14;;;14079:4;14066:18;;-1:-1:-1;;15284:20:14;;;15402:236;15416:7;15413:1;15410:14;15402:236;;;15505:19;;;15499:26;15484:42;;15597:27;;;;15565:1;15553:14;;;;15432:19;;15402:236;;;15406:3;15666:6;15657:7;15654:19;15651:201;;;15727:19;;;15721:26;-1:-1:-1;;15810:1:14;15806:14;;;15822:3;15802:24;15798:37;15794:42;15779:58;15764:74;;15651:201;-1:-1:-1;;;;;15898:1:14;15882:14;;;15878:22;15865:36;;-1:-1:-1;14816:1352:14:o;16372:413::-;16574:2;16556:21;;;16613:2;16593:18;;;16586:30;16652:34;16647:2;16632:18;;16625:62;-1:-1:-1;;;16718:2:14;16703:18;;16696:47;16775:3;16760:19;;16372:413::o;17201:1020::-;17377:3;17406:1;17439:6;17433:13;17469:36;17495:9;17469:36;:::i;:::-;17524:1;17541:18;;;17568:133;;;;17715:1;17710:356;;;;17534:532;;17568:133;-1:-1:-1;;17601:24:14;;17589:37;;17674:14;;17667:22;17655:35;;17646:45;;;-1:-1:-1;17568:133:14;;17710:356;17741:6;17738:1;17731:17;17771:4;17816:2;17813:1;17803:16;17841:1;17855:165;17869:6;17866:1;17863:13;17855:165;;;17947:14;;17934:11;;;17927:35;17990:16;;;;17884:10;;17855:165;;;17859:3;;;18049:6;18044:3;18040:16;18033:23;;17534:532;;;;;18097:6;18091:13;18113:68;18172:8;18167:3;18160:4;18152:6;18148:17;18113:68;:::i;:::-;18197:18;;17201:1020;-1:-1:-1;;;;17201:1020:14:o;19758:136::-;19797:3;19825:5;19815:39;;19834:18;;:::i;:::-;-1:-1:-1;;;19870:18:14;;19758:136::o;19899:125::-;19964:9;;;19985:10;;;19982:36;;;19998:18;;:::i;20029:407::-;20231:2;20213:21;;;20270:2;20250:18;;;20243:30;20309:34;20304:2;20289:18;;20282:62;-1:-1:-1;;;20375:2:14;20360:18;;20353:41;20426:3;20411:19;;20029:407::o;22019:414::-;22221:2;22203:21;;;22260:2;22240:18;;;22233:30;22299:34;22294:2;22279:18;;22272:62;-1:-1:-1;;;22365:2:14;22350:18;;22343:48;22423:3;22408:19;;22019:414::o;22438:127::-;22499:10;22494:3;22490:20;22487:1;22480:31;22530:4;22527:1;22520:15;22554:4;22551:1;22544:15;22570:120;22610:1;22636;22626:35;;22641:18;;:::i;:::-;-1:-1:-1;22675:9:14;;22570:120::o;22695:148::-;22783:4;22762:12;;;22776;;;22758:31;;22801:13;;22798:39;;;22817:18;;:::i;23588:112::-;23620:1;23646;23636:35;;23651:18;;:::i;:::-;-1:-1:-1;23685:9:14;;23588:112::o;23705:489::-;-1:-1:-1;;;;;23974:15:14;;;23956:34;;24026:15;;24021:2;24006:18;;23999:43;24073:2;24058:18;;24051:34;;;24121:3;24116:2;24101:18;;24094:31;;;23899:4;;24142:46;;24168:19;;24160:6;24142:46;:::i;:::-;24134:54;23705:489;-1:-1:-1;;;;;;23705:489:14:o;24199:249::-;24268:6;24321:2;24309:9;24300:7;24296:23;24292:32;24289:52;;;24337:1;24334;24327:12;24289:52;24369:9;24363:16;24388:30;24412:5;24388:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1869800","executionCost":"46188","totalCost":"1915988"},"external":{"Hpoint()":"285","approve(address,uint256)":"33407","balanceOf(address)":"2629","base()":"2362","baseMetadataURI()":"infinite","getApproved(uint256)":"4805","getUserToRareIds(address)":"infinite","hValue()":"2404","initialize(string,address,uint256,uint256)":"infinite","isApprovedForAll(address,address)":"infinite","luckyEnd()":"2427","luckyStart()":"2363","maxSupply()":"2380","mint(uint256,uint256)":"infinite","name()":"infinite","owner()":"2382","ownerOf(uint256)":"2588","passId()":"240","passIdBase()":"2363","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26722","setBase(uint256)":"24554","setBaseUri(string)":"infinite","setHValue(address)":"26752","setPassIdBase(uint256)":"24576","supportsInterface(bytes4)":"579","symbol()":"infinite","tokenURI(uint256)":"infinite","totalSupply()":"4583","transferFrom(address,address,uint256)":"infinite","userToRareIds(address,uint256)":"4805","voucher()":"261"},"internal":{"_isApprovedOrOwner(address,uint256)":"infinite","_uint2str(uint256)":"infinite"}},"methodIdentifiers":{"Hpoint()":"83d18f7a","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","base()":"5001f3b5","baseMetadataURI()":"5b2bd79e","getApproved(uint256)":"081812fc","getUserToRareIds(address)":"bfc52443","hValue()":"9332c9a5","initialize(string,address,uint256,uint256)":"1e214f06","isApprovedForAll(address,address)":"e985e9c5","luckyEnd()":"f7e056ee","luckyStart()":"0e471525","maxSupply()":"d5abeb01","mint(uint256,uint256)":"1b2ef1ca","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","passId()":"444b7aaf","passIdBase()":"80893c17","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setBase(uint256)":"38e80f68","setBaseUri(string)":"a0bcfc7f","setHValue(address)":"0178f6b9","setPassIdBase(uint256)":"89be0ad1","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd","userToRareIds(address,uint256)":"a8a86457","voucher()":"cdda418c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Hpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserToRareIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hValue\",\"outputs\":[{\"internalType\":\"contract IHValue\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_hValue\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_passIdBase\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passIdBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"}],\"name\":\"setBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHValue\",\"name\":\"_hValue\",\"type\":\"address\"}],\"name\":\"setHValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_passIdBase\",\"type\":\"uint256\"}],\"name\":\"setPassIdBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToRareIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voucher\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setBaseUri(string)\":{\"notice\":\"Sets a new baseURI for NFT.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HashPunk.sol\":\"HashPunk\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ERC721rUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension. This does random batch minting.\\n */\\ncontract ERC721rUpgradeable is ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n    \\n    mapping(uint => uint) private _availableTokens;\\n    uint256 private _numAvailableTokens;\\n    uint256 private _maxSupply;\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721r_init(string memory name_, string memory symbol_, uint maxSupply_) internal onlyInitializing {\\n        __ERC721r_init_unchained(name_, symbol_, maxSupply_);\\n    }\\n\\n    function __ERC721r_init_unchained(string memory name_, string memory symbol_, uint maxSupply_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _maxSupply = maxSupply_;\\n        _numAvailableTokens = maxSupply_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n    \\n    function totalSupply() public view virtual returns (uint256) {\\n        return _maxSupply - _numAvailableTokens;\\n    }\\n    \\n    function maxSupply() public view virtual returns (uint256) {\\n        return _maxSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        //require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721rUpgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721rUpgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mintIdWithoutBalanceUpdate(address to, uint256 tokenId) private {\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n        \\n        _owners[tokenId] = to;\\n        \\n        emit Transfer(address(0), to, tokenId);\\n        \\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    function _mintRandom(address to, uint _numToMint) internal virtual returns(uint[] memory){\\n        require(_msgSender() == tx.origin, \\\"Contracts cannot mint\\\");\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(_numToMint > 0, \\\"ERC721r: need to mint at least one token\\\");\\n        \\n        // TODO: Probably don't need this as it will underflow and revert automatically in this case\\n        require(_numAvailableTokens >= _numToMint, \\\"ERC721r: minting more tokens than available\\\");\\n        \\n        uint updatedNumAvailableTokens = _numAvailableTokens;\\n        uint[] memory res = new uint[](_numToMint);\\n        for (uint256 i; i < _numToMint; ++i) { // Do this ++ unchecked?\\n            uint256 tokenId = getRandomAvailableTokenId(to, updatedNumAvailableTokens);\\n            res[i] = tokenId;\\n            _mintIdWithoutBalanceUpdate(to, tokenId);\\n            \\n            --updatedNumAvailableTokens;\\n        }\\n        \\n        _numAvailableTokens = updatedNumAvailableTokens;\\n        _balances[to] += _numToMint;\\n        return res;\\n    }\\n        \\n    function getRandomAvailableTokenId(address to, uint updatedNumAvailableTokens)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 randomNum = uint256(\\n            keccak256(\\n                abi.encode(\\n                    to,\\n                    tx.gasprice,\\n                    block.number,\\n                    block.timestamp,\\n                    block.difficulty,\\n                    blockhash(block.number - 1),\\n                    address(this),\\n                    updatedNumAvailableTokens\\n                )\\n            )\\n        );\\n        uint256 randomIndex = randomNum % updatedNumAvailableTokens;\\n        return getAvailableTokenAtIndex(randomIndex, updatedNumAvailableTokens);\\n    }\\n\\n    // Implements https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle. Code taken from CryptoPhunksV2\\n    function getAvailableTokenAtIndex(uint256 indexToUse, uint updatedNumAvailableTokens)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 valAtIndex = _availableTokens[indexToUse];\\n        uint256 result;\\n        if (valAtIndex == 0) {\\n            // This means the index itself is still an available token\\n            result = indexToUse;\\n        } else {\\n            // This means the index itself is not an available token, but the val at that index is.\\n            result = valAtIndex;\\n        }\\n\\n        uint256 lastIndex = updatedNumAvailableTokens - 1;\\n        uint256 lastValInArray = _availableTokens[lastIndex];\\n        if (indexToUse != lastIndex) {\\n            // Replace the value at indexToUse, now that it's been used.\\n            // Replace it with the data from the last index in the array, since we are going to decrease the array size afterwards.\\n            if (lastValInArray == 0) {\\n                // This means the index itself is still an available token\\n                _availableTokens[indexToUse] = lastIndex;\\n            } else {\\n                // This means the index itself is not an available token, but the val at that index is.\\n                _availableTokens[indexToUse] = lastValInArray;\\n            }\\n        }\\n        if (lastValInArray != 0) {\\n            // Gas refund courtsey of @dievardump\\n            delete _availableTokens[lastIndex];\\n        }\\n        \\n        return result;\\n    }\\n    \\n    // Not as good as minting a specific tokenId, but will behave the same at the start\\n    // allowing you to explicitly mint some tokens at launch.\\n    function _mintAtIndex(address to, uint index) internal virtual {\\n        require(_msgSender() == tx.origin, \\\"Contracts cannot mint\\\");\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(_numAvailableTokens >= 1, \\\"ERC721r: minting more tokens than available\\\");\\n        \\n        uint tokenId = getAvailableTokenAtIndex(index, _numAvailableTokens);\\n        --_numAvailableTokens;\\n        \\n        _mintIdWithoutBalanceUpdate(to, tokenId);\\n        \\n        _balances[to] += 1;\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721rUpgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721rUpgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\",\"keccak256\":\"0x358e921923f1cd2a0a986c13f03949f8e1d087b92fcbd169cb426099428d29e6\",\"license\":\"MIT\"},\"contracts/HashPunk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721rUpgradeable.sol\\\";\\nimport \\\"./HashPunkStorage.sol\\\";\\n\\ncontract HashPunk is ERC721rUpgradeable, HashPunkStorage {\\n\\n    function initialize(\\n        string memory _uri,\\n        address _hValue,\\n        uint256 _base,\\n        uint256 _passIdBase\\n    ) public initializer {\\n        __ERC721r_init(\\\"HashPunk\\\", \\\"HP\\\", 3000);\\n        passIdBase = _passIdBase;\\n        base = _base;\\n        hValue = IHValue(_hValue);\\n        baseMetadataURI = _uri;\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\\"HashPunk: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function mint(uint256 id, uint256 amount) public {\\n        require(tx.origin == msg.sender, \\\"\\\");\\n        require(id == passId || id == Hpoint, \\\"invalid id\\\");\\n        if (id == passId) {\\n            require(hValue.balanceOf(msg.sender, passId) >= passIdBase * amount, \\\"insufficient Pass Card balance\\\");\\n            hValue.burn(msg.sender, passId, passIdBase * amount);\\n            _mintRandom(msg.sender, amount);\\n            hValue.mint(msg.sender, voucher, 1, \\\"\\\");\\n            return;\\n        }\\n        require(hValue.balanceOf(msg.sender, Hpoint) - hValue.negtiveValue(msg.sender) >= base * amount, \\\"insufficient HValue balance\\\");\\n        hValue.burn(msg.sender, Hpoint, base * amount);\\n        uint[] memory tokenIds = _mintRandom(msg.sender, amount);\\n        for(uint i = 0; i < tokenIds.length; i++) {\\n            if(tokenIds[i]>=luckyStart && tokenIds[i]<=luckyEnd) {\\n               userToRareIds[msg.sender].push(tokenIds[i]);\\n            }\\n        }\\n        hValue.mint(msg.sender, voucher, 1, \\\"\\\");\\n    }\\n\\n    /**\\n     * Sets a new baseURI for NFT.\\n     */\\n    function setBaseUri(string memory baseUri) external onlyOwner {\\n        baseMetadataURI = baseUri;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(baseMetadataURI, _uint2str(tokenId)));\\n    }\\n\\n    function setPassIdBase(uint256 _passIdBase) public onlyOwner {\\n        passIdBase = _passIdBase;\\n    }\\n\\n    function setBase(uint256 _base) public onlyOwner {\\n        base = _base;\\n    }\\n\\n    function setHValue(IHValue _hValue) public onlyOwner {\\n        hValue = _hValue;\\n    }\\n\\n    function _uint2str(uint256 _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bStr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bStr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bStr);\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view override returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        if(msg.sender == address(hValue)) {\\n            return true;\\n        }\\n        address owner = ERC721rUpgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    function getUserToRareIds(address user) public view returns (uint[] memory) {\\n        return userToRareIds[user];\\n    }\\n}\\n\",\"keccak256\":\"0x6fe339e6d16cf6a664b968a517eef6e8c999f7578e7f82829b8527a80b8d2af5\",\"license\":\"MIT\"},\"contracts/HashPunkStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IHValue {\\n\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function negtiveValue(address _address) external view returns (uint256);\\n}\\n\\ncontract HashPunkStorage {\\n    uint256 public constant passId  = 1;\\n    uint256 public constant Hpoint  = 2;\\n    uint256 public constant voucher = 3;\\n    uint256 public          passIdBase;\\n    uint256 public          base;\\n    IHValue public          hValue;\\n    address public          owner;\\n    string  public          baseMetadataURI;\\n    uint256 public          luckyStart       = 1;\\n    uint256 public          luckyEnd         = 500;\\n    mapping(address => uint[]) public userToRareIds;\\n}\",\"keccak256\":\"0x8091645b99b505a32edda6171231c7720c2df8d64de86f74cde8706f232fdb49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6,"contract":"contracts/HashPunk.sol:HashPunk","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":9,"contract":"contracts/HashPunk.sol:HashPunk","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":654,"contract":"contracts/HashPunk.sol:HashPunk","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":698,"contract":"contracts/HashPunk.sol:HashPunk","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":2107,"contract":"contracts/HashPunk.sol:HashPunk","label":"_name","offset":0,"slot":"101","type":"t_string_storage"},{"astId":2109,"contract":"contracts/HashPunk.sol:HashPunk","label":"_symbol","offset":0,"slot":"102","type":"t_string_storage"},{"astId":2113,"contract":"contracts/HashPunk.sol:HashPunk","label":"_availableTokens","offset":0,"slot":"103","type":"t_mapping(t_uint256,t_uint256)"},{"astId":2115,"contract":"contracts/HashPunk.sol:HashPunk","label":"_numAvailableTokens","offset":0,"slot":"104","type":"t_uint256"},{"astId":2117,"contract":"contracts/HashPunk.sol:HashPunk","label":"_maxSupply","offset":0,"slot":"105","type":"t_uint256"},{"astId":2121,"contract":"contracts/HashPunk.sol:HashPunk","label":"_owners","offset":0,"slot":"106","type":"t_mapping(t_uint256,t_address)"},{"astId":2125,"contract":"contracts/HashPunk.sol:HashPunk","label":"_balances","offset":0,"slot":"107","type":"t_mapping(t_address,t_uint256)"},{"astId":2129,"contract":"contracts/HashPunk.sol:HashPunk","label":"_tokenApprovals","offset":0,"slot":"108","type":"t_mapping(t_uint256,t_address)"},{"astId":2135,"contract":"contracts/HashPunk.sol:HashPunk","label":"_operatorApprovals","offset":0,"slot":"109","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":3675,"contract":"contracts/HashPunk.sol:HashPunk","label":"passIdBase","offset":0,"slot":"110","type":"t_uint256"},{"astId":3677,"contract":"contracts/HashPunk.sol:HashPunk","label":"base","offset":0,"slot":"111","type":"t_uint256"},{"astId":3680,"contract":"contracts/HashPunk.sol:HashPunk","label":"hValue","offset":0,"slot":"112","type":"t_contract(IHValue)3664"},{"astId":3682,"contract":"contracts/HashPunk.sol:HashPunk","label":"owner","offset":0,"slot":"113","type":"t_address"},{"astId":3684,"contract":"contracts/HashPunk.sol:HashPunk","label":"baseMetadataURI","offset":0,"slot":"114","type":"t_string_storage"},{"astId":3687,"contract":"contracts/HashPunk.sol:HashPunk","label":"luckyStart","offset":0,"slot":"115","type":"t_uint256"},{"astId":3690,"contract":"contracts/HashPunk.sol:HashPunk","label":"luckyEnd","offset":0,"slot":"116","type":"t_uint256"},{"astId":3695,"contract":"contracts/HashPunk.sol:HashPunk","label":"userToRareIds","offset":0,"slot":"117","type":"t_mapping(t_address,t_array(t_uint256)dyn_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IHValue)3664":{"encoding":"inplace","label":"contract IHValue","numberOfBytes":"20"},"t_mapping(t_address,t_array(t_uint256)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256[])","numberOfBytes":"32","value":"t_array(t_uint256)dyn_storage"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"setBaseUri(string)":{"notice":"Sets a new baseURI for NFT."}},"version":1}}},"contracts/HashPunkStorage.sol":{"HashPunkStorage":{"abi":[{"inputs":[],"name":"Hpoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"base","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseMetadataURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"hValue","outputs":[{"internalType":"contract IHValue","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"luckyEnd","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"luckyStart","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"passId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"passIdBase","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"userToRareIds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"voucher","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405260016005556101f460065534801561001b57600080fd5b506103188061002b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806383d18f7a1161007157806383d18f7a146100f95780638da5cb5b146101015780639332c9a51461012c578063a8a864571461013f578063cdda418c14610152578063f7e056ee1461015a57600080fd5b80630e471525146100ae578063444b7aaf146100ca5780635001f3b5146100d25780635b2bd79e146100db57806380893c17146100f0575b600080fd5b6100b760055481565b6040519081526020015b60405180910390f35b6100b7600181565b6100b760015481565b6100e3610163565b6040516100c19190610222565b6100b760005481565b6100b7600281565b600354610114906001600160a01b031681565b6040516001600160a01b0390911681526020016100c1565b600254610114906001600160a01b031681565b6100b761014d366004610270565b6101f1565b6100b7600381565b6100b760065481565b60048054610170906102a8565b80601f016020809104026020016040519081016040528092919081815260200182805461019c906102a8565b80156101e95780601f106101be576101008083540402835291602001916101e9565b820191906000526020600020905b8154815290600101906020018083116101cc57829003601f168201915b505050505081565b6007602052816000526040600020818154811061020d57600080fd5b90600052602060002001600091509150505481565b600060208083528351808285015260005b8181101561024f57858101830151858201604001528201610233565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806040838503121561028357600080fd5b82356001600160a01b038116811461029a57600080fd5b946020939093013593505050565b600181811c908216806102bc57607f821691505b6020821081036102dc57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212208620cc1759f2c2e66ea3430d44553a29ba64895efb2329ab912f1200e97a935364736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0x5 SSTORE PUSH2 0x1F4 PUSH1 0x6 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x318 DUP1 PUSH2 0x2B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x83D18F7A GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x83D18F7A EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x9332C9A5 EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0xA8A86457 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0xCDDA418C EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0xF7E056EE EQ PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE471525 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x444B7AAF EQ PUSH2 0xCA JUMPI DUP1 PUSH4 0x5001F3B5 EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0x5B2BD79E EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0x80893C17 EQ PUSH2 0xF0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB7 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB7 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0xB7 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x163 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC1 SWAP2 SWAP1 PUSH2 0x222 JUMP JUMPDEST PUSH2 0xB7 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xB7 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x114 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x114 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xB7 PUSH2 0x14D CALLDATASIZE PUSH1 0x4 PUSH2 0x270 JUMP JUMPDEST PUSH2 0x1F1 JUMP JUMPDEST PUSH2 0xB7 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0xB7 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x170 SWAP1 PUSH2 0x2A8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x19C SWAP1 PUSH2 0x2A8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1E9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1BE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1E9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x24F JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x233 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2BC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2DC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 KECCAK256 0xCC OR MSIZE CALLCODE 0xC2 0xE6 PUSH15 0xA3430D44553A29BA64895EFB2329AB SWAP2 0x2F SLT STOP 0xE9 PUSH27 0x935364736F6C634300081100330000000000000000000000000000 ","sourceMap":"668:496:13:-:0;;;1055:1;1012:44;;1105:3;1062:46;;668:496;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@Hpoint_3670":{"entryPoint":null,"id":3670,"parameterSlots":0,"returnSlots":0},"@baseMetadataURI_3684":{"entryPoint":355,"id":3684,"parameterSlots":0,"returnSlots":0},"@base_3677":{"entryPoint":null,"id":3677,"parameterSlots":0,"returnSlots":0},"@hValue_3680":{"entryPoint":null,"id":3680,"parameterSlots":0,"returnSlots":0},"@luckyEnd_3690":{"entryPoint":null,"id":3690,"parameterSlots":0,"returnSlots":0},"@luckyStart_3687":{"entryPoint":null,"id":3687,"parameterSlots":0,"returnSlots":0},"@owner_3682":{"entryPoint":null,"id":3682,"parameterSlots":0,"returnSlots":0},"@passIdBase_3675":{"entryPoint":null,"id":3675,"parameterSlots":0,"returnSlots":0},"@passId_3667":{"entryPoint":null,"id":3667,"parameterSlots":0,"returnSlots":0},"@userToRareIds_3695":{"entryPoint":497,"id":3695,"parameterSlots":0,"returnSlots":0},"@voucher_3673":{"entryPoint":null,"id":3673,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":624,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IHValue_$3664__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":546,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":680,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1922:14","statements":[{"nodeType":"YulBlock","src":"6:3:14","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:14","statements":[{"nodeType":"YulAssignment","src":"125:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:14"},"nodeType":"YulFunctionCall","src":"133:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:14"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:14"},"nodeType":"YulFunctionCall","src":"160:25:14"},"nodeType":"YulExpressionStatement","src":"160:25:14"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:14","type":""}],"src":"14:177:14"},{"body":{"nodeType":"YulBlock","src":"317:427:14","statements":[{"nodeType":"YulVariableDeclaration","src":"327:12:14","value":{"kind":"number","nodeType":"YulLiteral","src":"337:2:14","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"331:2:14","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"355:9:14"},{"name":"_1","nodeType":"YulIdentifier","src":"366:2:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"348:6:14"},"nodeType":"YulFunctionCall","src":"348:21:14"},"nodeType":"YulExpressionStatement","src":"348:21:14"},{"nodeType":"YulVariableDeclaration","src":"378:27:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"398:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"392:5:14"},"nodeType":"YulFunctionCall","src":"392:13:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"382:6:14","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:14"},{"name":"_1","nodeType":"YulIdentifier","src":"436:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"421:3:14"},"nodeType":"YulFunctionCall","src":"421:18:14"},{"name":"length","nodeType":"YulIdentifier","src":"441:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"414:6:14"},"nodeType":"YulFunctionCall","src":"414:34:14"},"nodeType":"YulExpressionStatement","src":"414:34:14"},{"nodeType":"YulVariableDeclaration","src":"457:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"466:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"461:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"526:90:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"555:9:14"},{"name":"i","nodeType":"YulIdentifier","src":"566:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"551:3:14"},"nodeType":"YulFunctionCall","src":"551:17:14"},{"kind":"number","nodeType":"YulLiteral","src":"570:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"547:3:14"},"nodeType":"YulFunctionCall","src":"547:26:14"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"589:6:14"},{"name":"i","nodeType":"YulIdentifier","src":"597:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"585:3:14"},"nodeType":"YulFunctionCall","src":"585:14:14"},{"name":"_1","nodeType":"YulIdentifier","src":"601:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"581:3:14"},"nodeType":"YulFunctionCall","src":"581:23:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"575:5:14"},"nodeType":"YulFunctionCall","src":"575:30:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:14"},"nodeType":"YulFunctionCall","src":"540:66:14"},"nodeType":"YulExpressionStatement","src":"540:66:14"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"487:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"490:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"484:2:14"},"nodeType":"YulFunctionCall","src":"484:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"498:19:14","statements":[{"nodeType":"YulAssignment","src":"500:15:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"509:1:14"},{"name":"_1","nodeType":"YulIdentifier","src":"512:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"505:3:14"},"nodeType":"YulFunctionCall","src":"505:10:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"500:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"480:3:14","statements":[]},"src":"476:140:14"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"640:9:14"},{"name":"length","nodeType":"YulIdentifier","src":"651:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"636:3:14"},"nodeType":"YulFunctionCall","src":"636:22:14"},{"kind":"number","nodeType":"YulLiteral","src":"660:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"632:3:14"},"nodeType":"YulFunctionCall","src":"632:31:14"},{"kind":"number","nodeType":"YulLiteral","src":"665:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"625:6:14"},"nodeType":"YulFunctionCall","src":"625:42:14"},"nodeType":"YulExpressionStatement","src":"625:42:14"},{"nodeType":"YulAssignment","src":"676:62:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"692:9:14"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"711:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"719:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"707:3:14"},"nodeType":"YulFunctionCall","src":"707:15:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"728:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"724:3:14"},"nodeType":"YulFunctionCall","src":"724:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"703:3:14"},"nodeType":"YulFunctionCall","src":"703:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"688:3:14"},"nodeType":"YulFunctionCall","src":"688:45:14"},{"kind":"number","nodeType":"YulLiteral","src":"735:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"684:3:14"},"nodeType":"YulFunctionCall","src":"684:54:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"676:4:14"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"286:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"297:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"308:4:14","type":""}],"src":"196:548:14"},{"body":{"nodeType":"YulBlock","src":"850:102:14","statements":[{"nodeType":"YulAssignment","src":"860:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"872:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"883:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"868:3:14"},"nodeType":"YulFunctionCall","src":"868:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"860:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"902:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"917:6:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"933:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"938:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"929:3:14"},"nodeType":"YulFunctionCall","src":"929:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"942:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"925:3:14"},"nodeType":"YulFunctionCall","src":"925:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"913:3:14"},"nodeType":"YulFunctionCall","src":"913:32:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"895:6:14"},"nodeType":"YulFunctionCall","src":"895:51:14"},"nodeType":"YulExpressionStatement","src":"895:51:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"819:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"830:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"841:4:14","type":""}],"src":"749:203:14"},{"body":{"nodeType":"YulBlock","src":"1074:102:14","statements":[{"nodeType":"YulAssignment","src":"1084:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1096:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1107:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1092:3:14"},"nodeType":"YulFunctionCall","src":"1092:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1084:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1126:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1141:6:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1157:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1162:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1153:3:14"},"nodeType":"YulFunctionCall","src":"1153:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"1166:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1149:3:14"},"nodeType":"YulFunctionCall","src":"1149:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1137:3:14"},"nodeType":"YulFunctionCall","src":"1137:32:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1119:6:14"},"nodeType":"YulFunctionCall","src":"1119:51:14"},"nodeType":"YulExpressionStatement","src":"1119:51:14"}]},"name":"abi_encode_tuple_t_contract$_IHValue_$3664__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1043:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1054:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1065:4:14","type":""}],"src":"957:219:14"},{"body":{"nodeType":"YulBlock","src":"1268:267:14","statements":[{"body":{"nodeType":"YulBlock","src":"1314:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1323:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1326:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1316:6:14"},"nodeType":"YulFunctionCall","src":"1316:12:14"},"nodeType":"YulExpressionStatement","src":"1316:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1289:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"1298:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1285:3:14"},"nodeType":"YulFunctionCall","src":"1285:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"1310:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1281:3:14"},"nodeType":"YulFunctionCall","src":"1281:32:14"},"nodeType":"YulIf","src":"1278:52:14"},{"nodeType":"YulVariableDeclaration","src":"1339:36:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1365:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1352:12:14"},"nodeType":"YulFunctionCall","src":"1352:23:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1343:5:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"1438:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1447:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1450:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1440:6:14"},"nodeType":"YulFunctionCall","src":"1440:12:14"},"nodeType":"YulExpressionStatement","src":"1440:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1397:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1408:5:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1423:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1428:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1419:3:14"},"nodeType":"YulFunctionCall","src":"1419:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"1432:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1415:3:14"},"nodeType":"YulFunctionCall","src":"1415:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1404:3:14"},"nodeType":"YulFunctionCall","src":"1404:31:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1394:2:14"},"nodeType":"YulFunctionCall","src":"1394:42:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1387:6:14"},"nodeType":"YulFunctionCall","src":"1387:50:14"},"nodeType":"YulIf","src":"1384:70:14"},{"nodeType":"YulAssignment","src":"1463:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"1473:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1463:6:14"}]},{"nodeType":"YulAssignment","src":"1487:42:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1514:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1525:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1510:3:14"},"nodeType":"YulFunctionCall","src":"1510:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1497:12:14"},"nodeType":"YulFunctionCall","src":"1497:32:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1487:6:14"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1226:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1237:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1249:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1257:6:14","type":""}],"src":"1181:354:14"},{"body":{"nodeType":"YulBlock","src":"1595:325:14","statements":[{"nodeType":"YulAssignment","src":"1605:22:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1619:1:14","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1622:4:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1615:3:14"},"nodeType":"YulFunctionCall","src":"1615:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1605:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"1636:38:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1666:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"1672:1:14","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1662:3:14"},"nodeType":"YulFunctionCall","src":"1662:12:14"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1640:18:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"1713:31:14","statements":[{"nodeType":"YulAssignment","src":"1715:27:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1729:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"1737:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1725:3:14"},"nodeType":"YulFunctionCall","src":"1725:17:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1715:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1693:18:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1686:6:14"},"nodeType":"YulFunctionCall","src":"1686:26:14"},"nodeType":"YulIf","src":"1683:61:14"},{"body":{"nodeType":"YulBlock","src":"1803:111:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1824:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1831:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1836:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1827:3:14"},"nodeType":"YulFunctionCall","src":"1827:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1817:6:14"},"nodeType":"YulFunctionCall","src":"1817:31:14"},"nodeType":"YulExpressionStatement","src":"1817:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1868:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1871:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1861:6:14"},"nodeType":"YulFunctionCall","src":"1861:15:14"},"nodeType":"YulExpressionStatement","src":"1861:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1896:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1899:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1889:6:14"},"nodeType":"YulFunctionCall","src":"1889:15:14"},"nodeType":"YulExpressionStatement","src":"1889:15:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1759:18:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1782:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"1790:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1779:2:14"},"nodeType":"YulFunctionCall","src":"1779:14:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1756:2:14"},"nodeType":"YulFunctionCall","src":"1756:38:14"},"nodeType":"YulIf","src":"1753:161:14"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1575:4:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1584:6:14","type":""}],"src":"1540:380:14"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IHValue_$3664__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c806383d18f7a1161007157806383d18f7a146100f95780638da5cb5b146101015780639332c9a51461012c578063a8a864571461013f578063cdda418c14610152578063f7e056ee1461015a57600080fd5b80630e471525146100ae578063444b7aaf146100ca5780635001f3b5146100d25780635b2bd79e146100db57806380893c17146100f0575b600080fd5b6100b760055481565b6040519081526020015b60405180910390f35b6100b7600181565b6100b760015481565b6100e3610163565b6040516100c19190610222565b6100b760005481565b6100b7600281565b600354610114906001600160a01b031681565b6040516001600160a01b0390911681526020016100c1565b600254610114906001600160a01b031681565b6100b761014d366004610270565b6101f1565b6100b7600381565b6100b760065481565b60048054610170906102a8565b80601f016020809104026020016040519081016040528092919081815260200182805461019c906102a8565b80156101e95780601f106101be576101008083540402835291602001916101e9565b820191906000526020600020905b8154815290600101906020018083116101cc57829003601f168201915b505050505081565b6007602052816000526040600020818154811061020d57600080fd5b90600052602060002001600091509150505481565b600060208083528351808285015260005b8181101561024f57858101830151858201604001528201610233565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806040838503121561028357600080fd5b82356001600160a01b038116811461029a57600080fd5b946020939093013593505050565b600181811c908216806102bc57607f821691505b6020821081036102dc57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212208620cc1759f2c2e66ea3430d44553a29ba64895efb2329ab912f1200e97a935364736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x83D18F7A GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x83D18F7A EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x9332C9A5 EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0xA8A86457 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0xCDDA418C EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0xF7E056EE EQ PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE471525 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x444B7AAF EQ PUSH2 0xCA JUMPI DUP1 PUSH4 0x5001F3B5 EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0x5B2BD79E EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0x80893C17 EQ PUSH2 0xF0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB7 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB7 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0xB7 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x163 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC1 SWAP2 SWAP1 PUSH2 0x222 JUMP JUMPDEST PUSH2 0xB7 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xB7 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x114 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x114 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xB7 PUSH2 0x14D CALLDATASIZE PUSH1 0x4 PUSH2 0x270 JUMP JUMPDEST PUSH2 0x1F1 JUMP JUMPDEST PUSH2 0xB7 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0xB7 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x170 SWAP1 PUSH2 0x2A8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x19C SWAP1 PUSH2 0x2A8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1E9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1BE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1E9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x24F JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x233 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2BC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2DC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 KECCAK256 0xCC OR MSIZE CALLCODE 0xC2 0xE6 PUSH15 0xA3430D44553A29BA64895EFB2329AB SWAP2 0x2F SLT STOP 0xE9 PUSH27 0x935364736F6C634300081100330000000000000000000000000000 ","sourceMap":"668:496:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1012:44;;;;;;;;;160:25:14;;;148:2;133:18;1012:44:13;;;;;;;;699:35;;733:1;699:35;;862:28;;;;;;967:39;;;:::i;:::-;;;;;;;:::i;822:34::-;;;;;;740:35;;774:1;740:35;;932:29;;;;;-1:-1:-1;;;;;932:29:13;;;;;;-1:-1:-1;;;;;913:32:14;;;895:51;;883:2;868:18;932:29:13;749:203:14;896:30:13;;;;;-1:-1:-1;;;;;896:30:13;;;1114:47;;;;;;:::i;:::-;;:::i;781:35::-;;815:1;781:35;;1062:46;;;;;;967:39;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1114:47::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;196:548:14:-;308:4;337:2;366;355:9;348:21;398:6;392:13;441:6;436:2;425:9;421:18;414:34;466:1;476:140;490:6;487:1;484:13;476:140;;;585:14;;;581:23;;575:30;551:17;;;570:2;547:26;540:66;505:10;;476:140;;;480:3;665:1;660:2;651:6;640:9;636:22;632:31;625:42;735:2;728;724:7;719:2;711:6;707:15;703:29;692:9;688:45;684:54;676:62;;;;196:548;;;;:::o;1181:354::-;1249:6;1257;1310:2;1298:9;1289:7;1285:23;1281:32;1278:52;;;1326:1;1323;1316:12;1278:52;1352:23;;-1:-1:-1;;;;;1404:31:14;;1394:42;;1384:70;;1450:1;1447;1440:12;1384:70;1473:5;1525:2;1510:18;;;;1497:32;;-1:-1:-1;;;1181:354:14:o;1540:380::-;1619:1;1615:12;;;;1662;;;1683:61;;1737:4;1729:6;1725:17;1715:27;;1683:61;1790:2;1782:6;1779:14;1759:18;1756:38;1753:161;;1836:10;1831:3;1827:20;1824:1;1817:31;1871:4;1868:1;1861:15;1899:4;1896:1;1889:15;1753:161;;1540:380;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"158400","executionCost":"44414","totalCost":"202814"},"external":{"Hpoint()":"184","base()":"2329","baseMetadataURI()":"infinite","hValue()":"2381","luckyEnd()":"2394","luckyStart()":"2285","owner()":"2359","passId()":"207","passIdBase()":"2373","userToRareIds(address,uint256)":"4764","voucher()":"272"}},"methodIdentifiers":{"Hpoint()":"83d18f7a","base()":"5001f3b5","baseMetadataURI()":"5b2bd79e","hValue()":"9332c9a5","luckyEnd()":"f7e056ee","luckyStart()":"0e471525","owner()":"8da5cb5b","passId()":"444b7aaf","passIdBase()":"80893c17","userToRareIds(address,uint256)":"a8a86457","voucher()":"cdda418c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Hpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hValue\",\"outputs\":[{\"internalType\":\"contract IHValue\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passIdBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToRareIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voucher\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HashPunkStorage.sol\":\"HashPunkStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/HashPunkStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IHValue {\\n\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function negtiveValue(address _address) external view returns (uint256);\\n}\\n\\ncontract HashPunkStorage {\\n    uint256 public constant passId  = 1;\\n    uint256 public constant Hpoint  = 2;\\n    uint256 public constant voucher = 3;\\n    uint256 public          passIdBase;\\n    uint256 public          base;\\n    IHValue public          hValue;\\n    address public          owner;\\n    string  public          baseMetadataURI;\\n    uint256 public          luckyStart       = 1;\\n    uint256 public          luckyEnd         = 500;\\n    mapping(address => uint[]) public userToRareIds;\\n}\",\"keccak256\":\"0x8091645b99b505a32edda6171231c7720c2df8d64de86f74cde8706f232fdb49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3675,"contract":"contracts/HashPunkStorage.sol:HashPunkStorage","label":"passIdBase","offset":0,"slot":"0","type":"t_uint256"},{"astId":3677,"contract":"contracts/HashPunkStorage.sol:HashPunkStorage","label":"base","offset":0,"slot":"1","type":"t_uint256"},{"astId":3680,"contract":"contracts/HashPunkStorage.sol:HashPunkStorage","label":"hValue","offset":0,"slot":"2","type":"t_contract(IHValue)3664"},{"astId":3682,"contract":"contracts/HashPunkStorage.sol:HashPunkStorage","label":"owner","offset":0,"slot":"3","type":"t_address"},{"astId":3684,"contract":"contracts/HashPunkStorage.sol:HashPunkStorage","label":"baseMetadataURI","offset":0,"slot":"4","type":"t_string_storage"},{"astId":3687,"contract":"contracts/HashPunkStorage.sol:HashPunkStorage","label":"luckyStart","offset":0,"slot":"5","type":"t_uint256"},{"astId":3690,"contract":"contracts/HashPunkStorage.sol:HashPunkStorage","label":"luckyEnd","offset":0,"slot":"6","type":"t_uint256"},{"astId":3695,"contract":"contracts/HashPunkStorage.sol:HashPunkStorage","label":"userToRareIds","offset":0,"slot":"7","type":"t_mapping(t_address,t_array(t_uint256)dyn_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_contract(IHValue)3664":{"encoding":"inplace","label":"contract IHValue","numberOfBytes":"20"},"t_mapping(t_address,t_array(t_uint256)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256[])","numberOfBytes":"32","value":"t_array(t_uint256)dyn_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"IHValue":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"negtiveValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","burn(address,uint256,uint256)":"f5298aca","mint(address,uint256,uint256,bytes)":"731133e9","negtiveValue(address)":"4c25e11f","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"negtiveValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HashPunkStorage.sol\":\"IHValue\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/HashPunkStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IHValue {\\n\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function negtiveValue(address _address) external view returns (uint256);\\n}\\n\\ncontract HashPunkStorage {\\n    uint256 public constant passId  = 1;\\n    uint256 public constant Hpoint  = 2;\\n    uint256 public constant voucher = 3;\\n    uint256 public          passIdBase;\\n    uint256 public          base;\\n    IHValue public          hValue;\\n    address public          owner;\\n    string  public          baseMetadataURI;\\n    uint256 public          luckyStart       = 1;\\n    uint256 public          luckyEnd         = 500;\\n    mapping(address => uint[]) public userToRareIds;\\n}\",\"keccak256\":\"0x8091645b99b505a32edda6171231c7720c2df8d64de86f74cde8706f232fdb49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}