{
  "address": "0x37CEA1DF2429ec7AB80d857A8224b046f61C6C78",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Hpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "from",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exchangeHValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "exchangeHoliday",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "exchangeTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashPunk",
      "outputs": [
        {
          "internalType": "contract IHashPunk",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isRare",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "luckyEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "luckyStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "negtiveValues",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "negtiveValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "passId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rareAddress",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetCurrentTimeStamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetExchangeTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHashPunk",
          "name": "_hashPunk",
          "type": "address"
        }
      ],
      "name": "setHashPunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voucher",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7117cb2484241ec5099a6da9629034b7bfb1420aa8679c8053730866fea804cf",
  "receipt": {
    "to": null,
    "from": "0x425A0CB30cE4a914B3fED2683f992F8B7C9e9214",
    "contractAddress": "0x37CEA1DF2429ec7AB80d857A8224b046f61C6C78",
    "transactionIndex": 35,
    "gasUsed": "2722488",
    "logsBloom": "0x
    "blockHash": "0xdfc99271ebf8f94e7b733134c2dd0671597704dd27f679ec1c514d585a882bbc",
    "transactionHash": "0x7117cb2484241ec5099a6da9629034b7bfb1420aa8679c8053730866fea804cf",
    "logs": [],
    "blockNumber": 8606592,
    "cumulativeGasUsed": "6432237",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "51a7afa3006e6feeded136f21ec8f0ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Hpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exchangeHValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchangeHoliday\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashPunk\",\"outputs\":[{\"internalType\":\"contract IHashPunk\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isRare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"negtiveValues\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"negtiveValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rareAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetCurrentTimeStamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetExchangeTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHashPunk\",\"name\":\"_hashPunk\",\"type\":\"address\"}],\"name\":\"setHashPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voucher\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HValue.sol\":\"HValue\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x6de308cde403f95519bf4b25123cbfe9126f2e0212564bb2ad3c23ac99f1a9cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bdbcbb9fcf42997f280db8c02070e9c561406e6971ff680c6c43f92065ac9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/HValue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./HValueStorage.sol\\\";\\n\\ncontract HValue is ERC1155SupplyUpgradeable, HValueStorage {\\n\\n    function initialize(\\n        string memory _uri\\n    ) public initializer {\\n        __ERC1155Supply_init();\\n        name = \\\"HValue\\\";\\n        symbol = \\\"HV\\\";\\n        setBaseUri(_uri);\\n        owner = msg.sender;\\n        currentTimeStamp = block.timestamp;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\\"HValue: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n    \\n    modifier onlyController() {\\n        require(\\n            msg.sender == controller,\\n            \\\"HValue: caller is not the controller\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNewYear() {\\n        require(\\n            block.timestamp >= currentTimeStamp + 365 days,\\n            \\\"HValue: not new year\\\"\\n        );\\n        _;\\n    }\\n\\n    function mintBatch(\\n        address[] memory to,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        uint256[] memory negtiveValues,\\n        bytes memory data\\n    ) public onlyOwner {\\n        for (uint256 i = 0; i < to.length; i++) {\\n            _mintBatch(to[i], tokenIds, amounts, data);\\n            negtiveValue[to[i]] = negtiveValues[i];\\n        }\\n    }\\n\\n    function burnBatch(\\n        address[] memory from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) public onlyOwner {\\n        for (uint256 i = 0; i < from.length; i++) {\\n            _burnBatch(from[i], ids, amounts);\\n        }\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data\\n    ) external onlyController {\\n        _mint(to, tokenId, amount, data);\\n    }\\n\\n    function burn(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external onlyController {\\n        _burn(from, tokenId, amount);\\n    }\\n\\n    function exchangeHoliday(\\n        uint256 amount\\n    ) external {\\n        require(exchangeTimes[msg.sender] <= exchangeLimit, \\\"exceed exchange limit\\\");\\n        require(balanceOf(msg.sender, voucher) >= amount, \\\"HValue: not enough voucher\\\");\\n        _burn(msg.sender, voucher, amount);\\n        exchangeTimes[msg.sender] += amount;\\n    }\\n\\n    function exchangeHValue(uint256 tokenId) public {\\n        require(\\n            hashPunk.ownerOf(tokenId) == msg.sender,\\n            \\\"HValue: not punk owner\\\"\\n        );\\n        require(\\n            tokenId >= luckyStart && tokenId <= luckyEnd,\\n            \\\"HValue: not lucky punk\\\"\\n        );\\n        _mint(msg.sender, Hpoint, 70, \\\"\\\");\\n        _burn(msg.sender, voucher, 1);\\n        hashPunk.transferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function resetExchangeTimes() public onlyNewYear{\\n        exchangeTimes[msg.sender] = 0;\\n    }\\n\\n    function resetCurrentTimeStamp() public onlyOwner{\\n        currentTimeStamp = block.timestamp;\\n    }\\n\\n    function setHashPunk(IHashPunk _hashPunk) public onlyOwner {\\n        hashPunk = _hashPunk;\\n    }\\n    \\n    function setBaseUri(string memory baseUri) public onlyOwner {\\n        baseMetadataURI = baseUri;\\n    }\\n\\n    function setController(address _controller) public onlyOwner {\\n        controller = _controller;\\n    }\\n    \\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        return string(abi.encodePacked(baseMetadataURI, _uint2str(tokenId)));\\n    }\\n\\n    function rareAddress() public view returns (address[] memory) {\\n        address[] memory res = new address[](luckyEnd - luckyStart + 1);\\n        for (uint i = luckyStart; i <= luckyEnd; i++) {\\n            res[i - 1] = hashPunk.ownerOf(i);\\n        }\\n        return res;\\n    }\\n\\n    function isRare(uint256 tokenId) public view returns (bool) {\\n        return tokenId >= luckyStart && tokenId <= luckyEnd;\\n    }\\n\\n    function _uint2str(uint256 _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bStr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bStr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bStr);\\n    }\\n}\\n\",\"keccak256\":\"0x2845a07bca653c5fa9eaf425a870c2ac8fd07280f027a05012caa0ca109fee85\",\"license\":\"MIT\"},\"contracts/HValueStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IHashPunk {\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\\ncontract HValueStorage {\\n    string    public          name;\\n    string    public          symbol;\\n    address   public          owner;\\n    address   public          controller;\\n    IHashPunk public          hashPunk;\\n    uint256   public          currentTimeStamp;\\n    string    public          baseMetadataURI;\\n    uint256   public          passId           = 1;\\n    uint256   public          Hpoint           = 2;\\n    uint256   public          voucher          = 3;\\n    uint256   public          luckyStart       = 1;\\n    uint256   public          luckyEnd         = 30;\\n    uint256   public          exchangeLimit    = 3;\\n\\n    mapping(address => uint256) public exchangeTimes;\\n    mapping(address => uint256) public negtiveValue;\\n}\",\"keccak256\":\"0x28a4b73361aeffe813ae738ea67034b051fc60512b9a4845503626249d614739\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160d055600260d155600360d255600160d355601e60d455600360d55534801561002e57600080fd5b50612dde8061003e6000396000f3fe608060405234801561001057600080fd5b506004361061023c5760003560e01c80638da5cb5b1161013b578063d717b05e116100b8578063f5298aca1161007c578063f5298aca14610517578063f62d18881461052a578063f77c47911461053d578063f7e056ee14610550578063f96b7bf91461055957600080fd5b8063d717b05e14610497578063e1012a89146104a0578063e985e9c5146104b3578063f11b1fdd146104ef578063f242432a1461050457600080fd5b8063a0bcfc7f116100ff578063a0bcfc7f14610435578063a22cb46514610448578063a5afb7e01461045b578063bd85b0391461046e578063cdda418c1461048e57600080fd5b80638da5cb5b146103c957806392eefe9b146103f457806395d89b41146104075780639642903f1461040f5780639ba138c81461042257600080fd5b8063444b7aaf116101c95780636be55bb41161018d5780636be55bb414610372578063731133e91461037a57806383d18f7a1461038d578063887be052146103965780638b0bb069146103a957600080fd5b8063444b7aaf146102ff5780634c25e11f146103085780634e1273f4146103285780634f558e79146103485780635b2bd79e1461036a57600080fd5b80630e89341c116102105780630e89341c146102a85780631fe09da3146102bb5780632a36c108146102ce5780632eb2c2d6146102e3578063340a9a1c146102f657600080fd5b8062fdd58e1461024157806301ffc9a71461026757806306fdde031461028a5780630e4715251461029f575b600080fd5b61025461024f366004611faa565b610561565b6040519081526020015b60405180910390f35b61027a610275366004611fec565b6105fc565b604051901515815260200161025e565b61029261064c565b60405161025e9190612060565b61025460d35481565b6102926102b6366004612073565b6106da565b61027a6102c9366004612073565b61070e565b6102e16102dc3660046121d1565b610726565b005b6102e16102f13660046122d5565b610798565b61025460ce5481565b61025460d05481565b610254610316366004612382565b60d76020526000908152604090205481565b61033b61033636600461239f565b6107e4565b60405161025e919061243d565b61027a610356366004612073565b600090815260976020526040902054151590565b61029261090d565b6102e161091a565b6102e1610388366004612450565b61094a565b61025460d15481565b6102e16103a4366004612382565b610980565b6102546103b7366004612382565b60d66020526000908152604090205481565b60cb546103dc906001600160a01b031681565b6040516001600160a01b03909116815260200161025e565b6102e1610402366004612382565b6109cc565b610292610a18565b6102e161041d366004612073565b610a25565b60cd546103dc906001600160a01b031681565b6102e16104433660046124b2565b610b0d565b6102e1610456366004612502565b610b47565b6102e1610469366004612073565b610b52565b61025461047c366004612073565b60009081526097602052604090205490565b61025460d25481565b61025460d55481565b6102e16104ae366004612540565b610cf9565b61027a6104c13660046125b3565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6104f7610dcb565b60405161025e91906125e1565b6102e161051236600461262e565b610ef4565b6102e1610525366004612696565b610f39565b6102e16105383660046124b2565b610f73565b60cc546103dc906001600160a01b031681565b61025460d45481565b6102e16110f5565b60006001600160a01b0383166105d15760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061062d57506001600160e01b031982166303a24d0760e21b145b806105f657506301ffc9a760e01b6001600160e01b03198316146105f6565b60c98054610659906126cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610685906126cb565b80156106d25780601f106106a7576101008083540402835291602001916106d2565b820191906000526020600020905b8154815290600101906020018083116106b557829003601f168201915b505050505081565b606060cf6106e78361115e565b6040516020016106f89291906126ff565b6040516020818303038152906040529050919050565b600060d35482101580156105f657505060d454101590565b60cb546001600160a01b031633146107505760405162461bcd60e51b81526004016105c890612786565b60005b835181101561079257610780848281518110610771576107716127bd565b60200260200101518484611289565b8061078a816127e9565b915050610753565b50505050565b6001600160a01b0385163314806107b457506107b485336104c1565b6107d05760405162461bcd60e51b81526004016105c890612802565b6107dd8585858585611428565b5050505050565b606081518351146108495760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105c8565b600083516001600160401b038111156108645761086461208c565b60405190808252806020026020018201604052801561088d578160200160208202803683370190505b50905060005b8451811015610905576108d88582815181106108b1576108b16127bd565b60200260200101518583815181106108cb576108cb6127bd565b6020026020010151610561565b8282815181106108ea576108ea6127bd565b60209081029190910101526108fe816127e9565b9050610893565b509392505050565b60cf8054610659906126cb565b60cb546001600160a01b031633146109445760405162461bcd60e51b81526004016105c890612786565b4260ce55565b60cc546001600160a01b031633146109745760405162461bcd60e51b81526004016105c890612850565b610792848484846115cd565b60cb546001600160a01b031633146109aa5760405162461bcd60e51b81526004016105c890612786565b60cd80546001600160a01b0319166001600160a01b0392909216919091179055565b60cb546001600160a01b031633146109f65760405162461bcd60e51b81526004016105c890612786565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b60ca8054610659906126cb565b60d55433600090815260d660205260409020541115610a7e5760405162461bcd60e51b8152602060048201526015602482015274195e18d9595908195e18da185b99d9481b1a5b5a5d605a1b60448201526064016105c8565b80610a8b3360d254610561565b1015610ad95760405162461bcd60e51b815260206004820152601a60248201527f4856616c75653a206e6f7420656e6f75676820766f756368657200000000000060448201526064016105c8565b610ae63360d254836116b8565b33600090815260d6602052604081208054839290610b05908490612894565b909155505050565b60cb546001600160a01b03163314610b375760405162461bcd60e51b81526004016105c890612786565b60cf610b4382826128ed565b5050565b610b433383836117d4565b60cd546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e90602401602060405180830381865afa158015610b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbf91906129ac565b6001600160a01b031614610c0e5760405162461bcd60e51b8152602060048201526016602482015275242b30b63ab29d103737ba10383ab7359037bbb732b960511b60448201526064016105c8565b60d3548110158015610c22575060d4548111155b610c675760405162461bcd60e51b81526020600482015260166024820152754856616c75653a206e6f74206c75636b792070756e6b60501b60448201526064016105c8565b610c853360d1546046604051806020016040528060008152506115cd565b610c933360d25460016116b8565b60cd546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401600060405180830381600087803b158015610ce557600080fd5b505af11580156107dd573d6000803e3d6000fd5b60cb546001600160a01b03163314610d235760405162461bcd60e51b81526004016105c890612786565b60005b8551811015610dc357610d54868281518110610d4457610d446127bd565b60200260200101518686856118b4565b828181518110610d6657610d666127bd565b602002602001015160d76000888481518110610d8457610d846127bd565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080610dbb906127e9565b915050610d26565b505050505050565b6060600060d35460d454610ddf91906129c9565b610dea906001612894565b6001600160401b03811115610e0157610e0161208c565b604051908082528060200260200182016040528015610e2a578160200160208202803683370190505b5060d3549091505b60d4548111610eee5760cd546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e90602401602060405180830381865afa158015610e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea891906129ac565b82610eb46001846129c9565b81518110610ec457610ec46127bd565b6001600160a01b039092166020928302919091019091015280610ee6816127e9565b915050610e32565b50919050565b6001600160a01b038516331480610f105750610f1085336104c1565b610f2c5760405162461bcd60e51b81526004016105c890612802565b6107dd8585858585611a0f565b60cc546001600160a01b03163314610f635760405162461bcd60e51b81526004016105c890612850565b610f6e8383836116b8565b505050565b600054610100900460ff1615808015610f935750600054600160ff909116105b80610fad5750303b158015610fad575060005460ff166001145b6110105760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105c8565b6000805460ff191660011790558015611033576000805461ff0019166101001790555b61103b611b4b565b6040805180820190915260068152654856616c756560d01b602082015260c99061106590826128ed565b50604080518082019091526002815261242b60f11b602082015260ca9061108c90826128ed565b5061109682610b0d565b60cb80546001600160a01b031916331790554260ce558015610b43576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60ce54611106906301e13380612894565b42101561114c5760405162461bcd60e51b8152602060048201526014602482015273242b30b63ab29d103737ba103732bb903cb2b0b960611b60448201526064016105c8565b33600090815260d66020526040812055565b6060816000036111855750506040805180820190915260018152600360fc1b602082015290565b8160005b81156111af5780611199816127e9565b91506111a89050600a836129dc565b9150611189565b6000816001600160401b038111156111c9576111c961208c565b6040519080825280601f01601f1916602001820160405280156111f3576020820181803683370190505b509050815b8515611280576112096001826129c9565b90506000611218600a886129dc565b61122390600a6129fe565b61122d90886129c9565b611238906030612a15565b905060008160f81b905080848481518110611255576112556127bd565b60200101906001600160f81b031916908160001a905350611277600a896129dc565b975050506111f8565b50949350505050565b6001600160a01b0383166112af5760405162461bcd60e51b81526004016105c890612a2e565b80518251146112d05760405162461bcd60e51b81526004016105c890612a71565b60003390506112f381856000868660405180602001604052806000815250611bb8565b60005b83518110156113bb576000848281518110611313576113136127bd565b602002602001015190506000848381518110611331576113316127bd565b60209081029190910181015160008481526065835260408082206001600160a01b038c1683529093529190912054909150818110156113825760405162461bcd60e51b81526004016105c890612ab9565b60009283526065602090815260408085206001600160a01b038b16865290915290922091039055806113b3816127e9565b9150506112f6565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161140c929190612afd565b60405180910390a4604080516020810190915260009052610792565b81518351146114495760405162461bcd60e51b81526004016105c890612a71565b6001600160a01b03841661146f5760405162461bcd60e51b81526004016105c890612b2b565b3361147e818787878787611bb8565b60005b845181101561156757600085828151811061149e5761149e6127bd565b6020026020010151905060008583815181106114bc576114bc6127bd565b60209081029190910181015160008481526065835260408082206001600160a01b038e16835290935291909120549091508181101561150d5760405162461bcd60e51b81526004016105c890612b70565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061154c908490612894565b9250508190555050505080611560906127e9565b9050611481565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516115b7929190612afd565b60405180910390a4610dc3818787878787611d31565b6001600160a01b0384166115f35760405162461bcd60e51b81526004016105c890612bba565b3360006115ff85611e8c565b9050600061160c85611e8c565b905061161d83600089858589611bb8565b60008681526065602090815260408083206001600160a01b038b1684529091528120805487929061164f908490612894565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46116af83600089898989611ed7565b50505050505050565b6001600160a01b0383166116de5760405162461bcd60e51b81526004016105c890612a2e565b3360006116ea84611e8c565b905060006116f784611e8c565b905061171783876000858560405180602001604052806000815250611bb8565b60008581526065602090815260408083206001600160a01b038a1684529091529020548481101561175a5760405162461bcd60e51b81526004016105c890612ab9565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526116af565b816001600160a01b0316836001600160a01b0316036118475760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105c8565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166118da5760405162461bcd60e51b81526004016105c890612bba565b81518351146118fb5760405162461bcd60e51b81526004016105c890612a71565b3361190b81600087878787611bb8565b60005b84518110156119a757838181518110611929576119296127bd565b602002602001015160656000878481518110611947576119476127bd565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461198f9190612894565b9091555081905061199f816127e9565b91505061190e565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516119f8929190612afd565b60405180910390a46107dd81600087878787611d31565b6001600160a01b038416611a355760405162461bcd60e51b81526004016105c890612b2b565b336000611a4185611e8c565b90506000611a4e85611e8c565b9050611a5e838989858589611bb8565b60008681526065602090815260408083206001600160a01b038c16845290915290205485811015611aa15760405162461bcd60e51b81526004016105c890612b70565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611ae0908490612894565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611b40848a8a8a8a8a611ed7565b505050505050505050565b600054610100900460ff16611bb65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105c8565b565b6001600160a01b038516611c3f5760005b8351811015611c3d57828181518110611be457611be46127bd565b602002602001015160976000868481518110611c0257611c026127bd565b602002602001015181526020019081526020016000206000828254611c279190612894565b90915550611c369050816127e9565b9050611bc9565b505b6001600160a01b038416610dc35760005b83518110156116af576000848281518110611c6d57611c6d6127bd565b602002602001015190506000848381518110611c8b57611c8b6127bd565b6020026020010151905060006097600084815260200190815260200160002054905081811015611d0e5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b60648201526084016105c8565b60009283526097602052604090922091039055611d2a816127e9565b9050611c50565b6001600160a01b0384163b15610dc35760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611d759089908990889088908890600401612bfb565b6020604051808303816000875af1925050508015611db0575060408051601f3d908101601f19168201909252611dad91810190612c59565b60015b611e5c57611dbc612c76565b806308c379a003611df55750611dd0612c92565b80611ddb5750611df7565b8060405162461bcd60e51b81526004016105c89190612060565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105c8565b6001600160e01b0319811663bc197c8160e01b146116af5760405162461bcd60e51b81526004016105c890612d1b565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611ec657611ec66127bd565b602090810291909101015292915050565b6001600160a01b0384163b15610dc35760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611f1b9089908990889088908890600401612d63565b6020604051808303816000875af1925050508015611f56575060408051601f3d908101601f19168201909252611f5391810190612c59565b60015b611f6257611dbc612c76565b6001600160e01b0319811663f23a6e6160e01b146116af5760405162461bcd60e51b81526004016105c890612d1b565b6001600160a01b0381168114611fa757600080fd5b50565b60008060408385031215611fbd57600080fd5b8235611fc881611f92565b946020939093013593505050565b6001600160e01b031981168114611fa757600080fd5b600060208284031215611ffe57600080fd5b813561200981611fd6565b9392505050565b60005b8381101561202b578181015183820152602001612013565b50506000910152565b6000815180845261204c816020860160208601612010565b601f01601f19169290920160200192915050565b6020815260006120096020830184612034565b60006020828403121561208557600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156120c7576120c761208c565b6040525050565b60006001600160401b038211156120e7576120e761208c565b5060051b60200190565b600082601f83011261210257600080fd5b8135602061210f826120ce565b60405161211c82826120a2565b83815260059390931b850182019282810191508684111561213c57600080fd5b8286015b8481101561216057803561215381611f92565b8352918301918301612140565b509695505050505050565b600082601f83011261217c57600080fd5b81356020612189826120ce565b60405161219682826120a2565b83815260059390931b85018201928281019150868411156121b657600080fd5b8286015b8481101561216057803583529183019183016121ba565b6000806000606084860312156121e657600080fd5b83356001600160401b03808211156121fd57600080fd5b612209878388016120f1565b9450602086013591508082111561221f57600080fd5b61222b8783880161216b565b9350604086013591508082111561224157600080fd5b5061224e8682870161216b565b9150509250925092565b60006001600160401b038311156122715761227161208c565b604051612288601f8501601f1916602001826120a2565b80915083815284848401111561229d57600080fd5b83836020830137600060208583010152509392505050565b600082601f8301126122c657600080fd5b61200983833560208501612258565b600080600080600060a086880312156122ed57600080fd5b85356122f881611f92565b9450602086013561230881611f92565b935060408601356001600160401b038082111561232457600080fd5b61233089838a0161216b565b9450606088013591508082111561234657600080fd5b61235289838a0161216b565b9350608088013591508082111561236857600080fd5b50612375888289016122b5565b9150509295509295909350565b60006020828403121561239457600080fd5b813561200981611f92565b600080604083850312156123b257600080fd5b82356001600160401b03808211156123c957600080fd5b6123d5868387016120f1565b935060208501359150808211156123eb57600080fd5b506123f88582860161216b565b9150509250929050565b600081518084526020808501945080840160005b8381101561243257815187529582019590820190600101612416565b509495945050505050565b6020815260006120096020830184612402565b6000806000806080858703121561246657600080fd5b843561247181611f92565b9350602085013592506040850135915060608501356001600160401b0381111561249a57600080fd5b6124a6878288016122b5565b91505092959194509250565b6000602082840312156124c457600080fd5b81356001600160401b038111156124da57600080fd5b8201601f810184136124eb57600080fd5b6124fa84823560208401612258565b949350505050565b6000806040838503121561251557600080fd5b823561252081611f92565b91506020830135801515811461253557600080fd5b809150509250929050565b600080600080600060a0868803121561255857600080fd5b85356001600160401b038082111561256f57600080fd5b61257b89838a016120f1565b9650602088013591508082111561259157600080fd5b61259d89838a0161216b565b9550604088013591508082111561232457600080fd5b600080604083850312156125c657600080fd5b82356125d181611f92565b9150602083013561253581611f92565b6020808252825182820181905260009190848201906040850190845b818110156126225783516001600160a01b0316835292840192918401916001016125fd565b50909695505050505050565b600080600080600060a0868803121561264657600080fd5b853561265181611f92565b9450602086013561266181611f92565b9350604086013592506060860135915060808601356001600160401b0381111561268a57600080fd5b612375888289016122b5565b6000806000606084860312156126ab57600080fd5b83356126b681611f92565b95602085013595506040909401359392505050565b600181811c908216806126df57607f821691505b602082108103610eee57634e487b7160e01b600052602260045260246000fd5b600080845461270d816126cb565b60018281168015612725576001811461273a57612769565b60ff1984168752821515830287019450612769565b8860005260208060002060005b858110156127605781548a820152908401908201612747565b50505082870194505b50505050835161277d818360208801612010565b01949350505050565b6020808252601f908201527f4856616c75653a2063616c6c6572206973206e6f7420746865206f776e657200604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016127fb576127fb6127d3565b5060010190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526024908201527f4856616c75653a2063616c6c6572206973206e6f742074686520636f6e74726f604082015263363632b960e11b606082015260800190565b808201808211156105f6576105f66127d3565b601f821115610f6e57600081815260208120601f850160051c810160208610156128ce5750805b601f850160051c820191505b81811015610dc3578281556001016128da565b81516001600160401b038111156129065761290661208c565b61291a8161291484546126cb565b846128a7565b602080601f83116001811461294f57600084156129375750858301515b600019600386901b1c1916600185901b178555610dc3565b600085815260208120601f198616915b8281101561297e5788860151825594840194600190910190840161295f565b508582101561299c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156129be57600080fd5b815161200981611f92565b818103818111156105f6576105f66127d3565b6000826129f957634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176105f6576105f66127d3565b60ff81811683821601908111156105f6576105f66127d3565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b604081526000612b106040830185612402565b8281036020840152612b228185612402565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090612c2790830186612402565b8281036060840152612c398186612402565b90508281036080840152612c4d8185612034565b98975050505050505050565b600060208284031215612c6b57600080fd5b815161200981611fd6565b600060033d1115612c8f5760046000803e5060005160e01c5b90565b600060443d1015612ca05790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612ccf57505050505090565b8285019150815181811115612ce75750505050505090565b843d8701016020828501011115612d015750505050505090565b612d10602082860101876120a2565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612d9d90830184612034565b97965050505050505056fea2646970667358221220b657da11c8bd26dab3dd29324d493156513651632cc52f549f6d9090fbd27cbe64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023c5760003560e01c80638da5cb5b1161013b578063d717b05e116100b8578063f5298aca1161007c578063f5298aca14610517578063f62d18881461052a578063f77c47911461053d578063f7e056ee14610550578063f96b7bf91461055957600080fd5b8063d717b05e14610497578063e1012a89146104a0578063e985e9c5146104b3578063f11b1fdd146104ef578063f242432a1461050457600080fd5b8063a0bcfc7f116100ff578063a0bcfc7f14610435578063a22cb46514610448578063a5afb7e01461045b578063bd85b0391461046e578063cdda418c1461048e57600080fd5b80638da5cb5b146103c957806392eefe9b146103f457806395d89b41146104075780639642903f1461040f5780639ba138c81461042257600080fd5b8063444b7aaf116101c95780636be55bb41161018d5780636be55bb414610372578063731133e91461037a57806383d18f7a1461038d578063887be052146103965780638b0bb069146103a957600080fd5b8063444b7aaf146102ff5780634c25e11f146103085780634e1273f4146103285780634f558e79146103485780635b2bd79e1461036a57600080fd5b80630e89341c116102105780630e89341c146102a85780631fe09da3146102bb5780632a36c108146102ce5780632eb2c2d6146102e3578063340a9a1c146102f657600080fd5b8062fdd58e1461024157806301ffc9a71461026757806306fdde031461028a5780630e4715251461029f575b600080fd5b61025461024f366004611faa565b610561565b6040519081526020015b60405180910390f35b61027a610275366004611fec565b6105fc565b604051901515815260200161025e565b61029261064c565b60405161025e9190612060565b61025460d35481565b6102926102b6366004612073565b6106da565b61027a6102c9366004612073565b61070e565b6102e16102dc3660046121d1565b610726565b005b6102e16102f13660046122d5565b610798565b61025460ce5481565b61025460d05481565b610254610316366004612382565b60d76020526000908152604090205481565b61033b61033636600461239f565b6107e4565b60405161025e919061243d565b61027a610356366004612073565b600090815260976020526040902054151590565b61029261090d565b6102e161091a565b6102e1610388366004612450565b61094a565b61025460d15481565b6102e16103a4366004612382565b610980565b6102546103b7366004612382565b60d66020526000908152604090205481565b60cb546103dc906001600160a01b031681565b6040516001600160a01b03909116815260200161025e565b6102e1610402366004612382565b6109cc565b610292610a18565b6102e161041d366004612073565b610a25565b60cd546103dc906001600160a01b031681565b6102e16104433660046124b2565b610b0d565b6102e1610456366004612502565b610b47565b6102e1610469366004612073565b610b52565b61025461047c366004612073565b60009081526097602052604090205490565b61025460d25481565b61025460d55481565b6102e16104ae366004612540565b610cf9565b61027a6104c13660046125b3565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6104f7610dcb565b60405161025e91906125e1565b6102e161051236600461262e565b610ef4565b6102e1610525366004612696565b610f39565b6102e16105383660046124b2565b610f73565b60cc546103dc906001600160a01b031681565b61025460d45481565b6102e16110f5565b60006001600160a01b0383166105d15760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061062d57506001600160e01b031982166303a24d0760e21b145b806105f657506301ffc9a760e01b6001600160e01b03198316146105f6565b60c98054610659906126cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610685906126cb565b80156106d25780601f106106a7576101008083540402835291602001916106d2565b820191906000526020600020905b8154815290600101906020018083116106b557829003601f168201915b505050505081565b606060cf6106e78361115e565b6040516020016106f89291906126ff565b6040516020818303038152906040529050919050565b600060d35482101580156105f657505060d454101590565b60cb546001600160a01b031633146107505760405162461bcd60e51b81526004016105c890612786565b60005b835181101561079257610780848281518110610771576107716127bd565b60200260200101518484611289565b8061078a816127e9565b915050610753565b50505050565b6001600160a01b0385163314806107b457506107b485336104c1565b6107d05760405162461bcd60e51b81526004016105c890612802565b6107dd8585858585611428565b5050505050565b606081518351146108495760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105c8565b600083516001600160401b038111156108645761086461208c565b60405190808252806020026020018201604052801561088d578160200160208202803683370190505b50905060005b8451811015610905576108d88582815181106108b1576108b16127bd565b60200260200101518583815181106108cb576108cb6127bd565b6020026020010151610561565b8282815181106108ea576108ea6127bd565b60209081029190910101526108fe816127e9565b9050610893565b509392505050565b60cf8054610659906126cb565b60cb546001600160a01b031633146109445760405162461bcd60e51b81526004016105c890612786565b4260ce55565b60cc546001600160a01b031633146109745760405162461bcd60e51b81526004016105c890612850565b610792848484846115cd565b60cb546001600160a01b031633146109aa5760405162461bcd60e51b81526004016105c890612786565b60cd80546001600160a01b0319166001600160a01b0392909216919091179055565b60cb546001600160a01b031633146109f65760405162461bcd60e51b81526004016105c890612786565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b60ca8054610659906126cb565b60d55433600090815260d660205260409020541115610a7e5760405162461bcd60e51b8152602060048201526015602482015274195e18d9595908195e18da185b99d9481b1a5b5a5d605a1b60448201526064016105c8565b80610a8b3360d254610561565b1015610ad95760405162461bcd60e51b815260206004820152601a60248201527f4856616c75653a206e6f7420656e6f75676820766f756368657200000000000060448201526064016105c8565b610ae63360d254836116b8565b33600090815260d6602052604081208054839290610b05908490612894565b909155505050565b60cb546001600160a01b03163314610b375760405162461bcd60e51b81526004016105c890612786565b60cf610b4382826128ed565b5050565b610b433383836117d4565b60cd546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e90602401602060405180830381865afa158015610b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbf91906129ac565b6001600160a01b031614610c0e5760405162461bcd60e51b8152602060048201526016602482015275242b30b63ab29d103737ba10383ab7359037bbb732b960511b60448201526064016105c8565b60d3548110158015610c22575060d4548111155b610c675760405162461bcd60e51b81526020600482015260166024820152754856616c75653a206e6f74206c75636b792070756e6b60501b60448201526064016105c8565b610c853360d1546046604051806020016040528060008152506115cd565b610c933360d25460016116b8565b60cd546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401600060405180830381600087803b158015610ce557600080fd5b505af11580156107dd573d6000803e3d6000fd5b60cb546001600160a01b03163314610d235760405162461bcd60e51b81526004016105c890612786565b60005b8551811015610dc357610d54868281518110610d4457610d446127bd565b60200260200101518686856118b4565b828181518110610d6657610d666127bd565b602002602001015160d76000888481518110610d8457610d846127bd565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080610dbb906127e9565b915050610d26565b505050505050565b6060600060d35460d454610ddf91906129c9565b610dea906001612894565b6001600160401b03811115610e0157610e0161208c565b604051908082528060200260200182016040528015610e2a578160200160208202803683370190505b5060d3549091505b60d4548111610eee5760cd546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e90602401602060405180830381865afa158015610e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea891906129ac565b82610eb46001846129c9565b81518110610ec457610ec46127bd565b6001600160a01b039092166020928302919091019091015280610ee6816127e9565b915050610e32565b50919050565b6001600160a01b038516331480610f105750610f1085336104c1565b610f2c5760405162461bcd60e51b81526004016105c890612802565b6107dd8585858585611a0f565b60cc546001600160a01b03163314610f635760405162461bcd60e51b81526004016105c890612850565b610f6e8383836116b8565b505050565b600054610100900460ff1615808015610f935750600054600160ff909116105b80610fad5750303b158015610fad575060005460ff166001145b6110105760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105c8565b6000805460ff191660011790558015611033576000805461ff0019166101001790555b61103b611b4b565b6040805180820190915260068152654856616c756560d01b602082015260c99061106590826128ed565b50604080518082019091526002815261242b60f11b602082015260ca9061108c90826128ed565b5061109682610b0d565b60cb80546001600160a01b031916331790554260ce558015610b43576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60ce54611106906301e13380612894565b42101561114c5760405162461bcd60e51b8152602060048201526014602482015273242b30b63ab29d103737ba103732bb903cb2b0b960611b60448201526064016105c8565b33600090815260d66020526040812055565b6060816000036111855750506040805180820190915260018152600360fc1b602082015290565b8160005b81156111af5780611199816127e9565b91506111a89050600a836129dc565b9150611189565b6000816001600160401b038111156111c9576111c961208c565b6040519080825280601f01601f1916602001820160405280156111f3576020820181803683370190505b509050815b8515611280576112096001826129c9565b90506000611218600a886129dc565b61122390600a6129fe565b61122d90886129c9565b611238906030612a15565b905060008160f81b905080848481518110611255576112556127bd565b60200101906001600160f81b031916908160001a905350611277600a896129dc565b975050506111f8565b50949350505050565b6001600160a01b0383166112af5760405162461bcd60e51b81526004016105c890612a2e565b80518251146112d05760405162461bcd60e51b81526004016105c890612a71565b60003390506112f381856000868660405180602001604052806000815250611bb8565b60005b83518110156113bb576000848281518110611313576113136127bd565b602002602001015190506000848381518110611331576113316127bd565b60209081029190910181015160008481526065835260408082206001600160a01b038c1683529093529190912054909150818110156113825760405162461bcd60e51b81526004016105c890612ab9565b60009283526065602090815260408085206001600160a01b038b16865290915290922091039055806113b3816127e9565b9150506112f6565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161140c929190612afd565b60405180910390a4604080516020810190915260009052610792565b81518351146114495760405162461bcd60e51b81526004016105c890612a71565b6001600160a01b03841661146f5760405162461bcd60e51b81526004016105c890612b2b565b3361147e818787878787611bb8565b60005b845181101561156757600085828151811061149e5761149e6127bd565b6020026020010151905060008583815181106114bc576114bc6127bd565b60209081029190910181015160008481526065835260408082206001600160a01b038e16835290935291909120549091508181101561150d5760405162461bcd60e51b81526004016105c890612b70565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061154c908490612894565b9250508190555050505080611560906127e9565b9050611481565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516115b7929190612afd565b60405180910390a4610dc3818787878787611d31565b6001600160a01b0384166115f35760405162461bcd60e51b81526004016105c890612bba565b3360006115ff85611e8c565b9050600061160c85611e8c565b905061161d83600089858589611bb8565b60008681526065602090815260408083206001600160a01b038b1684529091528120805487929061164f908490612894565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46116af83600089898989611ed7565b50505050505050565b6001600160a01b0383166116de5760405162461bcd60e51b81526004016105c890612a2e565b3360006116ea84611e8c565b905060006116f784611e8c565b905061171783876000858560405180602001604052806000815250611bb8565b60008581526065602090815260408083206001600160a01b038a1684529091529020548481101561175a5760405162461bcd60e51b81526004016105c890612ab9565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526116af565b816001600160a01b0316836001600160a01b0316036118475760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105c8565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166118da5760405162461bcd60e51b81526004016105c890612bba565b81518351146118fb5760405162461bcd60e51b81526004016105c890612a71565b3361190b81600087878787611bb8565b60005b84518110156119a757838181518110611929576119296127bd565b602002602001015160656000878481518110611947576119476127bd565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461198f9190612894565b9091555081905061199f816127e9565b91505061190e565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516119f8929190612afd565b60405180910390a46107dd81600087878787611d31565b6001600160a01b038416611a355760405162461bcd60e51b81526004016105c890612b2b565b336000611a4185611e8c565b90506000611a4e85611e8c565b9050611a5e838989858589611bb8565b60008681526065602090815260408083206001600160a01b038c16845290915290205485811015611aa15760405162461bcd60e51b81526004016105c890612b70565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611ae0908490612894565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611b40848a8a8a8a8a611ed7565b505050505050505050565b600054610100900460ff16611bb65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105c8565b565b6001600160a01b038516611c3f5760005b8351811015611c3d57828181518110611be457611be46127bd565b602002602001015160976000868481518110611c0257611c026127bd565b602002602001015181526020019081526020016000206000828254611c279190612894565b90915550611c369050816127e9565b9050611bc9565b505b6001600160a01b038416610dc35760005b83518110156116af576000848281518110611c6d57611c6d6127bd565b602002602001015190506000848381518110611c8b57611c8b6127bd565b6020026020010151905060006097600084815260200190815260200160002054905081811015611d0e5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b60648201526084016105c8565b60009283526097602052604090922091039055611d2a816127e9565b9050611c50565b6001600160a01b0384163b15610dc35760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611d759089908990889088908890600401612bfb565b6020604051808303816000875af1925050508015611db0575060408051601f3d908101601f19168201909252611dad91810190612c59565b60015b611e5c57611dbc612c76565b806308c379a003611df55750611dd0612c92565b80611ddb5750611df7565b8060405162461bcd60e51b81526004016105c89190612060565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105c8565b6001600160e01b0319811663bc197c8160e01b146116af5760405162461bcd60e51b81526004016105c890612d1b565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611ec657611ec66127bd565b602090810291909101015292915050565b6001600160a01b0384163b15610dc35760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611f1b9089908990889088908890600401612d63565b6020604051808303816000875af1925050508015611f56575060408051601f3d908101601f19168201909252611f5391810190612c59565b60015b611f6257611dbc612c76565b6001600160e01b0319811663f23a6e6160e01b146116af5760405162461bcd60e51b81526004016105c890612d1b565b6001600160a01b0381168114611fa757600080fd5b50565b60008060408385031215611fbd57600080fd5b8235611fc881611f92565b946020939093013593505050565b6001600160e01b031981168114611fa757600080fd5b600060208284031215611ffe57600080fd5b813561200981611fd6565b9392505050565b60005b8381101561202b578181015183820152602001612013565b50506000910152565b6000815180845261204c816020860160208601612010565b601f01601f19169290920160200192915050565b6020815260006120096020830184612034565b60006020828403121561208557600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156120c7576120c761208c565b6040525050565b60006001600160401b038211156120e7576120e761208c565b5060051b60200190565b600082601f83011261210257600080fd5b8135602061210f826120ce565b60405161211c82826120a2565b83815260059390931b850182019282810191508684111561213c57600080fd5b8286015b8481101561216057803561215381611f92565b8352918301918301612140565b509695505050505050565b600082601f83011261217c57600080fd5b81356020612189826120ce565b60405161219682826120a2565b83815260059390931b85018201928281019150868411156121b657600080fd5b8286015b8481101561216057803583529183019183016121ba565b6000806000606084860312156121e657600080fd5b83356001600160401b03808211156121fd57600080fd5b612209878388016120f1565b9450602086013591508082111561221f57600080fd5b61222b8783880161216b565b9350604086013591508082111561224157600080fd5b5061224e8682870161216b565b9150509250925092565b60006001600160401b038311156122715761227161208c565b604051612288601f8501601f1916602001826120a2565b80915083815284848401111561229d57600080fd5b83836020830137600060208583010152509392505050565b600082601f8301126122c657600080fd5b61200983833560208501612258565b600080600080600060a086880312156122ed57600080fd5b85356122f881611f92565b9450602086013561230881611f92565b935060408601356001600160401b038082111561232457600080fd5b61233089838a0161216b565b9450606088013591508082111561234657600080fd5b61235289838a0161216b565b9350608088013591508082111561236857600080fd5b50612375888289016122b5565b9150509295509295909350565b60006020828403121561239457600080fd5b813561200981611f92565b600080604083850312156123b257600080fd5b82356001600160401b03808211156123c957600080fd5b6123d5868387016120f1565b935060208501359150808211156123eb57600080fd5b506123f88582860161216b565b9150509250929050565b600081518084526020808501945080840160005b8381101561243257815187529582019590820190600101612416565b509495945050505050565b6020815260006120096020830184612402565b6000806000806080858703121561246657600080fd5b843561247181611f92565b9350602085013592506040850135915060608501356001600160401b0381111561249a57600080fd5b6124a6878288016122b5565b91505092959194509250565b6000602082840312156124c457600080fd5b81356001600160401b038111156124da57600080fd5b8201601f810184136124eb57600080fd5b6124fa84823560208401612258565b949350505050565b6000806040838503121561251557600080fd5b823561252081611f92565b91506020830135801515811461253557600080fd5b809150509250929050565b600080600080600060a0868803121561255857600080fd5b85356001600160401b038082111561256f57600080fd5b61257b89838a016120f1565b9650602088013591508082111561259157600080fd5b61259d89838a0161216b565b9550604088013591508082111561232457600080fd5b600080604083850312156125c657600080fd5b82356125d181611f92565b9150602083013561253581611f92565b6020808252825182820181905260009190848201906040850190845b818110156126225783516001600160a01b0316835292840192918401916001016125fd565b50909695505050505050565b600080600080600060a0868803121561264657600080fd5b853561265181611f92565b9450602086013561266181611f92565b9350604086013592506060860135915060808601356001600160401b0381111561268a57600080fd5b612375888289016122b5565b6000806000606084860312156126ab57600080fd5b83356126b681611f92565b95602085013595506040909401359392505050565b600181811c908216806126df57607f821691505b602082108103610eee57634e487b7160e01b600052602260045260246000fd5b600080845461270d816126cb565b60018281168015612725576001811461273a57612769565b60ff1984168752821515830287019450612769565b8860005260208060002060005b858110156127605781548a820152908401908201612747565b50505082870194505b50505050835161277d818360208801612010565b01949350505050565b6020808252601f908201527f4856616c75653a2063616c6c6572206973206e6f7420746865206f776e657200604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016127fb576127fb6127d3565b5060010190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526024908201527f4856616c75653a2063616c6c6572206973206e6f742074686520636f6e74726f604082015263363632b960e11b606082015260800190565b808201808211156105f6576105f66127d3565b601f821115610f6e57600081815260208120601f850160051c810160208610156128ce5750805b601f850160051c820191505b81811015610dc3578281556001016128da565b81516001600160401b038111156129065761290661208c565b61291a8161291484546126cb565b846128a7565b602080601f83116001811461294f57600084156129375750858301515b600019600386901b1c1916600185901b178555610dc3565b600085815260208120601f198616915b8281101561297e5788860151825594840194600190910190840161295f565b508582101561299c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156129be57600080fd5b815161200981611f92565b818103818111156105f6576105f66127d3565b6000826129f957634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176105f6576105f66127d3565b60ff81811683821601908111156105f6576105f66127d3565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b604081526000612b106040830185612402565b8281036020840152612b228185612402565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090612c2790830186612402565b8281036060840152612c398186612402565b90508281036080840152612c4d8185612034565b98975050505050505050565b600060208284031215612c6b57600080fd5b815161200981611fd6565b600060033d1115612c8f5760046000803e5060005160e01c5b90565b600060443d1015612ca05790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612ccf57505050505090565b8285019150815181811115612ce75750505050505090565b843d8701016020828501011115612d015750505050505090565b612d10602082860101876120a2565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612d9d90830184612034565b97965050505050505056fea2646970667358221220b657da11c8bd26dab3dd29324d493156513651632cc52f549f6d9090fbd27cbe64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/HValue.sol:HValue",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/HValue.sol:HValue",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2254,
        "contract": "contracts/HValue.sol:HValue",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2298,
        "contract": "contracts/HValue.sol:HValue",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 197,
        "contract": "contracts/HValue.sol:HValue",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 203,
        "contract": "contracts/HValue.sol:HValue",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 205,
        "contract": "contracts/HValue.sol:HValue",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1412,
        "contract": "contracts/HValue.sol:HValue",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 1601,
        "contract": "contracts/HValue.sol:HValue",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1752,
        "contract": "contracts/HValue.sol:HValue",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6110,
        "contract": "contracts/HValue.sol:HValue",
        "label": "name",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 6112,
        "contract": "contracts/HValue.sol:HValue",
        "label": "symbol",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 6114,
        "contract": "contracts/HValue.sol:HValue",
        "label": "owner",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 6116,
        "contract": "contracts/HValue.sol:HValue",
        "label": "controller",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 6119,
        "contract": "contracts/HValue.sol:HValue",
        "label": "hashPunk",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(IHashPunk)6108"
      },
      {
        "astId": 6121,
        "contract": "contracts/HValue.sol:HValue",
        "label": "currentTimeStamp",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 6123,
        "contract": "contracts/HValue.sol:HValue",
        "label": "baseMetadataURI",
        "offset": 0,
        "slot": "207",
        "type": "t_string_storage"
      },
      {
        "astId": 6126,
        "contract": "contracts/HValue.sol:HValue",
        "label": "passId",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 6129,
        "contract": "contracts/HValue.sol:HValue",
        "label": "Hpoint",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 6132,
        "contract": "contracts/HValue.sol:HValue",
        "label": "voucher",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 6135,
        "contract": "contracts/HValue.sol:HValue",
        "label": "luckyStart",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 6138,
        "contract": "contracts/HValue.sol:HValue",
        "label": "luckyEnd",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 6141,
        "contract": "contracts/HValue.sol:HValue",
        "label": "exchangeLimit",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 6145,
        "contract": "contracts/HValue.sol:HValue",
        "label": "exchangeTimes",
        "offset": 0,
        "slot": "214",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6149,
        "contract": "contracts/HValue.sol:HValue",
        "label": "negtiveValue",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IHashPunk)6108": {
        "encoding": "inplace",
        "label": "contract IHashPunk",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}